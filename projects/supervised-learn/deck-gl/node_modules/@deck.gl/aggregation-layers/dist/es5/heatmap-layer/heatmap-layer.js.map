{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer.js"],"names":["RESOLUTION","SIZE_2K","ZOOM_DEBOUNCE","TEXTURE_PARAMETERS","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","defaultColorRange","threshold","HeatmapLayer","gl","context","textureSize","Math","state","supported","log","error","id","setState","_setupAttributes","_setupResources","changeFlags","somethingChanged","opts","props","oldProps","_getChangeFlags","viewportChanged","boundsChanged","_updateBounds","dataChanged","uniformsChanged","_updateWeightmap","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","_updateTextureRenderingBounds","zoom","viewport","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","updateTriggers","TriangleLayer","getSubLayerProps","data","attributes","positions","texCoords","vertexCount","maxTexture","texture","weightsTransform","maxWeightTransform","delete","AttributeManager","stats","_isDataChanged","updateTriggersChanged","all","attributeManager","getAttributeManager","add","size","accessor","weights","width","height","parameters","Transform","vs","weights_vs","_fs","weights_fs","modules","elementCount","_targetTexture","_targetTextureVarying","model","_sourceTextures","inTexture","vs_max","Buffer","byteLength","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","visibleWorldBounds","visibleCommonBounds","_worldToCommonBounds","newState","worldBounds","scaledCommonBounds","_commonToWorldBounds","coordinateSystem","COORDINATE_SYSTEM","LNGLAT","normalizedCommonBounds","scaleToAspect","normalize","commonBounds","map","scale","subData","textureBounds","p","projectPosition","colors","setImageData","length","_updateAttributes","moduleParameters","Object","assign","create","pickingActive","useLayerCoordinateSystem","uniforms","getModuleUniforms","textureWidth","update","getNumInstances","clearRenderTarget","_updateMaxWeightValue","lastUpdate","Date","now","fromTimer","updateTimer","timeSinceLastUpdate","setTimeout","bind","minLong","minLat","maxLong","maxLat","topLeftCommon","bottomRightCommon","slice","concat","xMin","yMin","xMax","yMax","topLeftWorld","unprojectPosition","bottomRightWorld","CompositeLayer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates\n} from './heatmap-layer-utils';\nimport {Buffer, Transform, getParameter, isWebGL2} from '@luma.gl/core';\nimport {CompositeLayer, AttributeManager, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport {getFloatTexture} from '../utils/resource-utils';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst SIZE_2K = 2048;\nconst ZOOM_DEBOUNCE = 500; // milliseconds\nconst TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nconst defaultProps = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 30},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05}\n};\n\nexport default class HeatmapLayer extends CompositeLayer {\n  initializeState() {\n    const {gl} = this.context;\n    const textureSize = Math.min(SIZE_2K, getParameter(gl, gl.MAX_TEXTURE_SIZE));\n    this.state = {textureSize, supported: true};\n    if (!isWebGL2(gl)) {\n      log.error(`HeatmapLayer ${this.id} is not supported on this browser, requires WebGL2`)();\n      this.setState({supported: false});\n      return;\n    }\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.viewportChanged) {\n      changeFlags.boundsChanged = this._updateBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged || changeFlags.uniformsChanged) {\n      this._updateWeightmap();\n    } else if (changeFlags.viewportZoomChanged) {\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (changeFlags.viewportChanged) {\n      this._updateTextureRenderingBounds();\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture\n    } = this.state;\n    const {updateTriggers, intensity, threshold} = this.props;\n\n    return new TriangleLayer(\n      this.getSubLayerProps({\n        id: `${this.id}-triangle-layer`,\n        updateTriggers\n      }),\n      {\n        id: 'heatmap-triangle-layer',\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        texture: weightsTexture,\n        intensity,\n        threshold\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture\n    } = this.state;\n    /* eslint-disable no-unused-expressions */\n    weightsTransform && weightsTransform.delete();\n    weightsTexture && weightsTexture.delete();\n    maxWeightTransform && maxWeightTransform.delete();\n    maxWeightsTexture && maxWeightsTexture.delete();\n    triPositionBuffer && triPositionBuffer.delete();\n    triTexCoordBuffer && triTexCoordBuffer.delete();\n    colorTexture && colorTexture.delete();\n    /* eslint-enable no-unused-expressions */\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const {oldProps, props} = opts;\n    const changeFlags = {};\n    if (this._isDataChanged(opts)) {\n      changeFlags.dataChanged = true;\n    }\n    if (oldProps.radiusPixels !== props.radiusPixels) {\n      changeFlags.uniformsChanged = true;\n    }\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _isDataChanged({changeFlags}) {\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (\n      changeFlags.updateTriggersChanged &&\n      (changeFlags.updateTriggersChanged.all ||\n        changeFlags.updateTriggersChanged.getPosition ||\n        changeFlags.updateTriggersChanged.getWeight)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    const {textureSize} = this.state;\n    const weightsTexture = getFloatTexture(gl, {\n      width: textureSize,\n      height: textureSize,\n      parameters: TEXTURE_PARAMETERS\n    });\n    const maxWeightsTexture = getFloatTexture(gl); // 1 X 1 texture\n    const weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      vs: weights_vs,\n      _fs: weights_fs,\n      modules: ['project32'],\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture'\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      weightsTransform,\n      model: weightsTransform.model,\n      maxWeightTransform: new Transform(gl, {\n        id: `${this.id}-max-weights-transform`,\n        _sourceTextures: {\n          inTexture: weightsTexture\n        },\n        _targetTexture: maxWeightsTexture,\n        _targetTextureVarying: 'outTexture',\n        vs: vs_max,\n        elementCount: textureSize * textureSize\n      }),\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate = false) {\n    const {textureSize} = this.state;\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ];\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n    // #2 : convert world bounds to common (Flat) bounds\n    const visibleCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n    const newState = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #3: extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = scaleToAspectRatio(\n        visibleCommonBounds,\n        textureSize * RESOLUTION,\n        textureSize * RESOLUTION\n      );\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds, {\n        scaleToAspect: true,\n        normalize: true,\n        width: textureSize * RESOLUTION,\n        height: textureSize * RESOLUTION\n      });\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n\n    const {viewport} = this.context;\n    const commonBounds = normalizedCommonBounds.map(x => x * viewport.scale);\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), commonBounds)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, true);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = getFloatTexture(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        parameters: TEXTURE_PARAMETERS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels} = this.props;\n    const {weightsTransform, worldBounds, textureSize} = this.state;\n\n    // base Layer class doesn't update attributes for composite layers, hence manually trigger it.\n    this._updateAttributes(this.props);\n\n    const moduleParameters = Object.assign(Object.create(this.props), {\n      viewport: this.context.viewport,\n      pickingActive: 0\n    });\n\n    // #5: convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true,\n      scaleToAspect: true,\n      width: textureSize * RESOLUTION,\n      height: textureSize * RESOLUTION\n    });\n\n    const uniforms = Object.assign({}, weightsTransform.model.getModuleUniforms(moduleParameters), {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize\n    });\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    weightsTransform.run({\n      uniforms,\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.FUNC_ADD\n      },\n      clearRenderTarget: true\n    });\n    this._updateMaxWeightValue();\n\n    this.setState({lastUpdate: Date.now()});\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n    const timeSinceLastUpdate = Date.now() - this.state.lastUpdate;\n\n    if (fromTimer) {\n      updateTimer = null;\n    }\n\n    if (timeSinceLastUpdate >= ZOOM_DEBOUNCE) {\n      // update\n      this._updateBounds(true);\n      this._updateWeightmap();\n      this._updateTextureRenderingBounds();\n    } else if (!updateTimer) {\n      updateTimer = setTimeout(\n        this._debouncedUpdateWeightmap.bind(this, true),\n        ZOOM_DEBOUNCE - timeSinceLastUpdate\n      );\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY]\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {useLayerCoordinateSystem = false, scaleToAspect = false, width, height} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n\n    let topLeftCommon;\n    let bottomRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem) {\n      topLeftCommon = this.projectPosition([minLong, maxLat, 0]);\n      bottomRightCommon = this.projectPosition([maxLong, minLat, 0]);\n    } else {\n      topLeftCommon = viewport.projectPosition([minLong, maxLat, 0]);\n      bottomRightCommon = viewport.projectPosition([maxLong, minLat, 0]);\n    }\n    // Ignore z component\n    let commonBounds = topLeftCommon.slice(0, 2).concat(bottomRightCommon.slice(0, 2));\n    if (scaleToAspect) {\n      commonBounds = scaleToAspectRatio(commonBounds, width, height);\n    }\n    if (opts.normalize) {\n      commonBounds = commonBounds.map(x => x / viewport.scale);\n    }\n    return commonBounds;\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const topLeftWorld = viewport.unprojectPosition([xMin, yMax]);\n    const bottomRightWorld = viewport.unprojectPosition([xMax, yMin]);\n\n    return topLeftWorld.slice(0, 2).concat(bottomRightWorld.slice(0, 2));\n  }\n}\n\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;\n"],"file":"heatmap-layer.js"}