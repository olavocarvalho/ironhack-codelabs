{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer.js"],"names":["getBounds","boundsContain","packVertices","scaleToAspectRatio","getTextureCoordinates","Buffer","Transform","getParameter","isWebGL2","CompositeLayer","AttributeManager","COORDINATE_SYSTEM","log","TriangleLayer","getFloatTexture","defaultColorRange","colorRangeToFlatArray","weights_vs","weights_fs","vs_max","RESOLUTION","SIZE_2K","ZOOM_DEBOUNCE","TEXTURE_PARAMETERS","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","threshold","HeatmapLayer","initializeState","gl","context","textureSize","Math","state","supported","error","id","setState","_setupAttributes","_setupResources","shouldUpdateState","changeFlags","somethingChanged","updateState","opts","props","oldProps","_getChangeFlags","viewportChanged","boundsChanged","_updateBounds","dataChanged","uniformsChanged","_updateWeightmap","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","_updateTextureRenderingBounds","zoom","viewport","renderLayers","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","updateTriggers","getSubLayerProps","data","attributes","positions","texCoords","vertexCount","maxTexture","texture","finalizeState","weightsTransform","maxWeightTransform","delete","_getAttributeManager","stats","_isDataChanged","updateTriggersChanged","all","attributeManager","getAttributeManager","add","size","accessor","weights","width","height","parameters","vs","_fs","modules","elementCount","_targetTexture","_targetTextureVarying","model","_sourceTextures","inTexture","byteLength","_updateMaxWeightValue","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","visibleWorldBounds","visibleCommonBounds","_worldToCommonBounds","newState","worldBounds","scaledCommonBounds","_commonToWorldBounds","coordinateSystem","LNGLAT","normalizedCommonBounds","scaleToAspect","normalize","commonBounds","map","scale","subData","textureBounds","p","projectPosition","colors","setImageData","length","_updateAttributes","moduleParameters","Object","assign","create","pickingActive","useLayerCoordinateSystem","uniforms","getModuleUniforms","textureWidth","update","getNumInstances","clearRenderTarget","lastUpdate","Date","now","fromTimer","updateTimer","timeSinceLastUpdate","setTimeout","bind","minLong","minLat","maxLong","maxLat","topLeftCommon","bottomRightCommon","slice","concat","xMin","yMin","xMax","yMax","topLeftWorld","unprojectPosition","bottomRightWorld","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates\n} from './heatmap-layer-utils';\nimport {Buffer, Transform, getParameter, isWebGL2} from '@luma.gl/core';\nimport {CompositeLayer, AttributeManager, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport {getFloatTexture} from '../utils/resource-utils';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst SIZE_2K = 2048;\nconst ZOOM_DEBOUNCE = 500; // milliseconds\nconst TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nconst defaultProps = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 30},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05}\n};\n\nexport default class HeatmapLayer extends CompositeLayer {\n  initializeState() {\n    const {gl} = this.context;\n    const textureSize = Math.min(SIZE_2K, getParameter(gl, gl.MAX_TEXTURE_SIZE));\n    this.state = {textureSize, supported: true};\n    if (!isWebGL2(gl)) {\n      log.error(`HeatmapLayer ${this.id} is not supported on this browser, requires WebGL2`)();\n      this.setState({supported: false});\n      return;\n    }\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.viewportChanged) {\n      changeFlags.boundsChanged = this._updateBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged || changeFlags.uniformsChanged) {\n      this._updateWeightmap();\n    } else if (changeFlags.viewportZoomChanged) {\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (changeFlags.viewportChanged) {\n      this._updateTextureRenderingBounds();\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture\n    } = this.state;\n    const {updateTriggers, intensity, threshold} = this.props;\n\n    return new TriangleLayer(\n      this.getSubLayerProps({\n        id: `${this.id}-triangle-layer`,\n        updateTriggers\n      }),\n      {\n        id: 'heatmap-triangle-layer',\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        texture: weightsTexture,\n        intensity,\n        threshold\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture\n    } = this.state;\n    /* eslint-disable no-unused-expressions */\n    weightsTransform && weightsTransform.delete();\n    weightsTexture && weightsTexture.delete();\n    maxWeightTransform && maxWeightTransform.delete();\n    maxWeightsTexture && maxWeightsTexture.delete();\n    triPositionBuffer && triPositionBuffer.delete();\n    triTexCoordBuffer && triTexCoordBuffer.delete();\n    colorTexture && colorTexture.delete();\n    /* eslint-enable no-unused-expressions */\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const {oldProps, props} = opts;\n    const changeFlags = {};\n    if (this._isDataChanged(opts)) {\n      changeFlags.dataChanged = true;\n    }\n    if (oldProps.radiusPixels !== props.radiusPixels) {\n      changeFlags.uniformsChanged = true;\n    }\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _isDataChanged({changeFlags}) {\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (\n      changeFlags.updateTriggersChanged &&\n      (changeFlags.updateTriggersChanged.all ||\n        changeFlags.updateTriggersChanged.getPosition ||\n        changeFlags.updateTriggersChanged.getWeight)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    const {textureSize} = this.state;\n    const weightsTexture = getFloatTexture(gl, {\n      width: textureSize,\n      height: textureSize,\n      parameters: TEXTURE_PARAMETERS\n    });\n    const maxWeightsTexture = getFloatTexture(gl); // 1 X 1 texture\n    const weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      vs: weights_vs,\n      _fs: weights_fs,\n      modules: ['project32'],\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture'\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      weightsTransform,\n      model: weightsTransform.model,\n      maxWeightTransform: new Transform(gl, {\n        id: `${this.id}-max-weights-transform`,\n        _sourceTextures: {\n          inTexture: weightsTexture\n        },\n        _targetTexture: maxWeightsTexture,\n        _targetTextureVarying: 'outTexture',\n        vs: vs_max,\n        elementCount: textureSize * textureSize\n      }),\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate = false) {\n    const {textureSize} = this.state;\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ];\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n    // #2 : convert world bounds to common (Flat) bounds\n    const visibleCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n    const newState = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #3: extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = scaleToAspectRatio(\n        visibleCommonBounds,\n        textureSize * RESOLUTION,\n        textureSize * RESOLUTION\n      );\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds, {\n        scaleToAspect: true,\n        normalize: true,\n        width: textureSize * RESOLUTION,\n        height: textureSize * RESOLUTION\n      });\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n\n    const {viewport} = this.context;\n    const commonBounds = normalizedCommonBounds.map(x => x * viewport.scale);\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), commonBounds)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, true);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = getFloatTexture(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        parameters: TEXTURE_PARAMETERS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels} = this.props;\n    const {weightsTransform, worldBounds, textureSize} = this.state;\n\n    // base Layer class doesn't update attributes for composite layers, hence manually trigger it.\n    this._updateAttributes(this.props);\n\n    const moduleParameters = Object.assign(Object.create(this.props), {\n      viewport: this.context.viewport,\n      pickingActive: 0\n    });\n\n    // #5: convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true,\n      scaleToAspect: true,\n      width: textureSize * RESOLUTION,\n      height: textureSize * RESOLUTION\n    });\n\n    const uniforms = Object.assign({}, weightsTransform.model.getModuleUniforms(moduleParameters), {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize\n    });\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    weightsTransform.run({\n      uniforms,\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.FUNC_ADD\n      },\n      clearRenderTarget: true\n    });\n    this._updateMaxWeightValue();\n\n    this.setState({lastUpdate: Date.now()});\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n    const timeSinceLastUpdate = Date.now() - this.state.lastUpdate;\n\n    if (fromTimer) {\n      updateTimer = null;\n    }\n\n    if (timeSinceLastUpdate >= ZOOM_DEBOUNCE) {\n      // update\n      this._updateBounds(true);\n      this._updateWeightmap();\n      this._updateTextureRenderingBounds();\n    } else if (!updateTimer) {\n      updateTimer = setTimeout(\n        this._debouncedUpdateWeightmap.bind(this, true),\n        ZOOM_DEBOUNCE - timeSinceLastUpdate\n      );\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY]\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {useLayerCoordinateSystem = false, scaleToAspect = false, width, height} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n\n    let topLeftCommon;\n    let bottomRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem) {\n      topLeftCommon = this.projectPosition([minLong, maxLat, 0]);\n      bottomRightCommon = this.projectPosition([maxLong, minLat, 0]);\n    } else {\n      topLeftCommon = viewport.projectPosition([minLong, maxLat, 0]);\n      bottomRightCommon = viewport.projectPosition([maxLong, minLat, 0]);\n    }\n    // Ignore z component\n    let commonBounds = topLeftCommon.slice(0, 2).concat(bottomRightCommon.slice(0, 2));\n    if (scaleToAspect) {\n      commonBounds = scaleToAspectRatio(commonBounds, width, height);\n    }\n    if (opts.normalize) {\n      commonBounds = commonBounds.map(x => x / viewport.scale);\n    }\n    return commonBounds;\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const topLeftWorld = viewport.unprojectPosition([xMin, yMax]);\n    const bottomRightWorld = viewport.unprojectPosition([xMax, yMin]);\n\n    return topLeftWorld.slice(0, 2).concat(bottomRightWorld.slice(0, 2));\n  }\n}\n\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;\n"],"file":"heatmap-layer.js"}