{"version":3,"sources":["../../../src/utils/math-utils.js"],"names":["Vector3","createMat4","extractCameraVectors","viewMatrix","viewMatrixInverse","eye","direction","up","right","cameraPosition","cameraDirection","cameraUp","cameraRight","nearCenter","farCenter","a","getFrustumPlanes","aspect","near","far","fovyRadians","position","copy","nearFarScale","len","normalize","nearHeight","Math","tan","nearWidth","scale","add","normal","clone","negate","distance","dot","planes","subtract","cross","left","top","bottom","fp64LowPart","x","fround"],"mappings":"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","sourcesContent":["// Extensions to math.gl library. Intended to be folded back.\n\nimport {Vector3} from 'math.gl';\n\n// Helper, avoids low-precision 32 bit matrices from gl-matrix mat4.create()\nexport function createMat4() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\n// Extract camera vectors (move to math library?)\nexport function extractCameraVectors({viewMatrix, viewMatrixInverse}) {\n  // Read the translation from the inverse view matrix\n  return {\n    eye: [viewMatrixInverse[12], viewMatrixInverse[13], viewMatrixInverse[14]],\n    direction: [-viewMatrix[2], -viewMatrix[6], -viewMatrix[10]],\n    up: [viewMatrix[1], viewMatrix[5], viewMatrix[9]],\n    right: [viewMatrix[0], viewMatrix[4], viewMatrix[8]]\n  };\n}\n\nconst cameraPosition = new Vector3();\nconst cameraDirection = new Vector3();\nconst cameraUp = new Vector3();\nconst cameraRight = new Vector3();\nconst nearCenter = new Vector3();\nconst farCenter = new Vector3();\nconst a = new Vector3();\n\n/* eslint-disable max-statements */\n\n// Extract frustum planes in common space.\n// Note that common space is left-handed\n// (with y pointing down)\nexport function getFrustumPlanes({aspect, near, far, fovyRadians, position, direction, up, right}) {\n  cameraDirection.copy(direction);\n\n  // Account for any scaling of the z axis (e.g. in\n  // mercator view matrix)\n  const nearFarScale = 1 / cameraDirection.len();\n  cameraDirection.normalize();\n\n  cameraPosition.copy(position);\n  cameraUp.copy(up).normalize();\n  cameraRight.copy(right).normalize();\n\n  const nearHeight = 2 * Math.tan(fovyRadians / 2) * near;\n  const nearWidth = nearHeight * aspect;\n\n  nearCenter\n    .copy(cameraDirection)\n    .scale(near * nearFarScale)\n    .add(cameraPosition);\n  farCenter\n    .copy(cameraDirection)\n    .scale(far * nearFarScale)\n    .add(cameraPosition);\n\n  let normal = cameraDirection.clone().negate();\n  let distance = normal.dot(nearCenter);\n\n  const planes = {\n    near: {\n      distance,\n      normal\n    },\n    far: {\n      distance: cameraDirection.dot(farCenter),\n      normal: cameraDirection.clone()\n    }\n  };\n\n  a.copy(cameraRight)\n    .scale(nearWidth * 0.5)\n    .add(nearCenter)\n    .subtract(cameraPosition)\n    .normalize();\n  normal = new Vector3(cameraUp).cross(a);\n  distance = cameraPosition.dot(normal);\n  planes.right = {normal, distance};\n\n  a.copy(cameraRight)\n    .scale(-nearWidth * 0.5)\n    .add(nearCenter)\n    .subtract(cameraPosition)\n    .normalize();\n  normal = new Vector3(a).cross(cameraUp);\n  distance = cameraPosition.dot(normal);\n  planes.left = {normal, distance};\n\n  a.copy(cameraUp)\n    .scale(nearHeight * 0.5)\n    .add(nearCenter)\n    .subtract(cameraPosition)\n    .normalize();\n  normal = new Vector3(a).cross(cameraRight);\n  distance = cameraPosition.dot(normal);\n  planes.top = {normal, distance};\n\n  a.copy(cameraUp)\n    .scale(-nearHeight * 0.5)\n    .add(nearCenter)\n    .subtract(cameraPosition)\n    .normalize();\n  normal = new Vector3(cameraRight).cross(a);\n  distance = cameraPosition.dot(normal);\n  planes.bottom = {normal, distance};\n\n  return planes;\n}\n\n/**\n * Calculate the low part of a WebGL 64 bit float\n * @param a {number} - the input float number\n * @returns {number} - the lower 32 bit of the number\n */\nexport function fp64LowPart(x) {\n  return x - Math.fround(x);\n}\n"],"file":"math-utils.js"}