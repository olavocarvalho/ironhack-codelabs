{"version":3,"sources":["../../../src/utils/tesselator.js"],"names":["createIterable","defaultTypedArrayManager","Tesselator","constructor","opts","attributes","typedArrayManager","indexLayout","bufferLayout","vertexCount","instanceCount","_attributeDefs","updateGeometry","Object","seal","data","getGeometry","positionFormat","fp64","dataChanged","positionSize","Array","isArray","dataRange","_rebuildGeometry","updatePartialGeometry","startRow","endRow","updateGeometryAttributes","geometry","startIndex","size","Error","getGeometrySize","_forEachGeometry","visitor","iterable","objectInfo","object","index","Infinity","dataIndex","count","name","def","copy","Boolean","fp64Only","allocate","context","vertexStart","indexStart","i","geometrySize","geometryIndex","length"],"mappings":"AAmBA,SAAQA,cAAR,QAA6B,kBAA7B;AACA,OAAOC,wBAAP,MAAqC,uBAArC;AAEA,eAAe,MAAMC,UAAN,CAAiB;AAC9BC,EAAAA,WAAW,GAAY;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AAAA,6BACKA,IADL,CACdC,UADc;AAAA,UACdA,UADc,iCACD,EADC;AAGrB,SAAKC,iBAAL,GAAyBL,wBAAzB;AACA,SAAKM,WAAL,GAAmB,IAAnB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAKL,UAAL,GAAkB,EAAlB;AACA,SAAKM,cAAL,GAAsBN,UAAtB;AAEA,SAAKO,cAAL,CAAoBR,IAApB;AAEAS,IAAAA,MAAM,CAACC,IAAP,CAAY,IAAZ;AACD;;AAGDF,EAAAA,cAAc,OAAyD;AAAA,QAAvDG,IAAuD,QAAvDA,IAAuD;AAAA,QAAjDC,WAAiD,QAAjDA,WAAiD;AAAA,QAApCC,cAAoC,QAApCA,cAAoC;AAAA,QAApBC,IAAoB,QAApBA,IAAoB;AAAA,QAAdC,WAAc,QAAdA,WAAc;AACrE,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKE,IAAL,GAAYA,IAAZ;AACA,SAAKE,YAAL,GAAoBH,cAAc,KAAK,IAAnB,GAA0B,CAA1B,GAA8B,CAAlD;;AACA,QAAII,KAAK,CAACC,OAAN,CAAcH,WAAd,CAAJ,EAAgC;AAE9B,WAAK,MAAMI,SAAX,IAAwBJ,WAAxB,EAAqC;AACnC,aAAKK,gBAAL,CAAsBD,SAAtB;AACD;AACF,KALD,MAKO;AACL,WAAKC,gBAAL;AACD;AACF;;AAEDC,EAAAA,qBAAqB,QAAqB;AAAA,QAAnBC,QAAmB,SAAnBA,QAAmB;AAAA,QAATC,MAAS,SAATA,MAAS;;AACxC,SAAKH,gBAAL,CAAsB;AAACE,MAAAA,QAAD;AAAWC,MAAAA;AAAX,KAAtB;AACD;;AAKDC,EAAAA,wBAAwB,CAACC,QAAD,EAAWC,UAAX,EAAuBC,IAAvB,EAA6B;AACnD,UAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAGDC,EAAAA,eAAe,CAACJ,QAAD,EAAW;AACxB,UAAM,IAAIG,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAQDE,EAAAA,gBAAgB,CAACC,OAAD,EAAUT,QAAV,EAAoBC,MAApB,EAA4B;AAAA,UACnCZ,IADmC,GACd,IADc,CACnCA,IADmC;AAAA,UAC7BC,WAD6B,GACd,IADc,CAC7BA,WAD6B;;AAAA,4BAEXhB,cAAc,CAACe,IAAD,EAAOW,QAAP,EAAiBC,MAAjB,CAFH;AAAA,UAEnCS,QAFmC,mBAEnCA,QAFmC;AAAA,UAEzBC,UAFyB,mBAEzBA,UAFyB;;AAG1C,SAAK,MAAMC,MAAX,IAAqBF,QAArB,EAA+B;AAC7BC,MAAAA,UAAU,CAACE,KAAX;AACA,YAAMV,QAAQ,GAAGb,WAAW,CAACsB,MAAD,EAASD,UAAT,CAA5B;AACAF,MAAAA,OAAO,CAACN,QAAD,EAAWQ,UAAU,CAACE,KAAtB,CAAP;AACD;AACF;;AAGDf,EAAAA,gBAAgB,CAACD,SAAD,EAAY;AAC1B,QAAI,CAAC,KAAKR,IAAN,IAAc,CAAC,KAAKC,WAAxB,EAAqC;AACnC;AACD;;AAHyB,QAKrBT,WALqB,GAKQ,IALR,CAKrBA,WALqB;AAAA,QAKRC,YALQ,GAKQ,IALR,CAKRA,YALQ;;AAO1B,QAAI,CAACe,SAAL,EAAgB;AAEdhB,MAAAA,WAAW,GAAG,EAAd;AACAC,MAAAA,YAAY,GAAG,EAAf;AACD;;AAXyB,kBAagBe,SAAS,IAAI,EAb7B;AAAA,iCAanBG,QAbmB;AAAA,UAanBA,QAbmB,+BAaR,CAbQ;AAAA,+BAaLC,MAbK;AAAA,UAaLA,MAbK,6BAaIa,QAbJ;;AAc1B,SAAKN,gBAAL,CACE,CAACL,QAAD,EAAWY,SAAX,KAAyB;AACvBjC,MAAAA,YAAY,CAACiC,SAAD,CAAZ,GAA0B,KAAKR,eAAL,CAAqBJ,QAArB,CAA1B;AACD,KAHH,EAIEH,QAJF,EAKEC,MALF;;AASA,QAAIjB,aAAa,GAAG,CAApB;;AACA,SAAK,MAAMgC,KAAX,IAAoBlC,YAApB,EAAkC;AAChCE,MAAAA,aAAa,IAAIgC,KAAjB;AACD;;AA1ByB,UA6BnBrC,UA7BmB,GA6BoC,IA7BpC,CA6BnBA,UA7BmB;AAAA,UA6BPM,cA7BO,GA6BoC,IA7BpC,CA6BPA,cA7BO;AAAA,UA6BSL,iBA7BT,GA6BoC,IA7BpC,CA6BSA,iBA7BT;AAAA,UA6B4BY,IA7B5B,GA6BoC,IA7BpC,CA6B4BA,IA7B5B;;AA8B1B,SAAK,MAAMyB,IAAX,IAAmBhC,cAAnB,EAAmC;AACjC,YAAMiC,GAAG,GAAGjC,cAAc,CAACgC,IAAD,CAA1B;AAIAC,MAAAA,GAAG,CAACC,IAAJ,GAAWC,OAAO,CAACvB,SAAD,CAAlB;;AAGA,UAAI,CAACqB,GAAG,CAACG,QAAL,IAAiB7B,IAArB,EAA2B;AACzBb,QAAAA,UAAU,CAACsC,IAAD,CAAV,GAAmBrC,iBAAiB,CAAC0C,QAAlB,CAA2B3C,UAAU,CAACsC,IAAD,CAArC,EAA6CjC,aAA7C,EAA4DkC,GAA5D,CAAnB;AACD;AACF;;AAED,SAAKrC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKE,aAAL,GAAqBA,aAArB;AAEA,UAAMuC,OAAO,GAAG;AACdC,MAAAA,WAAW,EAAE,CADC;AAEdC,MAAAA,UAAU,EAAE;AAFE,KAAhB;;AAIA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1B,QAApB,EAA8B0B,CAAC,EAA/B,EAAmC;AACjCH,MAAAA,OAAO,CAACC,WAAR,IAAuB1C,YAAY,CAAC4C,CAAD,CAAnC;AACAH,MAAAA,OAAO,CAACE,UAAR,IAAsB5C,WAAW,CAAC6C,CAAD,CAAX,IAAkB,CAAxC;AACD;;AAED,SAAKlB,gBAAL,CACE,CAACL,QAAD,EAAWY,SAAX,KAAyB;AACvB,YAAMY,YAAY,GAAG7C,YAAY,CAACiC,SAAD,CAAjC;AACAQ,MAAAA,OAAO,CAACK,aAAR,GAAwBb,SAAxB;AACAQ,MAAAA,OAAO,CAACI,YAAR,GAAuBA,YAAvB;AACA,WAAKzB,wBAAL,CAA8BC,QAA9B,EAAwCoB,OAAxC;AACAA,MAAAA,OAAO,CAACC,WAAR,IAAuBG,YAAvB;AACAJ,MAAAA,OAAO,CAACE,UAAR,IAAsB5C,WAAW,CAACkC,SAAD,CAAX,IAA0B,CAAhD;AACD,KARH,EASEf,QATF,EAUEC,MAVF;;AAcA,QAAIlB,WAAW,GAAGwC,OAAO,CAACE,UAA1B;;AACA,SAAK,IAAIC,CAAC,GAAGzB,MAAb,EAAqByB,CAAC,GAAG7C,WAAW,CAACgD,MAArC,EAA6CH,CAAC,EAA9C,EAAkD;AAChD3C,MAAAA,WAAW,IAAIF,WAAW,CAAC6C,CAAD,CAA1B;AACD;;AACD,SAAK3C,WAAL,GAAmBA,WAAnB;AACD;;AA7I6B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {createIterable} from './iterable-utils';\nimport defaultTypedArrayManager from './typed-array-manager';\n\nexport default class Tesselator {\n  constructor(opts = {}) {\n    const {attributes = {}} = opts;\n\n    this.typedArrayManager = defaultTypedArrayManager;\n    this.indexLayout = null;\n    this.bufferLayout = null;\n    this.vertexCount = 0;\n    this.instanceCount = 0;\n    this.attributes = {};\n    this._attributeDefs = attributes;\n\n    this.updateGeometry(opts);\n\n    Object.seal(this);\n  }\n\n  /* Public methods */\n  updateGeometry({data, getGeometry, positionFormat, fp64, dataChanged}) {\n    this.data = data;\n    this.getGeometry = getGeometry;\n    this.fp64 = fp64;\n    this.positionSize = positionFormat === 'XY' ? 2 : 3;\n    if (Array.isArray(dataChanged)) {\n      // is partial update\n      for (const dataRange of dataChanged) {\n        this._rebuildGeometry(dataRange);\n      }\n    } else {\n      this._rebuildGeometry();\n    }\n  }\n\n  updatePartialGeometry({startRow, endRow}) {\n    this._rebuildGeometry({startRow, endRow});\n  }\n\n  /* Subclass interface */\n\n  // Update the positions of a single geometry\n  updateGeometryAttributes(geometry, startIndex, size) {\n    throw new Error('Not implemented');\n  }\n\n  // Returns the number of vertices in a geometry\n  getGeometrySize(geometry) {\n    throw new Error('Not implemented');\n  }\n\n  /* Private utility methods */\n\n  /**\n   * Visit all objects\n   * `data` is expected to be an iterable consistent with the base Layer expectation\n   */\n  _forEachGeometry(visitor, startRow, endRow) {\n    const {data, getGeometry} = this;\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const geometry = getGeometry(object, objectInfo);\n      visitor(geometry, objectInfo.index);\n    }\n  }\n\n  /* eslint-disable complexity,max-statements */\n  _rebuildGeometry(dataRange) {\n    if (!this.data || !this.getGeometry) {\n      return;\n    }\n\n    let {indexLayout, bufferLayout} = this;\n\n    if (!dataRange) {\n      // Full update - regenerate buffer layout from scratch\n      indexLayout = [];\n      bufferLayout = [];\n    }\n\n    const {startRow = 0, endRow = Infinity} = dataRange || {};\n    this._forEachGeometry(\n      (geometry, dataIndex) => {\n        bufferLayout[dataIndex] = this.getGeometrySize(geometry);\n      },\n      startRow,\n      endRow\n    );\n\n    // count instances\n    let instanceCount = 0;\n    for (const count of bufferLayout) {\n      instanceCount += count;\n    }\n\n    // allocate attributes\n    const {attributes, _attributeDefs, typedArrayManager, fp64} = this;\n    for (const name in _attributeDefs) {\n      const def = _attributeDefs[name];\n      // If dataRange is supplied, this is a partial update.\n      // In case we need to reallocate the typed array, it will need the old values copied\n      // before performing partial update.\n      def.copy = Boolean(dataRange);\n\n      // do not create fp64-only attributes unless in fp64 mode\n      if (!def.fp64Only || fp64) {\n        attributes[name] = typedArrayManager.allocate(attributes[name], instanceCount, def);\n      }\n    }\n\n    this.indexLayout = indexLayout;\n    this.bufferLayout = bufferLayout;\n    this.instanceCount = instanceCount;\n\n    const context = {\n      vertexStart: 0,\n      indexStart: 0\n    };\n    for (let i = 0; i < startRow; i++) {\n      context.vertexStart += bufferLayout[i];\n      context.indexStart += indexLayout[i] || 0;\n    }\n\n    this._forEachGeometry(\n      (geometry, dataIndex) => {\n        const geometrySize = bufferLayout[dataIndex];\n        context.geometryIndex = dataIndex;\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(geometry, context);\n        context.vertexStart += geometrySize;\n        context.indexStart += indexLayout[dataIndex] || 0;\n      },\n      startRow,\n      endRow\n    );\n\n    // count vertices\n    let vertexCount = context.indexStart;\n    for (let i = endRow; i < indexLayout.length; i++) {\n      vertexCount += indexLayout[i];\n    }\n    this.vertexCount = vertexCount;\n  }\n}\n"],"file":"tesselator.js"}