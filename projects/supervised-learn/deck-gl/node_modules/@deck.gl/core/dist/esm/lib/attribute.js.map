{"version":3,"sources":["../../../src/lib/attribute.js"],"names":["Buffer","assert","createIterable","fillArray","range","log","BaseAttribute","typedArrayManager","DEFAULT_STATE","isExternalBuffer","lastExternalBuffer","allocatedValue","needsUpdate","needsRedraw","updateRanges","FULL","Attribute","gl","opts","transition","noAlloc","update","accessor","bufferLayout","defaultValue","Array","isArray","shaderAttributes","hasShaderAttributes","shaderAttributeName","shaderAttribute","Object","assign","offset","stride","normalized","id","constant","isIndexed","elements","size","value","divisor","instanced","buffer","getBuffer","userData","_standardAccessor","seal","_validateAttributeUpdaters","release","clearChangedFlags","concat","settings","find","a","Number","isFinite","duration","reason","dataRange","startRow","endRow","Infinity","add","EMPTY","numInstances","state","allocCount","Math","max","ArrayType","glArrayFromType","type","oldValue","shouldCopy","allocate","padding","elementOffset","copy","byteLength","reallocate","subData","data","props","context","updated","call","startOffset","_getVertexOffset","endOffset","length","subarray","BYTES_PER_ELEMENT","_checkAttributeArray","_updateShaderAttributes","clearNeedsUpdate","undefined","_normalizeValue","hasChanged","_areValuesEqual","ArrayBuffer","isView","warn","name","row","index","geometrySize","out","start","value1","value2","i","attribute","accessorFunc","iterable","objectInfo","object","objectValue","target","numVertices","source","count","hasUpdater","Error","valid","layout","glType","clamped","Float32Array","Uint16Array","Uint32Array","Uint8ClampedArray","Uint8Array","Int8Array","Int16Array","Int32Array"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {Buffer} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport {createIterable} from '../utils/iterable-utils';\nimport {fillArray} from '../utils/flatten';\nimport * as range from '../utils/range';\nimport log from '../utils/log';\nimport BaseAttribute from './base-attribute';\nimport typedArrayManager from '../utils/typed-array-manager';\n\nconst DEFAULT_STATE = {\n  isExternalBuffer: false,\n  lastExternalBuffer: null,\n  allocatedValue: null,\n  needsUpdate: true,\n  needsRedraw: false,\n  updateRanges: range.FULL\n};\n\nexport default class Attribute extends BaseAttribute {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null,\n      bufferLayout = null\n    } = opts;\n\n    let {defaultValue = [0, 0, 0, 0]} = opts;\n    defaultValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n\n    this.shaderAttributes = {};\n    this.hasShaderAttributes = false;\n\n    if (opts.shaderAttributes) {\n      const shaderAttributes = opts.shaderAttributes;\n      for (const shaderAttributeName in shaderAttributes) {\n        const shaderAttribute = shaderAttributes[shaderAttributeName];\n\n        // Initialize the attribute descriptor, with WebGL and metadata fields\n        this.shaderAttributes[shaderAttributeName] = new Attribute(\n          this.gl,\n          Object.assign(\n            {\n              offset: this.offset,\n              stride: this.stride,\n              normalized: this.normalized\n            },\n            shaderAttribute,\n            {\n              id: shaderAttributeName,\n              // Luma fields\n              constant: shaderAttribute.constant || false,\n              isIndexed: shaderAttribute.isIndexed || shaderAttribute.elements,\n              size: (shaderAttribute.elements && 1) || shaderAttribute.size || this.size,\n              value: shaderAttribute.value || null,\n              divisor: shaderAttribute.instanced || shaderAttribute.divisor || this.divisor,\n              buffer: this.getBuffer(),\n              noAlloc: true\n            }\n          )\n        );\n\n        this.hasShaderAttributes = true;\n      }\n    }\n\n    Object.assign(this.userData, DEFAULT_STATE, opts, {\n      transition,\n      noAlloc,\n      update: update || (accessor && this._standardAccessor),\n      accessor,\n      defaultValue,\n      bufferLayout\n    });\n\n    Object.seal(this.userData);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get bufferLayout() {\n    return this.userData.bufferLayout;\n  }\n\n  set bufferLayout(layout) {\n    this.userData.bufferLayout = layout;\n  }\n\n  delete() {\n    super.delete();\n    typedArrayManager.release(this.userData.allocatedValue);\n  }\n\n  needsUpdate() {\n    return this.userData.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.userData.needsRedraw;\n    this.userData.needsRedraw = this.userData.needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.userData;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat((typeof accessor !== 'function' && accessor) || []);\n  }\n\n  getAccessor() {\n    return this.userData.accessor;\n  }\n\n  getShaderAttributes() {\n    const shaderAttributes = {};\n    if (this.hasShaderAttributes) {\n      Object.assign(shaderAttributes, this.shaderAttributes);\n    } else {\n      shaderAttributes[this.id] = this;\n    }\n\n    return shaderAttributes;\n  }\n\n  supportsTransition() {\n    return this.userData.transition;\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts) {\n    const {transition, accessor} = this.userData;\n    if (!transition) {\n      return null;\n    }\n    let settings = Array.isArray(accessor) ? opts[accessor.find(a => opts[a])] : opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    if (Number.isFinite(settings)) {\n      settings = {duration: settings};\n    }\n\n    if (settings && settings.duration > 0) {\n      return Object.assign({}, transition, settings);\n    }\n\n    return null;\n  }\n\n  setNeedsUpdate(reason = this.id, dataRange) {\n    this.userData.needsUpdate = this.userData.needsUpdate || reason;\n    if (dataRange) {\n      const {startRow = 0, endRow = Infinity} = dataRange;\n      this.userData.updateRanges = range.add(this.userData.updateRanges, [startRow, endRow]);\n    } else {\n      this.userData.updateRanges = range.FULL;\n    }\n  }\n\n  clearNeedsUpdate() {\n    this.userData.needsUpdate = false;\n    this.userData.updateRanges = range.EMPTY;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.userData.needsRedraw = this.userData.needsRedraw || reason;\n  }\n\n  allocate(numInstances) {\n    const state = this.userData;\n\n    if (state.isExternalBuffer || state.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    if (state.update) {\n      assert(Number.isFinite(numInstances));\n      // Allocate at least one element to ensure a valid buffer\n      const allocCount = Math.max(numInstances, 1);\n      const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n      const oldValue = state.allocatedValue;\n      const shouldCopy = state.updateRanges !== range.FULL;\n\n      this.constant = false;\n      this.value = typedArrayManager.allocate(oldValue, allocCount, {\n        size: this.size,\n        type: ArrayType,\n        padding: this.elementOffset,\n        copy: shouldCopy\n      });\n\n      if (this.buffer && this.buffer.byteLength < this.value.byteLength) {\n        this.buffer.reallocate(this.value.byteLength);\n\n        if (shouldCopy && oldValue) {\n          // Upload the full existing attribute value to the GPU, so that updateBuffer\n          // can choose to only update a partial range.\n          // TODO - copy old buffer to new buffer on the GPU\n          this.buffer.subData(oldValue);\n        }\n      }\n\n      state.allocatedValue = this.value;\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, bufferLayout, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const state = this.userData;\n\n    const {update, updateRanges, noAlloc} = state;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      for (const [startRow, endRow] of updateRanges) {\n        update.call(context, this, {data, startRow, endRow, props, numInstances, bufferLayout});\n      }\n      if (this.constant || !this.buffer || this.buffer.byteLength < this.value.byteLength) {\n        // call base clas `update` method to upload value to GPU\n        this.update({\n          value: this.value,\n          constant: this.constant\n        });\n      } else {\n        for (const [startRow, endRow] of updateRanges) {\n          const startOffset = Number.isFinite(startRow)\n            ? this._getVertexOffset(startRow, this.bufferLayout)\n            : 0;\n          const endOffset = Number.isFinite(endRow)\n            ? this._getVertexOffset(endRow, this.bufferLayout)\n            : noAlloc || !Number.isFinite(numInstances)\n              ? this.value.length\n              : numInstances * this.size;\n\n          // Only update the changed part of the attribute\n          this.buffer.subData({\n            data: this.value.subarray(startOffset, endOffset),\n            offset: startOffset * this.value.BYTES_PER_ELEMENT\n          });\n        }\n      }\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this._updateShaderAttributes();\n\n    this.clearNeedsUpdate();\n    state.needsRedraw = true;\n\n    return updated;\n  }\n\n  update(props) {\n    super.update(props);\n    this._updateShaderAttributes();\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setGenericValue(value) {\n    const state = this.userData;\n\n    if (value === undefined || typeof value === 'function') {\n      // ignore if this attribute has no accessor\n      // ignore if accessor is function, will be used in updateBuffer\n      state.isExternalBuffer = false;\n      return false;\n    }\n\n    value = this._normalizeValue(value);\n    const hasChanged = !this.constant || !this._areValuesEqual(value, this.value);\n\n    if (hasChanged) {\n      this.update({constant: true, value});\n    }\n    state.needsRedraw = state.needsUpdate || hasChanged;\n    this.clearNeedsUpdate();\n    state.isExternalBuffer = true;\n    this._updateShaderAttributes();\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  setExternalBuffer(buffer) {\n    const state = this.userData;\n\n    if (!buffer) {\n      state.isExternalBuffer = false;\n      state.lastExternalBuffer = null;\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n\n    if (state.lastExternalBuffer === buffer) {\n      return true;\n    }\n    state.isExternalBuffer = true;\n    state.lastExternalBuffer = buffer;\n\n    let opts;\n    if (ArrayBuffer.isView(buffer)) {\n      opts = {constant: false, value: buffer};\n    } else if (buffer instanceof Buffer) {\n      opts = {constant: false, buffer};\n    } else {\n      opts = Object.assign({constant: false}, buffer);\n    }\n\n    if (opts.value) {\n      const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n      if (!(opts.value instanceof ArrayType)) {\n        log.warn(`Attribute prop ${this.id} is casted to ${ArrayType.name}`)();\n        // Cast to proper type\n        opts.value = new ArrayType(opts.value);\n      }\n    }\n\n    this.update(opts);\n    state.needsRedraw = true;\n\n    this._updateShaderAttributes();\n    return true;\n  }\n\n  // PRIVATE HELPER METHODS\n  _getVertexOffset(row, bufferLayout) {\n    let offset = this.elementOffset;\n    if (bufferLayout) {\n      let index = 0;\n      for (const geometrySize of bufferLayout) {\n        if (index >= row) {\n          break;\n        }\n        offset += geometrySize * this.size;\n        index++;\n      }\n      return offset;\n    }\n    return offset + row * this.size;\n  }\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, out = [], start = 0) {\n    const {defaultValue} = this.userData;\n\n    if (!Array.isArray(value) && !ArrayBuffer.isView(value)) {\n      out[start] = Number.isFinite(value) ? value : defaultValue[0];\n      return out;\n    }\n\n    /* eslint-disable no-fallthrough, default-case */\n    switch (this.size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2, size = this.size) {\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _standardAccessor(attribute, {data, startRow, endRow, props, numInstances, bufferLayout}) {\n    const state = attribute.userData;\n\n    const {accessor} = state;\n    const {value, size} = attribute;\n    const accessorFunc = typeof accessor === 'function' ? accessor : props[accessor];\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = attribute._getVertexOffset(startRow, bufferLayout);\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n\n      const objectValue = accessorFunc(object, objectInfo);\n\n      if (bufferLayout) {\n        attribute._normalizeValue(objectValue, objectInfo.target);\n        const numVertices = bufferLayout[objectInfo.index];\n        fillArray({\n          target: attribute.value,\n          source: objectInfo.target,\n          start: i,\n          count: numVertices\n        });\n        i += numVertices * size;\n      } else {\n        attribute._normalizeValue(objectValue, value, i);\n        i += size;\n      }\n    }\n    attribute.constant = false;\n    attribute.bufferLayout = bufferLayout;\n  }\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const state = this.userData;\n\n    // Check that 'update' is a valid function\n    const hasUpdater = state.noAlloc || typeof state.update === 'function';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  _checkAttributeArray() {\n    const {value} = this;\n    if (value && value.length >= 4) {\n      const valid =\n        Number.isFinite(value[0]) &&\n        Number.isFinite(value[1]) &&\n        Number.isFinite(value[2]) &&\n        Number.isFinite(value[3]);\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n\n  _updateShaderAttributes() {\n    const shaderAttributes = this.shaderAttributes;\n    for (const shaderAttributeName in shaderAttributes) {\n      const shaderAttribute = shaderAttributes[shaderAttributeName];\n      shaderAttribute.update({\n        buffer: this.getBuffer(),\n        value: this.value,\n        constant: this.constant\n      });\n    }\n  }\n}\n\n/* eslint-disable complexity */\nexport function glArrayFromType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce type from array');\n  }\n}\n/* eslint-enable complexity */\n"],"file":"attribute.js"}