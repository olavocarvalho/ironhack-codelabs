{"version":3,"sources":["../../../src/solid-polygon-layer/polygon-tesselator.js"],"names":["Polygon","experimental","fp64LowPart","Tesselator","PolygonTesselator","constructor","data","getGeometry","fp64","positionFormat","IndexType","Uint32Array","attributes","positions","size","positions64xyLow","fp64Only","vertexValid","type","Uint8ClampedArray","indices","get","attributeName","subarray","vertexCount","getGeometrySize","polygon","getVertexCount","positionSize","updateGeometryAttributes","context","normalize","geometrySize","_updateIndices","_updatePositions","geometryIndex","offset","vertexStart","indexStart","indexLayout","typedArrayManager","target","i","getSurfaceIndices","allocate","length","copy","j","polygonPositions","holeIndices","x","y","z"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Handles tesselation of polygons with holes\n// - 2D surfaces\n// - 2D outlines\n// - 3D surfaces (top and sides only)\n// - 3D wireframes (not yet)\nimport * as Polygon from './polygon';\nimport {experimental, fp64LowPart} from '@deck.gl/core';\nconst {Tesselator} = experimental;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PolygonTesselator extends Tesselator {\n  constructor({data, getGeometry, fp64, positionFormat, IndexType = Uint32Array}) {\n    super({\n      data,\n      getGeometry,\n      fp64,\n      positionFormat,\n      attributes: {\n        positions: {size: 3},\n        positions64xyLow: {size: 2, fp64Only: true},\n        vertexValid: {type: Uint8ClampedArray, size: 1},\n        indices: {type: IndexType, size: 1}\n      }\n    });\n  }\n\n  /* Getters */\n  get(attributeName) {\n    if (attributeName === 'indices') {\n      return this.attributes.indices.subarray(0, this.vertexCount);\n    }\n\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  getGeometrySize(polygon) {\n    return Polygon.getVertexCount(polygon, this.positionSize);\n  }\n\n  updateGeometryAttributes(polygon, context) {\n    polygon = Polygon.normalize(polygon, this.positionSize, context.geometrySize);\n\n    this._updateIndices(polygon, context);\n    this._updatePositions(polygon, context);\n  }\n\n  // Flatten the indices array\n  _updateIndices(polygon, {geometryIndex, vertexStart: offset, indexStart}) {\n    const {attributes, indexLayout, typedArrayManager} = this;\n\n    let target = attributes.indices;\n    let i = indexStart;\n\n    // 1. get triangulated indices for the internal areas\n    const indices = Polygon.getSurfaceIndices(polygon, this.positionSize);\n\n    // make sure the buffer is large enough\n    target = typedArrayManager.allocate(target, indexStart + indices.length, {\n      copy: true\n    });\n\n    // 2. offset each index by the number of indices in previous polygons\n    for (let j = 0; j < indices.length; j++) {\n      target[i++] = indices[j] + offset;\n    }\n\n    indexLayout[geometryIndex] = indices.length;\n    attributes.indices = target;\n  }\n\n  // Flatten out all the vertices of all the sub subPolygons\n  _updatePositions(polygon, {vertexStart, geometrySize}) {\n    const {\n      attributes: {positions, positions64xyLow, vertexValid},\n      fp64,\n      positionSize\n    } = this;\n\n    let i = vertexStart;\n    const {positions: polygonPositions, holeIndices} = polygon;\n\n    for (let j = 0; j < geometrySize; j++) {\n      const x = polygonPositions[j * positionSize];\n      const y = polygonPositions[j * positionSize + 1];\n      const z = positionSize > 2 ? polygonPositions[j * positionSize + 2] : 0;\n\n      positions[i * 3] = x;\n      positions[i * 3 + 1] = y;\n      positions[i * 3 + 2] = z;\n      if (fp64) {\n        positions64xyLow[i * 2] = fp64LowPart(x);\n        positions64xyLow[i * 2 + 1] = fp64LowPart(y);\n      }\n      vertexValid[i] = 1;\n      i++;\n    }\n\n    /* We are reusing the some buffer for `nextPositions` by offseting one vertex\n     * to the left. As a result,\n     * the last vertex of each ring overlaps with the first vertex of the next ring.\n     * `vertexValid` is used to mark the end of each ring so we don't draw these\n     * segments:\n      positions      A0 A1 A2 A3 A4 B0 B1 B2 C0 ...\n      nextPositions  A1 A2 A3 A4 B0 B1 B2 C0 C1 ...\n      vertexValid    1  1  1  1  0  1  1  0  1 ...\n     */\n    if (holeIndices) {\n      for (let j = 0; j < holeIndices.length; j++) {\n        vertexValid[vertexStart + holeIndices[j] / positionSize - 1] = 0;\n      }\n    }\n    vertexValid[vertexStart + geometrySize - 1] = 0;\n  }\n}\n"],"file":"polygon-tesselator.js"}