{"version":3,"sources":["../../../src/simple-mesh-layer/simple-mesh-layer.js"],"names":["assert","condition","message","Error","getTextureFromData","gl","data","opts","Texture2D","Object","assign","validateGeometryAttributes","attributes","positions","POSITION","getGeometry","Geometry","DEFAULT_COLOR","defaultMaterial","PhongMaterial","defaultProps","mesh","value","type","async","texture","sizeScale","min","parameters","depthTest","depthFunc","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","SimpleMeshLayer","gl2","context","vs","vs3","vs1","fs","fs3","fs1","modules","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","size","accessor","instancePositions64xy","update","calculateInstancePositions64xyLow","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceModelMatrix","MATRIX_ATTRIBUTES","setState","emptyTexture","Uint8Array","width","height","oldProps","changeFlags","extensionsChanged","state","model","delete","getModel","hasNormals","Boolean","NORMAL","normals","invalidateAll","setTexture","setDrawMode","uniforms","draw","flatShade","Model","getShaders","id","geometry","isInstanced","shaderCache","setUniforms","sampler","hasTexture","image","attribute","startRow","endRow","isFP64","use64bitPositions","constant","Float32Array","i","iterable","objectInfo","object","index","Layer","layerName"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAwBA;;AAEA;;AAEA;;AAGA;;AACA;;AACA;;AACA;;AAGA,SAASA,MAAT,CAAgBC,SAAhB,EAA2BC,OAA3B,EAAoC;AAClC,MAAI,CAACD,SAAL,EAAgB;AACd,UAAM,IAAIE,KAAJ,oBAAsBD,OAAtB,EAAN;AACD;AACF;;AAMD,SAASE,kBAAT,CAA4BC,EAA5B,EAAgCC,IAAhC,EAAsCC,IAAtC,EAA4C;AAC1C,MAAID,IAAI,YAAYE,gBAApB,EAA+B;AAC7B,WAAOF,IAAP;AACD;;AACD,SAAO,IAAIE,gBAAJ,CAAcH,EAAd,EAAkBI,MAAM,CAACC,MAAP,CAAc;AAACJ,IAAAA,IAAI,EAAJA;AAAD,GAAd,EAAsBC,IAAtB,CAAlB,CAAP;AACD;;AAED,SAASI,0BAAT,CAAoCC,UAApC,EAAgD;AAC9CZ,EAAAA,MAAM,CACJY,UAAU,CAACC,SAAX,IAAwBD,UAAU,CAACE,QAD/B,EAEJ,+EAFI,CAAN;AAID;;AAMD,SAASC,WAAT,CAAqBT,IAArB,EAA2B;AACzB,MAAIA,IAAI,CAACM,UAAT,EAAqB;AACnBD,IAAAA,0BAA0B,CAACL,IAAI,CAACM,UAAN,CAA1B;;AACA,QAAIN,IAAI,YAAYU,eAApB,EAA8B;AAC5B,aAAOV,IAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAIU,eAAJ,CAAaV,IAAb,CAAP;AACD;AACF,GAPD,MAOO,IAAIA,IAAI,CAACO,SAAL,IAAkBP,IAAI,CAACQ,QAA3B,EAAqC;AAC1CH,IAAAA,0BAA0B,CAACL,IAAD,CAA1B;AACA,WAAO,IAAIU,eAAJ,CAAa;AAClBJ,MAAAA,UAAU,EAAEN;AADM,KAAb,CAAP;AAGD;;AACD,QAAMH,KAAK,CAAC,cAAD,CAAX;AACD;;AAED,IAAMc,aAAa,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAtB;AACA,IAAMC,eAAe,GAAG,IAAIC,oBAAJ,EAAxB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AAACC,IAAAA,KAAK,EAAE,IAAR;AAAcC,IAAAA,IAAI,EAAE,QAApB;AAA8BC,IAAAA,KAAK,EAAE;AAArC,GADa;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,SAAS,EAAE;AAACH,IAAAA,IAAI,EAAE,QAAP;AAAiBD,IAAAA,KAAK,EAAE,CAAxB;AAA2BK,IAAAA,GAAG,EAAE;AAAhC,GAHQ;AAKnBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,SAAS,EAAE,IADD;AAEVC,IAAAA,SAAS;AAFC,GALO;AAanBC,EAAAA,SAAS,EAAE,KAbQ;AAenBC,EAAAA,QAAQ,EAAEd,eAfS;AAgBnBe,EAAAA,WAAW,EAAE;AAACV,IAAAA,IAAI,EAAE,UAAP;AAAmBD,IAAAA,KAAK,EAAE,eAAAY,CAAC;AAAA,aAAIA,CAAC,CAACC,QAAN;AAAA;AAA3B,GAhBM;AAiBnBC,EAAAA,QAAQ,EAAE;AAACb,IAAAA,IAAI,EAAE,UAAP;AAAmBD,IAAAA,KAAK,EAAEL;AAA1B,GAjBS;AAsBnBoB,EAAAA,cAAc,EAAE;AAACd,IAAAA,IAAI,EAAE,UAAP;AAAmBD,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAA1B,GAtBG;AAuBnBgB,EAAAA,QAAQ,EAAE;AAACf,IAAAA,IAAI,EAAE,UAAP;AAAmBD,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAA1B,GAvBS;AAwBnBiB,EAAAA,cAAc,EAAE;AAAChB,IAAAA,IAAI,EAAE,UAAP;AAAmBD,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAA1B,GAxBG;AA0BnBkB,EAAAA,kBAAkB,EAAE;AAACjB,IAAAA,IAAI,EAAE,UAAP;AAAmBD,IAAAA,KAAK,EAAE;AAA1B;AA1BD,CAArB;;IA6BqBmB,e;;;;;;;;;;iCACN;AACX,UAAMC,GAAG,GAAG,qBAAS,KAAKC,OAAL,CAAatC,EAAtB,CAAZ;AACA,UAAMuC,EAAE,GAAGF,GAAG,GAAGG,+BAAH,GAASC,8BAAvB;AACA,UAAMC,EAAE,GAAGL,GAAG,GAAGM,iCAAH,GAASC,gCAAvB;AAEA,yHAAwB;AAACL,QAAAA,EAAE,EAAFA,EAAD;AAAKG,QAAAA,EAAE,EAAFA,EAAL;AAASG,QAAAA,OAAO,EAAE,CAAC,WAAD,EAAc,gBAAd,EAAgC,SAAhC;AAAlB,OAAxB;AACD;;;sCAEiB;AAChB,UAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AAEAD,MAAAA,gBAAgB,CAACE,YAAjB,CAA8B;AAC5BC,QAAAA,iBAAiB,EAAE;AACjBC,UAAAA,UAAU,EAAE,IADK;AAEjBC,UAAAA,IAAI,EAAE,CAFW;AAGjBC,UAAAA,QAAQ,EAAE;AAHO,SADS;AAM5BC,QAAAA,qBAAqB,EAAE;AACrBF,UAAAA,IAAI,EAAE,CADe;AAErBC,UAAAA,QAAQ,EAAE,aAFW;AAGrBE,UAAAA,MAAM,EAAE,KAAKC;AAHQ,SANK;AAW5BC,QAAAA,cAAc,EAAE;AACdtC,UAAAA,IAAI,MADU;AAEdgC,UAAAA,UAAU,EAAE,IAFE;AAGdC,UAAAA,IAAI,EAAE,KAAKM,KAAL,CAAWC,WAAX,CAAuBC,MAHf;AAIdC,UAAAA,UAAU,EAAE,IAJE;AAKdR,UAAAA,QAAQ,EAAE,UALI;AAMdS,UAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV;AANA,SAXY;AAmB5BC,QAAAA,mBAAmB,EAAEC;AAnBO,OAA9B;AAsBA,WAAKC,QAAL,CAAc;AAGZC,QAAAA,YAAY,EAAE,IAAI9D,gBAAJ,CAAc,KAAKmC,OAAL,CAAatC,EAA3B,EAA+B;AAC3CC,UAAAA,IAAI,EAAE,IAAIiE,UAAJ,CAAe,CAAf,CADqC;AAE3CC,UAAAA,KAAK,EAAE,CAFoC;AAG3CC,UAAAA,MAAM,EAAE;AAHmC,SAA/B;AAHF,OAAd;AASD;;;sCAE2C;AAAA,UAA/BX,KAA+B,QAA/BA,KAA+B;AAAA,UAAxBY,QAAwB,QAAxBA,QAAwB;AAAA,UAAdC,WAAc,QAAdA,WAAc;AAC1C,mHAAkB;AAACb,QAAAA,KAAK,EAALA,KAAD;AAAQY,QAAAA,QAAQ,EAARA,QAAR;AAAkBC,QAAAA,WAAW,EAAXA;AAAlB,OAAlB;;AAEA,UAAIb,KAAK,CAACzC,IAAN,KAAeqD,QAAQ,CAACrD,IAAxB,IAAgCsD,WAAW,CAACC,iBAAhD,EAAmE;AACjE,YAAI,KAAKC,KAAL,CAAWC,KAAf,EAAsB;AACpB,eAAKD,KAAL,CAAWC,KAAX,CAAiBC,MAAjB;AACD;;AACD,YAAIjB,KAAK,CAACzC,IAAV,EAAgB;AACd,eAAKgD,QAAL,CAAc;AAACS,YAAAA,KAAK,EAAE,KAAKE,QAAL,CAAclB,KAAK,CAACzC,IAApB;AAAR,WAAd;AAEA,cAAMT,UAAU,GAAGkD,KAAK,CAACzC,IAAN,CAAWT,UAAX,IAAyBkD,KAAK,CAACzC,IAAlD;AACA,eAAKgD,QAAL,CAAc;AACZY,YAAAA,UAAU,EAAEC,OAAO,CAACtE,UAAU,CAACuE,MAAX,IAAqBvE,UAAU,CAACwE,OAAjC;AADP,WAAd;AAGD;;AACD,aAAKhC,mBAAL,GAA2BiC,aAA3B;AACD;;AAED,UAAIvB,KAAK,CAACrC,OAAN,KAAkBiD,QAAQ,CAACjD,OAA/B,EAAwC;AACtC,aAAK6D,UAAL,CAAgBxB,KAAK,CAACrC,OAAtB;AACD;;AAED,UAAI,KAAKoD,KAAL,CAAWC,KAAf,EAAsB;AACpB,aAAKD,KAAL,CAAWC,KAAX,CAAiBS,WAAjB,CAA6B,KAAKzB,KAAL,CAAW/B,SAAX,QAA7B;AACD;AACF;;;oCAEe;AACd;AAEA,WAAK8C,KAAL,CAAWP,YAAX,CAAwBS,MAAxB;;AACA,UAAI,KAAKF,KAAL,CAAWpD,OAAf,EAAwB;AACtB,aAAKoD,KAAL,CAAWpD,OAAX,CAAmBsD,MAAnB;AACD;AACF;;;gCAEgB;AAAA,UAAXS,QAAW,SAAXA,QAAW;;AACf,UAAI,CAAC,KAAKX,KAAL,CAAWC,KAAhB,EAAuB;AACrB;AACD;;AAHc,UAKRpD,SALQ,GAKK,KAAKoC,KALV,CAKRpC,SALQ;AAOf,WAAKmD,KAAL,CAAWC,KAAX,CAAiBW,IAAjB,CAAsB;AACpBD,QAAAA,QAAQ,EAAE/E,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB8E,QAAlB,EAA4B;AACpC9D,UAAAA,SAAS,EAATA,SADoC;AAEpCgE,UAAAA,SAAS,EAAE,CAAC,KAAKb,KAAL,CAAWI;AAFa,SAA5B;AADU,OAAtB;AAMD;;;6BAEQ5D,I,EAAM;AACb,UAAMyD,KAAK,GAAG,IAAIa,YAAJ,CACZ,KAAKhD,OAAL,CAAatC,EADD,EAEZI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKkF,UAAL,EAAlB,EAAqC;AACnCC,QAAAA,EAAE,EAAE,KAAK/B,KAAL,CAAW+B,EADoB;AAEnCC,QAAAA,QAAQ,EAAE/E,WAAW,CAACM,IAAD,CAFc;AAGnC0E,QAAAA,WAAW,EAAE,IAHsB;AAInCC,QAAAA,WAAW,EAAE,KAAKrD,OAAL,CAAaqD;AAJS,OAArC,CAFY,CAAd;AADa,wBAWmB,KAAKnB,KAXxB;AAAA,UAWNpD,OAXM,eAWNA,OAXM;AAAA,UAWG6C,YAXH,eAWGA,YAXH;AAYbQ,MAAAA,KAAK,CAACmB,WAAN,CAAkB;AAChBC,QAAAA,OAAO,EAAEzE,OAAO,IAAI6C,YADJ;AAEhB6B,QAAAA,UAAU,EAAEjB,OAAO,CAACzD,OAAD;AAFH,OAAlB;AAKA,aAAOqD,KAAP;AACD;;;+BAEUsB,K,EAAO;AAAA,UACT/F,EADS,GACH,KAAKsC,OADF,CACTtC,EADS;AAAA,yBAEc,KAAKwE,KAFnB;AAAA,UAETP,YAFS,gBAETA,YAFS;AAAA,UAEKQ,KAFL,gBAEKA,KAFL;;AAIhB,UAAI,KAAKD,KAAL,CAAWpD,OAAf,EAAwB;AACtB,aAAKoD,KAAL,CAAWpD,OAAX,CAAmBsD,MAAnB;AACD;;AAED,UAAMtD,OAAO,GAAG2E,KAAK,GAAGhG,kBAAkB,CAACC,EAAD,EAAK+F,KAAL,CAArB,GAAmC,IAAxD;AACA,WAAK/B,QAAL,CAAc;AAAC5C,QAAAA,OAAO,EAAPA;AAAD,OAAd;;AAEA,UAAIqD,KAAJ,EAAW;AAGTA,QAAAA,KAAK,CAACmB,WAAN,CAAkB;AAChBC,UAAAA,OAAO,EAAEzE,OAAO,IAAI6C,YADJ;AAEhB6B,UAAAA,UAAU,EAAEjB,OAAO,CAACzD,OAAD;AAFH,SAAlB;AAID;AACF;;;sDAEiC4E,S,SAA+B;AAAA,UAAnBC,QAAmB,SAAnBA,QAAmB;AAAA,UAATC,MAAS,SAATA,MAAS;AAC/D,UAAMC,MAAM,GAAG,KAAKC,iBAAL,EAAf;AACAJ,MAAAA,SAAS,CAACK,QAAV,GAAqB,CAACF,MAAtB;;AAEA,UAAI,CAACA,MAAL,EAAa;AACXH,QAAAA,SAAS,CAAC/E,KAAV,GAAkB,IAAIqF,YAAJ,CAAiB,CAAjB,CAAlB;AACA;AACD;;AAP8D,wBASnC,KAAK7C,KAT8B;AAAA,UASxDxD,IATwD,eASxDA,IATwD;AAAA,UASlD2B,WATkD,eASlDA,WATkD;AAAA,UAUxDX,KAVwD,GAUzC+E,SAVyC,CAUxD/E,KAVwD;AAAA,UAUjDkC,IAViD,GAUzC6C,SAVyC,CAUjD7C,IAViD;AAW/D,UAAIoD,CAAC,GAAGN,QAAQ,GAAG9C,IAAnB;;AAX+D,4BAYhC,0BAAelD,IAAf,EAAqBgG,QAArB,EAA+BC,MAA/B,CAZgC;AAAA,UAYxDM,QAZwD,mBAYxDA,QAZwD;AAAA,UAY9CC,UAZ8C,mBAY9CA,UAZ8C;;AAAA;AAAA;AAAA;;AAAA;AAa/D,6BAAqBD,QAArB,8HAA+B;AAAA,cAApBE,MAAoB;AAC7BD,UAAAA,UAAU,CAACE,KAAX;AACA,cAAM7E,QAAQ,GAAGF,WAAW,CAAC8E,MAAD,EAASD,UAAT,CAA5B;AACAxF,UAAAA,KAAK,CAACsF,CAAC,EAAF,CAAL,GAAa,uBAAYzE,QAAQ,CAAC,CAAD,CAApB,CAAb;AACAb,UAAAA,KAAK,CAACsF,CAAC,EAAF,CAAL,GAAa,uBAAYzE,QAAQ,CAAC,CAAD,CAApB,CAAb;AACD;AAlB8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBhE;;;EA5J0C8E,W;;;AA+J7CxE,eAAe,CAACyE,SAAhB,GAA4B,iBAA5B;AACAzE,eAAe,CAACrB,YAAhB,GAA+BA,YAA/B","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, createIterable, fp64LowPart} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, PhongMaterial, isWebGL2} from '@luma.gl/core';\n\nimport {MATRIX_ATTRIBUTES} from '../utils/matrix';\n\n// NOTE(Tarek): Should eventually phase out the glsl1 versions.\nimport vs1 from './simple-mesh-layer-vertex.glsl1';\nimport fs1 from './simple-mesh-layer-fragment.glsl1';\nimport vs3 from './simple-mesh-layer-vertex.glsl';\nimport fs3 from './simple-mesh-layer-fragment.glsl';\n\n// Replacement for the external assert method to reduce bundle size\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(`deck.gl: ${message}`);\n  }\n}\n\n/*\n * Convert image data into texture\n * @returns {Texture2D} texture\n */\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, Object.assign({data}, opts));\n}\n\nfunction validateGeometryAttributes(attributes) {\n  assert(\n    attributes.positions || attributes.POSITION,\n    'SimpleMeshLayer requires \"postions\" or \"POSITION\" attribute in mesh property.'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  mesh: {value: null, type: 'object', async: true},\n  texture: null,\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // TODO - parameters should be merged, not completely overridden\n  parameters: {\n    depthTest: true,\n    depthFunc: GL.LEQUAL\n  },\n\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\nexport default class SimpleMeshLayer extends Layer {\n  getShaders() {\n    const gl2 = isWebGL2(this.context.gl);\n    const vs = gl2 ? vs3 : vs1;\n    const fs = gl2 ? fs3 : fs1;\n\n    return super.getShaders({vs, fs, modules: ['project32', 'phong-lighting', 'picking']});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instancePositions64xy: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      if (props.mesh) {\n        this.setState({model: this.getModel(props.mesh)});\n\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    this.state.emptyTexture.delete();\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {sizeScale} = this.props;\n\n    this.state.model.draw({\n      uniforms: Object.assign({}, uniforms, {\n        sizeScale,\n        flatShade: !this.state.hasNormals\n      })\n    });\n  }\n\n  getModel(mesh) {\n    const model = new Model(\n      this.context.gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(mesh),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n\n    const {texture, emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  setTexture(image) {\n    const {gl} = this.context;\n    const {emptyTexture, model} = this.state;\n\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n\n    const texture = image ? getTextureFromData(gl, image) : null;\n    this.setState({texture});\n\n    if (model) {\n      // props.mesh may not be ready at this time.\n      // The sampler will be set when `getModel` is called\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n\n  calculateInstancePositions64xyLow(attribute, {startRow, endRow}) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value, size} = attribute;\n    let i = startRow * size;\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const position = getPosition(object, objectInfo);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n}\n\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;\n"],"file":"simple-mesh-layer.js"}