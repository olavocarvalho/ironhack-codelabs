import { normalizeLoader } from './normalize-loader';
var EXT_PATTERN = /[^.]+$/;
export function autoDetectLoader(data, loaders) {
  var {
    url = ''
  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  url = url.replace(/\?.*/, '');
  var loader = null;
  loader = loader || findLoaderByUrl(loaders, url);
  loader = loader || findLoaderByExamingInitialData(loaders, data);
  return loader;
}

function findLoaderByUrl(loaders, url) {
  var match = url.match(EXT_PATTERN);
  var extension = match && match[0];
  var loader = extension && findLoaderByExtension(loaders, extension);
  return loader;
}

function findLoaderByExtension(loaders, extension) {
  extension = extension.toLowerCase();

  for (var loader of loaders) {
    normalizeLoader(loader);

    for (var loaderExtension of loader.extensions) {
      if (loaderExtension.toLowerCase() === extension) {
        return loader;
      }
    }
  }

  return null;
}

function findLoaderByExamingInitialData(loaders, data) {
  for (var loader of loaders) {
    if (typeof data === 'string') {
      if (testText(data, loader)) {
        return loader;
      }
    } else if (data instanceof ArrayBuffer) {
      if (testBinary(data, loader)) {
        return loader;
      }
    }
  }

  return null;
}

function testText(data, loader) {
  return loader.testText && loader.testText(data);
}

function testBinary(data, loader) {
  var type = Array.isArray(loader.test) ? 'array' : typeof loader.test;

  switch (type) {
    case 'function':
      return loader.test(data, loader);

    case 'string':
    case 'array':
      var byteOffset = 0;
      var tests = Array.isArray(loader.test) ? loader.test : [loader.test];
      return tests.some(test => {
        var magic = getMagicString(data, byteOffset, test.length);
        return test === magic;
      });

    default:
      return false;
  }
}

function getMagicString(arrayBuffer, byteOffset, length) {
  if (arrayBuffer.byteLength <= byteOffset + length) {
    return '';
  }

  var dataView = new DataView(arrayBuffer);
  var magic = '';

  for (var i = 0; i < length; i++) {
    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));
  }

  return magic;
}
//# sourceMappingURL=auto-detect-loader.js.map