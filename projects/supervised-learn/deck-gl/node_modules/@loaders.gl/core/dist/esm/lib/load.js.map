{"version":3,"sources":["../../../src/lib/load.js"],"names":["isFileReadable","fetchFile","isLoaderObject","mergeLoaderAndUserOptions","autoDetectLoader","parse","parseInBatches","getRegisteredLoaders","loadInBatches","url","loaders","options","response","load","Array","isArray","autoUrl","name","loader","loadAndParse","data"],"mappings":";;AAAA,SAAQA,cAAR,QAA6B,6BAA7B;AACA,SAAQC,SAAR,QAAwB,oBAAxB;AACA,SAAQC,cAAR,QAA6B,iCAA7B;AACA,SAAQC,yBAAR,QAAwC,kCAAxC;AACA,SAAQC,gBAAR,QAA+B,mCAA/B;AAEA,SAAQC,KAAR,EAAeC,cAAf,QAAoC,SAApC;AACA,SAAQC,oBAAR,QAAmC,oBAAnC;AAEA,gBAAsBC,aAAtB;AAAA;AAAA;;;8DAAO,iBAA6BC,GAA7B,EAAkCC,OAAlC,EAA2CC,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkBV,SAAS,CAACQ,GAAD,EAAME,OAAN,CAD3B;;AAAA;AACCC,YAAAA,QADD;AAAA,6CAEEN,cAAc,CAACM,QAAD,EAAWF,OAAX,EAAoBC,OAApB,EAA6BF,GAA7B,CAFhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsBI,IAAtB;AAAA;AAAA;;;qDAAO,kBAAoBJ,GAApB,EAAyBC,OAAzB,EAAkCC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAGL,gBAAI,CAACG,KAAK,CAACC,OAAN,CAAcL,OAAd,CAAD,IAA2B,CAACR,cAAc,CAACQ,OAAD,CAA9C,EAAyD;AACvDC,cAAAA,OAAO,GAAGD,OAAV;AACAA,cAAAA,OAAO,GAAG,IAAV;AACD;;AAGKM,YAAAA,OATD,GASWhB,cAAc,CAACS,GAAD,CAAd,GAAsBA,GAAG,CAACQ,IAA1B,GAAiCR,GAT5C;AAWLC,YAAAA,OAAO,GAAGA,OAAO,IAAIH,oBAAoB,EAAzC;AACMW,YAAAA,MAZD,GAYUJ,KAAK,CAACC,OAAN,CAAcL,OAAd,IAAyBN,gBAAgB,CAAC,IAAD,EAAOM,OAAP,EAAgB;AAACD,cAAAA,GAAG,EAAEO;AAAN,aAAhB,CAAzC,GAA2EN,OAZrF;AAcLC,YAAAA,OAAO,GAAGR,yBAAyB,CAACQ,OAAD,EAAUO,MAAV,CAAnC;;AAdK,kBAiBDA,MAAM,IAAIA,MAAM,CAACC,YAjBhB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAkBUD,MAAM,CAACC,YAAP,CAAoBV,GAApB,EAAyBE,OAAzB,CAlBV;;AAAA;AAAA;;AAAA;AAsBDS,YAAAA,IAtBC,GAsBMX,GAtBN;;AAAA,kBAuBDT,cAAc,CAACoB,IAAD,CAAd,IAAwB,OAAOA,IAAP,KAAgB,QAvBvC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAwBUnB,SAAS,CAACQ,GAAD,EAAME,OAAN,CAxBnB;;AAAA;AAwBHS,YAAAA,IAxBG;;AAAA;AAAA,8CA0BEf,KAAK,CAACe,IAAD,EAAOV,OAAP,EAAgBC,OAAhB,EAAyBK,OAAzB,CA1BP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {isFileReadable} from '../javascript-utils/is-type';\nimport {fetchFile} from './fetch/fetch-file';\nimport {isLoaderObject} from './loader-utils/normalize-loader';\nimport {mergeLoaderAndUserOptions} from './loader-utils/normalize-options';\nimport {autoDetectLoader} from './loader-utils/auto-detect-loader';\n\nimport {parse, parseInBatches} from './parse';\nimport {getRegisteredLoaders} from './register-loaders';\n\nexport async function loadInBatches(url, loaders, options) {\n  const response = await fetchFile(url, options);\n  return parseInBatches(response, loaders, options, url);\n}\n\n// Note: Load does duplicate a lot of parse.\n// Works like parse but can call `loadAndParse` for parsers that need to do their own loading\n// it can also call fetchFile on string urls, which `parse` won't do.\nexport async function load(url, loaders, options) {\n  // Signature: load(url, options)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    options = loaders;\n    loaders = null;\n  }\n\n  // Extract a url for auto detection\n  const autoUrl = isFileReadable(url) ? url.name : url;\n\n  loaders = loaders || getRegisteredLoaders();\n  const loader = Array.isArray(loaders) ? autoDetectLoader(null, loaders, {url: autoUrl}) : loaders;\n\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  // Some loaders can not separate reading and parsing of data (e.g ImageLoader)\n  if (loader && loader.loadAndParse) {\n    return await loader.loadAndParse(url, options);\n  }\n\n  // at this point, data can be binary or text\n  let data = url;\n  if (isFileReadable(data) || typeof data === 'string') {\n    data = await fetchFile(url, options);\n  }\n  return parse(data, loaders, options, autoUrl);\n}\n"],"file":"load.js"}