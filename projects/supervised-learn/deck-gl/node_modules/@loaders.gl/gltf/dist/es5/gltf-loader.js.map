{"version":3,"sources":["../../src/gltf-loader.js"],"names":["DEFAULT_OPTIONS","useGLTFParser","parse","arrayBuffer","options","gltfParser","GLTFParser","byteOffset","gltf","parseSync","name","extensions","text","binary","test","defaultOptions"],"mappings":";;;;;;;;;;;;;;;;;AAEA;;AACA;;;;;;AAEA,IAAMA,eAAe,GAAG;AACtBC,EAAAA,aAAa,EAAE;AADO,CAAxB;;SAIsBC,K;;;;;2EAAf,iBAAqBC,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAkCC,YAAAA,OAAlC,2DAA4C,EAA5C;AAELA,YAAAA,OAAO,qBAAOJ,eAAP,MAA2BI,OAA3B,CAAP;;AAFK,iBAIDA,OAAO,CAACH,aAJP;AAAA;AAAA;AAAA;;AAKGI,YAAAA,UALH,GAKgB,IAAIC,sBAAJ,EALhB;AAAA,6CAMID,UAAU,CAACH,KAAX,CAAiBC,WAAjB,EAA8BC,OAA9B,CANJ;;AAAA;AAAA,wBAUoBA,OAVpB,mCAUEG,UAVF,EAUEA,UAVF,qCAUe,CAVf;AAWCC,YAAAA,IAXD,GAWQ,EAXR;AAAA;AAAA,mBAYC,0BAAUA,IAAV,EAAgBL,WAAhB,EAA6BI,UAA7B,EAAyCH,OAAzC,CAZD;;AAAA;AAAA,6CAaEI,IAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgBA,SAASC,SAAT,CAAmBN,WAAnB,EAA8C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAEnDA,EAAAA,OAAO,qBAAOJ,eAAP,MAA2BI,OAA3B,CAAP;;AAGA,MAAIA,OAAO,CAACH,aAAZ,EAA2B;AACzB,WAAO,IAAIK,sBAAJ,GAAiBG,SAAjB,CAA2BN,WAA3B,EAAwCC,OAAxC,CAAP;AACD;;AAPkD,iBAU1BA,OAV0B;AAAA,qCAU5CG,UAV4C;AAAA,MAU5CA,UAV4C,oCAU/B,CAV+B;AAWnD,MAAMC,IAAI,GAAG,EAAb;AACA,gCAAcA,IAAd,EAAoBL,WAApB,EAAiCI,UAAjC,EAA6CH,OAA7C;AACA,SAAOI,IAAP;AACD;;eAEc;AACbE,EAAAA,IAAI,EAAE,MADO;AAEbC,EAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,KAAT,CAFC;AAGbC,EAAAA,IAAI,EAAE,IAHO;AAIbC,EAAAA,MAAM,EAAE,IAJK;AAKbC,EAAAA,IAAI,EAAE,MALO;AAMbZ,EAAAA,KAAK,EAALA,KANa;AAObO,EAAAA,SAAS,EAATA,SAPa;AAQbM,EAAAA,cAAc,EAAEf;AARH,C","sourcesContent":["// Binary container format for glTF\n\nimport {parseGLTFSync, parseGLTF} from './lib/parse-gltf';\nimport GLTFParser from './lib/deprecated/gltf-parser';\n\nconst DEFAULT_OPTIONS = {\n  useGLTFParser: true // GLTFParser will be removed in v2.\n};\n\nexport async function parse(arrayBuffer, options = {}) {\n  // Apps like to call the parse method directly so apply default options here\n  options = {...DEFAULT_OPTIONS, ...options};\n  // Deprecated: Return GLTFParser instance\n  if (options.useGLTFParser) {\n    const gltfParser = new GLTFParser();\n    return gltfParser.parse(arrayBuffer, options);\n  }\n\n  // Return pure javascript object\n  const {byteOffset = 0} = options;\n  const gltf = {};\n  await parseGLTF(gltf, arrayBuffer, byteOffset, options);\n  return gltf;\n}\n\nexport function parseSync(arrayBuffer, options = {}) {\n  // Apps like to call the parse method directly so apply default options here\n  options = {...DEFAULT_OPTIONS, ...options};\n\n  // Deprecated: Return GLTFParser instance\n  if (options.useGLTFParser) {\n    return new GLTFParser().parseSync(arrayBuffer, options);\n  }\n\n  // Return pure javascript object\n  const {byteOffset = 0} = options;\n  const gltf = {};\n  parseGLTFSync(gltf, arrayBuffer, byteOffset, options);\n  return gltf;\n}\n\nexport default {\n  name: 'glTF',\n  extensions: ['gltf', 'glb'],\n  text: true,\n  binary: true,\n  test: 'glTF',\n  parse,\n  parseSync, // Less features when parsing synchronously\n  defaultOptions: DEFAULT_OPTIONS\n};\n"],"file":"gltf-loader.js"}