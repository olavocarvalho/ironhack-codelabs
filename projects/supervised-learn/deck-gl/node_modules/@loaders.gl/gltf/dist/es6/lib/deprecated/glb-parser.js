import assert from '../utils/assert';
import parseGLBSync, { isGLB } from '../parse-glb';
import { ATTRIBUTE_TYPE_TO_COMPONENTS, ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE, ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY } from '../gltf-utils/gltf-utils';
import unpackBinaryJson from './packed-json/unpack-binary-json';
import unpackGLTFBuffers from './packed-json/unpack-gltf-buffers';
export default class GLBParser {
  static isGLB(arrayBuffer) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var byteOffset = 0;
    return isGLB(arrayBuffer, byteOffset);
  }

  parse(arrayBuffer) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return this.parseSync(arrayBuffer, options);
  }

  parseSync(arrayBuffer) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.glbArrayBuffer = arrayBuffer;
    this.binaryByteOffset = null;
    this.packedJson = null;
    this.json = null;

    if (this.json === null && this.binaryByteOffset === null) {
      var byteOffset = 0;
      parseGLBSync(this, this.glbArrayBuffer, byteOffset, options);
      this.binaryByteOffset = this.binChunkByteOffset;
      this.packedJson = this.json;
      var unpackedBuffers = unpackGLTFBuffers(this.glbArrayBuffer, this.json, this.binaryByteOffset);
      this.json = unpackBinaryJson(this.json, unpackedBuffers);
      this.unpackedBuffers = unpackedBuffers;
    }

    return this;
  }

  getApplicationData(key) {
    return this.json[key];
  }

  getJSON() {
    return this.json;
  }

  getArrayBuffer() {
    return this.glbArrayBuffer;
  }

  getBinaryByteOffset() {
    return this.binaryByteOffset;
  }

  getBufferView(glTFBufferView) {
    var byteOffset = (glTFBufferView.byteOffset || 0) + this.binaryByteOffset;
    return new Uint8Array(this.glbArrayBuffer, byteOffset, glTFBufferView.byteLength);
  }

  getBuffer(glTFAccessor) {
    var ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[glTFAccessor.componentType];
    var components = ATTRIBUTE_TYPE_TO_COMPONENTS[glTFAccessor.type];
    var bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[glTFAccessor.componentType];
    var length = glTFAccessor.count * components;
    var byteLength = glTFAccessor.count * components * bytesPerComponent;
    var glTFBufferView = this.json.bufferViews[glTFAccessor.bufferView];
    assert(byteLength >= 0 && glTFAccessor.byteOffset + byteLength <= glTFBufferView.byteLength);
    var byteOffset = glTFBufferView.byteOffset + this.binaryByteOffset + glTFAccessor.byteOffset;
    return new ArrayType(this.glbArrayBuffer, byteOffset, length);
  }

  getImageData(glTFImage) {
    return {
      typedArray: this.getBufferView(glTFImage.bufferView),
      mimeType: glTFImage.mimeType || 'image/jpeg'
    };
  }

  getImage(glTFImage) {
    var arrayBufferView = this.getBufferView(glTFImage.bufferView);
    var mimeType = glTFImage.mimeType || 'image/jpeg';
    var blob = new Blob([arrayBufferView], {
      type: mimeType
    });
    var urlCreator = self.URL || self.webkitURL;
    var imageUrl = urlCreator.createObjectURL(blob);
    var img = new Image();
    img.src = imageUrl;
    return img;
  }

  getImageAsync(glTFImage) {
    return new Promise(resolve => {
      var arrayBufferView = this.getBufferView(glTFImage.bufferView);
      var mimeType = glTFImage.mimeType || 'image/jpeg';
      var blob = new Blob([arrayBufferView], {
        type: mimeType
      });
      var urlCreator = self.URL || self.webkitURL;
      var imageUrl = urlCreator.createObjectURL(blob);
      var img = new Image();

      img.onload = () => resolve(img);

      img.src = imageUrl;
    });
  }

}
//# sourceMappingURL=glb-parser.js.map