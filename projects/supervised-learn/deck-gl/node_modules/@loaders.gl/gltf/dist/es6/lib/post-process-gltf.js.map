{"version":3,"sources":["../../../src/lib/post-process-gltf.js"],"names":["getFullUri","COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","BYTES","GL_SAMPLER","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","REPEAT","LINEAR","NEAREST_MIPMAP_LINEAR","SAMPLER_PARAMETER_GLTF_TO_GL","magFilter","minFilter","wrapS","wrapT","DEFAULT_SAMPLER","TEXTURE_WRAP_","getBytesFromComponentType","componentType","getSizeFromAccessorType","type","GLTFPostProcessor","postProcess","gltf","options","json","buffers","_resolveTree","bufferViews","map","bufView","i","_resolveBufferView","images","image","_resolveImage","samplers","sampler","_resolveSampler","textures","texture","_resolveTexture","accessors","accessor","_resolveAccessor","materials","material","_resolveMaterial","meshes","mesh","_resolveMesh","nodes","node","_resolveNode","skins","skin","_resolveSkin","scenes","scene","_resolveScene","undefined","getScene","index","_get","getNode","getSkin","getMesh","getMaterial","getAccessor","getCamera","getTexture","getSampler","getImage","getBufferView","getBuffer","array","object","console","warn","id","children","child","camera","inverseBindMatrices","primitives","primitive","attributes","attribute","indices","normalTexture","occlusionTexture","occlustionTexture","emissiveTexture","emmisiveTexture","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","bufferView","bytesPerComponent","components","bytesPerElement","source","parameters","key","glEnum","_enumSamplerParameter","baseUri","uri","fullUri","getImageAsync","Promise","resolve","img","Image","crossOrigin","onload","src","bufferIndex","buffer","arrayBuffer","byteOffset","data","Uint8Array","byteLength","_resolveCamera","perspective","orthographic","postProcessGLTF"],"mappings":"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","sourcesContent":["import {getFullUri} from './gltf-utils/gltf-utils';\n\n// This is a post processor for loaded glTF files\n// The goal is to make the loaded data easier to use in WebGL applications\n//\n// Functions:\n// * Resolve indexed arrays structure of glTF into a linked tree.\n// * Translate stringified enum keys and values into WebGL constants.\n// * Load images (optional)\n\n// ENUM LOOKUP\n\nconst COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst BYTES = {\n  5120: 1, // BYTE\n  5121: 1, // UNSIGNED_BYTE\n  5122: 2, // SHORT\n  5123: 2, // UNSIGNED_SHORT\n  5125: 4, // UNSIGNED_INT\n  5126: 4 // FLOAT\n};\n\nconst GL_SAMPLER = {\n  // Sampler parameters\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n\n  // Sampler default values\n  REPEAT: 0x2901,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_LINEAR: 0x2702\n};\n\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\n// When undefined, a sampler with repeat wrapping and auto filtering should be used.\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\nconst DEFAULT_SAMPLER = {\n  [GL_SAMPLER.TEXTURE_MAG_FILTER]: GL_SAMPLER.LINEAR,\n  [GL_SAMPLER.TEXTURE_MIN_FILTER]: GL_SAMPLER.NEAREST_MIPMAP_LINEAR,\n  [GL_SAMPLER.TEXTURE_WRAP_S]: GL_SAMPLER.REPEAT,\n  [GL_SAMPLER.TEXTURE_WRAP_]: GL_SAMPLER.REPEAT\n};\n\nfunction getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\n\nfunction getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\n\nclass GLTFPostProcessor {\n  postProcess(gltf, options = {}) {\n    this.gltf = gltf;\n    this.json = gltf.json;\n    this.buffers = gltf.buffers;\n    return this._resolveTree(gltf.json, options);\n  }\n\n  // Convert indexed glTF structure into tree structure\n  // cross-link index resolution, enum lookup, convenience calculations\n  // eslint-disable-next-line complexity\n  _resolveTree(json, options = {}) {\n    if (json.bufferViews) {\n      json.bufferViews = json.bufferViews.map((bufView, i) => this._resolveBufferView(bufView, i));\n    }\n    if (json.images) {\n      json.images = json.images.map((image, i) => this._resolveImage(image, i, options));\n    }\n    if (json.samplers) {\n      json.samplers = json.samplers.map((sampler, i) => this._resolveSampler(sampler, i));\n    }\n    if (json.textures) {\n      json.textures = json.textures.map((texture, i) => this._resolveTexture(texture, i));\n    }\n    if (json.accessors) {\n      json.accessors = json.accessors.map((accessor, i) => this._resolveAccessor(accessor, i));\n    }\n    if (json.materials) {\n      json.materials = json.materials.map((material, i) => this._resolveMaterial(material, i));\n    }\n    if (json.meshes) {\n      json.meshes = json.meshes.map((mesh, i) => this._resolveMesh(mesh, i));\n    }\n    if (json.nodes) {\n      json.nodes = json.nodes.map((node, i) => this._resolveNode(node, i));\n    }\n    if (json.skins) {\n      json.skins = json.skins.map((skin, i) => this._resolveSkin(skin, i));\n    }\n    if (json.scenes) {\n      json.scenes = json.scenes.map((scene, i) => this._resolveScene(scene, i));\n    }\n    if (json.scene !== undefined) {\n      json.scene = json.scenes[this.json.scene];\n    }\n\n    // TODO arrays added by extensions, e.g. lights\n\n    return json;\n  }\n  /* eslint-enable complexity */\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  _get(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PARSING HELPERS\n\n  _resolveScene(scene, index) {\n    scene = {...scene};\n    scene.id = scene.id || `scene-${index}`;\n    scene.nodes = (scene.nodes || []).map(node => this.getNode(node));\n    return scene;\n  }\n\n  _resolveNode(node, index) {\n    node = {...node};\n    node.id = node.id || `node-${index}`;\n    if (node.children) {\n      node.children = node.children.map(child => this.getNode(child));\n    }\n    if (node.mesh !== undefined) {\n      node.mesh = this.getMesh(node.mesh);\n    }\n    if (node.camera !== undefined) {\n      node.camera = this.getCamera(node.camera);\n    }\n    if (node.skin !== undefined) {\n      node.skin = this.getSkin(node.skin);\n    }\n    return node;\n  }\n\n  _resolveSkin(skin, index) {\n    skin = {...skin};\n    skin.id = skin.id || `skin-${index}`;\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n    return skin;\n  }\n\n  _resolveMesh(mesh, index) {\n    mesh = {...mesh};\n    mesh.id = mesh.id || `mesh-${index}`;\n    if (mesh.primitives) {\n      mesh.primitives = mesh.primitives.map(primitive => {\n        primitive = {...primitive};\n        const attributes = primitive.attributes;\n        primitive.attributes = {};\n        for (const attribute in attributes) {\n          primitive.attributes[attribute] = this.getAccessor(attributes[attribute]);\n        }\n        if (primitive.indices !== undefined) {\n          primitive.indices = this.getAccessor(primitive.indices);\n        }\n        if (primitive.material !== undefined) {\n          primitive.material = this.getMaterial(primitive.material);\n        }\n        return primitive;\n      });\n    }\n    return mesh;\n  }\n\n  _resolveMaterial(material, index) {\n    material = {...material};\n    material.id = material.id || `material-${index}`;\n    if (material.normalTexture) {\n      material.normalTexture = {...material.normalTexture};\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlustionTexture = {...material.occlustionTexture};\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emmisiveTexture = {...material.emmisiveTexture};\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n\n    if (material.pbrMetallicRoughness) {\n      material.pbrMetallicRoughness = {...material.pbrMetallicRoughness};\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture = {...mr.baseColorTexture};\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture = {...mr.metallicRoughnessTexture};\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n    return material;\n  }\n\n  _resolveAccessor(accessor, index) {\n    accessor = {...accessor};\n    accessor.id = accessor.id || `accessor-${index}`;\n    if (accessor.bufferView !== undefined) {\n      // Draco encoded meshes don't have bufferView\n      accessor.bufferView = this.getBufferView(accessor.bufferView);\n    }\n\n    // Look up enums\n    accessor.bytesPerComponent = getBytesFromComponentType(accessor.componentType);\n    accessor.components = getSizeFromAccessorType(accessor.type);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n    return accessor;\n  }\n\n  _resolveTexture(texture, index) {\n    texture = {...texture};\n    texture.id = texture.id || `texture-${index}`;\n    texture.sampler = 'sampler' in texture ? this.getSampler(texture.sampler) : DEFAULT_SAMPLER;\n    texture.source = this.getImage(texture.source);\n    return texture;\n  }\n\n  _resolveSampler(sampler, index) {\n    sampler = {...sampler};\n    sampler.id = sampler.id || `sampler-${index}`;\n    // Map textual parameters to GL parameter values\n    sampler.parameters = {};\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n    return sampler;\n  }\n\n  _enumSamplerParameter(key) {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  // TODO - Handle non-binary-chunk images, data URIs, URLs etc\n  // TODO - Image creation could be done on getImage instead of during load\n  _resolveImage(image, index, options) {\n    image = {...image};\n    image.id = image.id || `image-${index}`;\n    if (image.bufferView !== undefined) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n\n    if ('uri' in image) {\n      const baseUri = options.uri || this.gltf.baseUri;\n      if (baseUri) {\n        image.baseUri = baseUri;\n        image.fullUri = getFullUri(image.uri, baseUri);\n      }\n    }\n\n    function getImageAsync() {\n      if (image.uri) {\n        // TODO: Maybe just return the URL?\n        // TODO: Maybe use loaders.gl/core loadImage?\n        return new Promise(resolve => {\n          /* global Image */\n          const img = new Image();\n          img.crossOrigin = 'anonymous';\n          img.onload = () => resolve(img);\n          img.src = image.fullUri || image.uri;\n        });\n      }\n      // cannot get image\n      return null;\n    }\n\n    image.getImageAsync = getImageAsync;\n    return image;\n  }\n\n  _resolveBufferView(bufferView, index) {\n    bufferView = {...bufferView};\n    bufferView.id = bufferView.id || `bufferView-${index}`;\n    const bufferIndex = bufferView.buffer;\n    bufferView.buffer = this.getBuffer(bufferIndex);\n\n    const arrayBuffer = this.buffers[bufferIndex].arrayBuffer;\n    let byteOffset = this.buffers[bufferIndex].byteOffset || 0;\n\n    if ('byteOffset' in bufferView) {\n      byteOffset += bufferView.byteOffset;\n    }\n\n    bufferView.data = new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n    return bufferView;\n  }\n\n  _resolveCamera(camera, index) {\n    camera.id = camera.id || `camera-${index}`;\n    // TODO - create 4x4 matrices\n    if (camera.perspective) {\n      // camera.matrix = createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      // camera.matrix = createOrthographicMatrix(camera.orthographic);\n    }\n    return camera;\n  }\n}\n\nexport default function postProcessGLTF(gltf, options) {\n  return new GLTFPostProcessor().postProcess(gltf, options);\n}\n"],"file":"post-process-gltf.js"}