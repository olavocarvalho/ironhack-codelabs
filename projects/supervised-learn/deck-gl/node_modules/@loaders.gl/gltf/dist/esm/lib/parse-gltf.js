import _regeneratorRuntime from "@babel/runtime/regenerator";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { fetchFile } from '@loaders.gl/core';
import assert from './utils/assert';
import { getFullUri } from './gltf-utils/gltf-utils';
import parseGLBSync, { isGLB } from './parse-glb';
import * as EXTENSIONS from './extensions';
var DEFAULT_SYNC_OPTIONS = {
  fetchLinkedResources: false,
  decompress: false,
  DracoLoader: null,
  postProcess: true,
  createImages: false,
  log: console
};
var DEFAULT_ASYNC_OPTIONS = {
  fetchLinkedResources: true,
  fetch: fetchFile,
  decompress: false,
  DracoLoader: null,
  postProcess: true,
  createImages: false,
  log: console
};
export function isGLTF(arrayBuffer) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var dataView = new DataView(arrayBuffer);
  var byteOffset = 0;
  return isGLB(dataView, byteOffset);
}
export function parseGLTFSync(gltf, arrayBufferOrString) {
  var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  options = Object.assign({}, DEFAULT_SYNC_OPTIONS, options);
  var data = arrayBufferOrString;

  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {
    var textDecoder = new TextDecoder();
    data = textDecoder.decode(data);
  }

  gltf.buffers = [];

  if (typeof data === 'string') {
    gltf.json = JSON.parse(data);
  } else if (data instanceof ArrayBuffer) {
    byteOffset = parseGLBSync(gltf, data, byteOffset, options);

    if (gltf.hasBinChunk) {
      gltf.buffers.push({
        arrayBuffer: data,
        byteOffset: gltf.binChunkByteOffset,
        byteLength: gltf.binChunkLength
      });
    }
  } else {
    gltf.json = data;
  }

  if (options.uri) {
    gltf.baseUri = options.uri;
  }

  if (options.fetchLinkedResources) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = (gltf.json.buffers || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var buffer = _step.value;

        if (buffer.uri) {
          throw new Error('parseGLTFSync: Cannot decode uri buffers');
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  decodeExtensions(gltf, options);
  return byteOffset;
}
export function parseGLTF(_x, _x2) {
  return _parseGLTF.apply(this, arguments);
}

function _parseGLTF() {
  _parseGLTF = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(gltf, arrayBufferOrString) {
    var byteOffset,
        options,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            byteOffset = _args.length > 2 && _args[2] !== undefined ? _args[2] : 0;
            options = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};
            options = Object.assign({}, DEFAULT_ASYNC_OPTIONS, options);
            parseGLTFSync(gltf, arrayBufferOrString, byteOffset, _objectSpread({}, options, {
              fetchLinkedResources: false,
              postProcess: false,
              decompress: false
            }));

            if (!options.fetchLinkedResources) {
              _context.next = 7;
              break;
            }

            _context.next = 7;
            return fetchLinkedResources(gltf, options);

          case 7:
            return _context.abrupt("return", gltf);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseGLTF.apply(this, arguments);
}

function fetchLinkedResources(_x3, _x4) {
  return _fetchLinkedResources.apply(this, arguments);
}

function _fetchLinkedResources() {
  _fetchLinkedResources = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(gltf, options) {
    var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, buffer, fetch, uri, response, arrayBuffer;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context2.prev = 3;
            _iterator2 = gltf.json.buffers[Symbol.iterator]();

          case 5:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context2.next = 22;
              break;
            }

            buffer = _step2.value;

            if (!buffer.uri) {
              _context2.next = 19;
              break;
            }

            fetch = options.fetch || window.fetch;
            assert(fetch);
            uri = getFullUri(buffer.uri, options.uri);
            _context2.next = 13;
            return fetch(uri);

          case 13:
            response = _context2.sent;
            _context2.next = 16;
            return response.arrayBuffer();

          case 16:
            arrayBuffer = _context2.sent;
            buffer.data = arrayBuffer;
            delete buffer.uri;

          case 19:
            _iteratorNormalCompletion2 = true;
            _context2.next = 5;
            break;

          case 22:
            _context2.next = 28;
            break;

          case 24:
            _context2.prev = 24;
            _context2.t0 = _context2["catch"](3);
            _didIteratorError2 = true;
            _iteratorError2 = _context2.t0;

          case 28:
            _context2.prev = 28;
            _context2.prev = 29;

            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }

          case 31:
            _context2.prev = 31;

            if (!_didIteratorError2) {
              _context2.next = 34;
              break;
            }

            throw _iteratorError2;

          case 34:
            return _context2.finish(31);

          case 35:
            return _context2.finish(28);

          case 36:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[3, 24, 28, 36], [29,, 31, 35]]);
  }));
  return _fetchLinkedResources.apply(this, arguments);
}

function decodeExtensions(gltf, options) {
  for (var extensionName in EXTENSIONS) {
    var disableExtension = extensionName in options && !options[extensionName];

    if (!disableExtension) {
      var extension = EXTENSIONS[extensionName];
      extension.decode(gltf, options);
    }
  }
}
//# sourceMappingURL=parse-gltf.js.map