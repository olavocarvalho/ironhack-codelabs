{"version":3,"sources":["../../../src/lib/base-model.js"],"names":["isWebGL","Query","Program","VertexArray","clear","MODULAR_SHADERS","assembleShaders","getDebugTableForUniforms","getDebugTableForVertexArray","getDebugTableForProgramConfiguration","addModel","removeModel","logModel","getOverrides","log","isObjectEmpty","uid","assert","LOG_DRAW_PRIORITY","LOG_DRAW_TIMEOUT","BaseModel","constructor","gl","props","id","lastLogTime","initialize","_setBaseModelProps","program","_createProgram","vertexArray","userData","needsRedraw","_attributes","attributes","animatedUniforms","animated","animationLoop","timerQueryEnabled","timeElapsedQuery","undefined","lastQueryReturned","stats","accumulatedFrameTime","averageFrameTime","profileFrameCount","pickable","setUniforms","Object","assign","getModuleUniforms","moduleSettings","setProps","delete","key","isAnimated","getProgram","getUniforms","uniforms","_extractAnimatedUniforms","updateModuleSettings","opts","drawGeometry","framebuffer","transformFeedback","parameters","animationProps","setAttributes","_refreshAnimationProps","logPriority","_logDrawCallStart","drawParams","getDrawParams","isInstanced","warn","isIndexed","indexType","indexOffset","instanceCount","noop","onBeforeRender","onAfterRender","_timerQueryStart","didDraw","draw","drawMode","getDrawMode","vertexCount","getVertexCount","offset","_timerQueryEnd","_logDrawCallEnd","isSupported","_setAnimationProps","_animationProps","_animationLoop","vs","fs","modules","defines","inject","shaderCache","varyings","bufferMode","x","assembleResult","_evaluateAnimateUniforms","uniformName","valueFunction","foundAnimated","newValue","staticUniforms","beginTimeElapsedQuery","end","isResultAvailable","elapsedTime","getTimerMilliseconds","lastFrameTime","priority","logDrawTimeout","Date","now","group","collapsed","attributeTable","header","table","uniformTable","unusedTable","unusedCount","missingTable","count","missingCount","undefinedOnly","keys","configTable","configuration","message","groupEnd"],"mappings":"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","sourcesContent":["// Shared code between Model and MeshModel\n\nimport GL from '@luma.gl/constants';\nimport {isWebGL, Query, Program, VertexArray, clear} from '@luma.gl/webgl';\nimport {MODULAR_SHADERS, assembleShaders} from '@luma.gl/shadertools';\nimport {\n  getDebugTableForUniforms,\n  getDebugTableForVertexArray,\n  getDebugTableForProgramConfiguration\n} from '@luma.gl/webgl';\nimport {addModel, removeModel, logModel, getOverrides} from '../debug/seer-integration';\nimport {log, isObjectEmpty, uid, assert} from '../utils';\n\nconst LOG_DRAW_PRIORITY = 2;\nconst LOG_DRAW_TIMEOUT = 10000;\n\n// Model abstract O3D Class\nexport default class BaseModel {\n  constructor(gl, props = {}) {\n    assert(isWebGL(gl));\n    const {id = uid('base-model')} = props;\n    this.id = id;\n    this.gl = gl;\n    this.id = props.id || uid('Model');\n    this.lastLogTime = 0; // TODO - move to probe.gl\n    this.initialize(props);\n    this._setBaseModelProps(props);\n  }\n\n  initialize(props) {\n    this.props = {};\n    this.program = this._createProgram(props);\n\n    // Create a vertex array configured after this program\n    this.vertexArray = new VertexArray(this.gl, {program: this.program});\n\n    // Initialize state\n    this.userData = {};\n    this.needsRedraw = true;\n\n    // Attributes and buffers\n    // Model manages auto Buffer creation from typed arrays\n    this._attributes = {}; // All attributes\n    this.attributes = {}; // User defined attributes\n\n    // Model manages uniform animation\n    this.animatedUniforms = {};\n    this.animated = false;\n    this.animationLoop = null; // if set, used as source for animationProps\n\n    this.timerQueryEnabled = false;\n    this.timeElapsedQuery = undefined;\n    this.lastQueryReturned = true;\n\n    this.stats = {\n      accumulatedFrameTime: 0,\n      averageFrameTime: 0,\n      profileFrameCount: 0\n    };\n\n    // picking options\n    this.pickable = true;\n\n    this._setBaseModelProps(props);\n\n    // Make sure we have some reasonable default uniforms in place\n    this.setUniforms(\n      Object.assign(\n        {},\n        this.getModuleUniforms(), // Get all default uniforms\n        this.getModuleUniforms(props.moduleSettings) // Get unforms for supplied parameters\n      )\n    );\n  }\n\n  setProps(props) {\n    this._setBaseModelProps(props);\n  }\n\n  delete() {\n    // delete all attributes created by this model\n    // TODO - should buffer deletes be handled by vertex array?\n    for (const key in this._attributes) {\n      if (this._attributes[key] !== this.attributes[key]) {\n        this._attributes[key].delete();\n      }\n    }\n\n    this.program.delete();\n    this.vertexArray.delete();\n\n    removeModel(this.id);\n  }\n\n  // GETTERS\n\n  isAnimated() {\n    return this.animated;\n  }\n\n  getProgram() {\n    return this.program;\n  }\n\n  getUniforms() {\n    return this.program.uniforms;\n  }\n\n  // SETTERS\n\n  // TODO - should actually set the uniforms\n  setUniforms(uniforms = {}) {\n    // Let Seer override edited uniforms\n    uniforms = Object.assign({}, uniforms);\n    getOverrides(this.id, uniforms);\n\n    // Resolve any animated uniforms so that we have an initial value\n    uniforms = this._extractAnimatedUniforms(uniforms);\n\n    this.program.setUniforms(uniforms);\n\n    return this;\n  }\n\n  updateModuleSettings(opts) {\n    const uniforms = this.getModuleUniforms(opts || {});\n    return this.setUniforms(uniforms);\n  }\n\n  // DRAW CALLS\n\n  clear(opts) {\n    clear(this.program.gl, opts);\n    return this;\n  }\n\n  /* eslint-disable max-statements  */\n  drawGeometry(opts = {}) {\n    const {\n      moduleSettings = null,\n      framebuffer,\n      uniforms = {},\n      attributes = {},\n      transformFeedback = this.transformFeedback,\n      parameters = {},\n      vertexArray = this.vertexArray,\n      animationProps\n    } = opts;\n\n    // Update module settings\n\n    addModel(this);\n\n    // Update model with any just provided attributes, settings or uniforms\n    this.setAttributes(attributes);\n    this.updateModuleSettings(moduleSettings);\n    this.setUniforms(uniforms);\n\n    // Animate any function valued uniforms\n    this._refreshAnimationProps(animationProps);\n\n    const logPriority = this._logDrawCallStart(2);\n\n    const drawParams = this.vertexArray.getDrawParams(this.props);\n    if (drawParams.isInstanced && !this.isInstanced) {\n      log.warn('Found instanced attributes on non-instanced model', this.id)();\n    }\n\n    const {isIndexed, indexType, indexOffset} = drawParams;\n    const {isInstanced, instanceCount} = this;\n\n    const noop = () => {};\n    const {onBeforeRender = noop, onAfterRender = noop} = this.props;\n\n    onBeforeRender();\n\n    this._timerQueryStart();\n\n    const didDraw = this.program.draw(\n      Object.assign({}, opts, {\n        logPriority,\n        uniforms: null, // Already set (may contain \"function values\" not understood by Program)\n        framebuffer,\n        parameters,\n        drawMode: this.getDrawMode(),\n        vertexCount: this.getVertexCount(),\n        vertexArray,\n        transformFeedback,\n        isIndexed,\n        indexType,\n        isInstanced,\n        instanceCount,\n        offset: isIndexed ? indexOffset : 0\n      })\n    );\n\n    this._timerQueryEnd();\n\n    onAfterRender();\n\n    this._logDrawCallEnd(logPriority, vertexArray, framebuffer);\n\n    return didDraw;\n  }\n  /* eslint-enable max-statements  */\n\n  // PRIVATE METHODS\n\n  // eslint-disable-next-line max-statements, complexity\n  _setBaseModelProps(props) {\n    Object.assign(this.props, props);\n\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n\n    if ('pickable' in props) {\n      this.pickable = props.pickable;\n    }\n\n    // if ('onBeforeRender' in props) {}\n    // if ('onAfterRender' in props) {}\n\n    // Experimental props\n    if ('timerQueryEnabled' in props) {\n      this.timerQueryEnabled = props.timerQueryEnabled && Query.isSupported(this.gl, ['timers']);\n      if (props.timerQueryEnabled && !this.timerQueryEnabled) {\n        log.warn('GPU timer not supported')();\n      }\n    }\n\n    if ('_animationProps' in props) {\n      this._setAnimationProps(props._animationProps);\n    }\n\n    if ('_animationLoop' in props) {\n      this.animationLoop = props._animationLoop;\n    }\n  }\n\n  _createProgram({\n    vs = null,\n    fs = null,\n    // 1: Modular shaders\n    modules = null,\n    defines = {},\n    inject = {},\n    shaderCache = null,\n    // TransformFeedback\n    varyings = null,\n    bufferMode = GL.SEPARATE_ATTRIBS,\n    program = null\n  }) {\n    this.getModuleUniforms = x => {};\n\n    const id = this.id;\n\n    if (!program) {\n      // Assign default shaders if none are provided\n      vs = vs || MODULAR_SHADERS.vs;\n      fs = fs || MODULAR_SHADERS.fs;\n\n      const assembleResult = assembleShaders(this.gl, {vs, fs, modules, inject, defines, log});\n      ({vs, fs} = assembleResult);\n\n      if (shaderCache) {\n        program = shaderCache.getProgram(this.gl, {id, vs, fs});\n      } else {\n        program = new Program(this.gl, {id, vs, fs, varyings, bufferMode});\n      }\n\n      this.getModuleUniforms = assembleResult.getUniforms || (x => {});\n    }\n\n    assert(program instanceof Program, 'Model needs a program');\n    return program;\n  }\n\n  // Refreshes animated uniforms, attempting to get animated props from animationLoop if registered\n  _refreshAnimationProps(animationProps) {\n    // Try to read animationProps\n    animationProps = animationProps || (this.animationLoop && this.animationLoop.animationProps);\n    if (animationProps) {\n      this._setAnimationProps(animationProps);\n    }\n  }\n\n  // Calculate new values for any function uniforms based on supplied animationProps\n  _evaluateAnimateUniforms(animationProps) {\n    if (!this.animated) {\n      return {};\n    }\n    const animatedUniforms = {};\n    for (const uniformName in this.animatedUniforms) {\n      const valueFunction = this.animatedUniforms[uniformName];\n      animatedUniforms[uniformName] = valueFunction(animationProps);\n    }\n    return animatedUniforms;\n  }\n\n  // Extracts a list of function valued uniforms, so we can update them before each draw call\n  // Also removes such uniforms from the returned list\n  _extractAnimatedUniforms(uniforms) {\n    let foundAnimated = false;\n\n    // Keep our animatedUniforms map up-to-date\n    for (const uniformName in uniforms) {\n      const newValue = uniforms[uniformName];\n      if (typeof newValue === 'function') {\n        this.animatedUniforms[uniformName] = newValue;\n        foundAnimated = true;\n      } else {\n        delete this.animatedUniforms[uniformName];\n      }\n    }\n\n    // Update animated flag: `Model` is animated if any uniforms are animated (i.e. functions)\n    this.animated = !isObjectEmpty(this.animatedUniforms);\n\n    if (!foundAnimated) {\n      return uniforms;\n    }\n\n    // If animated uniforms were found, remove them from ordinary uniform list\n    // `Program` class can't (and shouldn't) handle function valued uniforms\n    const staticUniforms = {};\n    for (const uniformName in uniforms) {\n      if (!this.animatedUniforms[uniformName]) {\n        staticUniforms[uniformName] = uniforms[uniformName];\n      }\n    }\n    return staticUniforms;\n  }\n\n  // Timer Queries\n\n  _timerQueryStart() {\n    if (this.timerQueryEnabled === true) {\n      if (!this.timeElapsedQuery) {\n        this.timeElapsedQuery = new Query(this.gl);\n      }\n      if (this.lastQueryReturned) {\n        this.lastQueryReturned = false;\n        this.timeElapsedQuery.beginTimeElapsedQuery();\n      }\n    }\n  }\n\n  _timerQueryEnd() {\n    if (this.timerQueryEnabled === true) {\n      this.timeElapsedQuery.end();\n      // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false\n      // should this be incorporated into Query object?\n      if (this.timeElapsedQuery.isResultAvailable()) {\n        this.lastQueryReturned = true;\n        const elapsedTime = this.timeElapsedQuery.getTimerMilliseconds();\n\n        // Update stats (e.g. for seer)\n        this.stats.lastFrameTime = elapsedTime;\n        this.stats.accumulatedFrameTime += elapsedTime;\n        this.stats.profileFrameCount++;\n        this.stats.averageFrameTime =\n          this.stats.accumulatedFrameTime / this.stats.profileFrameCount;\n\n        // Log stats\n        log.log(\n          LOG_DRAW_PRIORITY,\n          `\\\nGPU time ${this.program.id}: ${this.stats.lastFrameTime}ms \\\naverage ${this.stats.averageFrameTime}ms \\\naccumulated: ${this.stats.accumulatedFrameTime}ms \\\ncount: ${this.stats.profileFrameCount}`\n        )();\n      }\n    }\n  }\n\n  _logDrawCallStart(priority) {\n    const logDrawTimeout = priority > 3 ? 0 : LOG_DRAW_TIMEOUT;\n    if (log.priority < priority || Date.now() - this.lastLogTime < logDrawTimeout) {\n      return undefined;\n    }\n\n    this.lastLogTime = Date.now();\n\n    log.group(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`, {collapsed: log.priority <= 2})();\n\n    return priority;\n  }\n\n  _logDrawCallEnd(priority, vertexArray, uniforms, framebuffer) {\n    // HACK: priority === undefined means logDrawCallStart didn't run\n    if (priority === undefined) {\n      return;\n    }\n\n    const attributeTable = getDebugTableForVertexArray({\n      vertexArray,\n      header: `${this.id} attributes`,\n      attributes: this._attributes\n    });\n\n    const {table: uniformTable, unusedTable, unusedCount} = getDebugTableForUniforms({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms)\n    });\n\n    // log missing uniforms\n    const {table: missingTable, count: missingCount} = getDebugTableForUniforms({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms),\n      undefinedOnly: true\n    });\n\n    if (missingCount > 0) {\n      log.log('MISSING UNIFORMS', Object.keys(missingTable))();\n      // log.table(priority, missingTable)();\n    }\n    if (unusedCount > 0) {\n      log.log('UNUSED UNIFORMS', Object.keys(unusedTable))();\n      // log.log(priority, 'Unused uniforms ', unusedTable)();\n    }\n\n    const configTable = getDebugTableForProgramConfiguration(this.vertexArray.configuration);\n\n    log.table(priority, attributeTable)();\n\n    log.table(priority, uniformTable)();\n\n    log.table(priority + 1, configTable)();\n\n    logModel(this, uniforms);\n\n    if (framebuffer) {\n      framebuffer.log({priority: LOG_DRAW_PRIORITY, message: `Rendered to ${framebuffer.id}`});\n    }\n\n    log.groupEnd(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`)();\n  }\n}\n"],"file":"base-model.js"}