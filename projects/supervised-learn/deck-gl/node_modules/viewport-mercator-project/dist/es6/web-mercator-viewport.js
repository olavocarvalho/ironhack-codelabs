import Viewport from './viewport';
import { zoomToScale, pixelsToWorld, lngLatToWorld, worldToLngLat, getProjectionMatrix, getDistanceScales, getViewMatrix } from './web-mercator-utils';
import fitBounds from './fit-bounds';
import * as vec2 from 'gl-matrix/vec2';
export default class WebMercatorViewport extends Viewport {
  constructor() {
    var {
      width,
      height,
      latitude = 0,
      longitude = 0,
      zoom = 0,
      pitch = 0,
      bearing = 0,
      altitude = 1.5,
      nearZMultiplier,
      farZMultiplier
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    width = width || 1;
    height = height || 1;
    var scale = zoomToScale(zoom);
    altitude = Math.max(0.75, altitude);
    var center = lngLatToWorld([longitude, latitude], scale);
    center[2] = 0;
    var projectionMatrix = getProjectionMatrix({
      width,
      height,
      pitch,
      bearing,
      altitude,
      nearZMultiplier: nearZMultiplier || 1 / height,
      farZMultiplier: farZMultiplier || 1.01
    });
    var viewMatrix = getViewMatrix({
      height,
      center,
      pitch,
      bearing,
      altitude,
      flipY: true
    });
    super({
      width,
      height,
      viewMatrix,
      projectionMatrix
    });
    this.latitude = latitude;
    this.longitude = longitude;
    this.zoom = zoom;
    this.pitch = pitch;
    this.bearing = bearing;
    this.altitude = altitude;
    this.scale = scale;
    this.center = center;
    this.pixelsPerMeter = getDistanceScales(this).pixelsPerMeter[2];
    Object.freeze(this);
  }

  projectFlat(lngLat) {
    var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;
    return lngLatToWorld(lngLat, scale);
  }

  unprojectFlat(xy) {
    var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scale;
    return worldToLngLat(xy, scale);
  }

  getMapCenterByLngLatPosition(_ref) {
    var {
      lngLat,
      pos
    } = _ref;
    var fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);
    var toLocation = lngLatToWorld(lngLat, this.scale);
    var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));
    var newCenter = vec2.add([], this.center, translate);
    return worldToLngLat(newCenter, this.scale);
  }

  getLocationAtPoint(_ref2) {
    var {
      lngLat,
      pos
    } = _ref2;
    return this.getMapCenterByLngLatPosition({
      lngLat,
      pos
    });
  }

  fitBounds(bounds) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var {
      width,
      height
    } = this;
    var {
      longitude,
      latitude,
      zoom
    } = fitBounds(Object.assign({
      width,
      height,
      bounds
    }, options));
    return new WebMercatorViewport({
      width,
      height,
      longitude,
      latitude,
      zoom
    });
  }

}
//# sourceMappingURL=web-mercator-viewport.js.map