{"version":3,"sources":["../../../src/lifecycle/props.js"],"names":["validateProps","props","propTypes","getPropTypes","propName","propType","validate","Error","diffProps","oldProps","propsChangedReason","compareProps","newProps","ignoreProps","data","updateTriggers","extensions","dataChangedReason","diffDataProps","updateTriggersChangedReason","diffUpdateTriggers","dataChanged","propsChanged","updateTriggersChanged","extensionsChanged","diffExtensions","triggerName","undefined","Object","keys","key","changed","comparePropValues","hasOwnProperty","call","newProp","oldProp","equal","equals","dataComparator","_dataDiff","diffReason","diffUpdateTrigger","all","triggerChanged","reason","oldExtensions","length","i","newTriggers","oldTriggers","layer","_component","LayerType","constructor","_propTypes"],"mappings":"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","sourcesContent":["import assert from '../utils/assert';\n\nexport function validateProps(props) {\n  const propTypes = getPropTypes(props);\n\n  for (const propName in propTypes) {\n    const propType = propTypes[propName];\n    const {validate} = propType;\n    if (validate && !validate(props[propName], propType)) {\n      throw new Error(`Invalid prop ${propName}: ${props[propName]}`);\n    }\n  }\n}\n\n// Returns an object with \"change flags\", either false or strings indicating reason for change\nexport function diffProps(props, oldProps) {\n  // First check if any props have changed (ignore props that will be examined separately)\n  const propsChangedReason = compareProps({\n    newProps: props,\n    oldProps,\n    propTypes: getPropTypes(props),\n    ignoreProps: {data: null, updateTriggers: null, extensions: null}\n  });\n\n  // Now check if any data related props have changed\n  const dataChangedReason = diffDataProps(props, oldProps);\n\n  // Check update triggers to determine if any attributes need regeneration\n  // Note - if data has changed, all attributes will need regeneration, so skip this step\n  let updateTriggersChangedReason = false;\n  if (!dataChangedReason) {\n    updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);\n  }\n\n  return {\n    dataChanged: dataChangedReason,\n    propsChanged: propsChangedReason,\n    updateTriggersChanged: updateTriggersChangedReason,\n    extensionsChanged: diffExtensions(props, oldProps)\n  };\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * @param {Object} opt.oldProps - object with old key/value pairs\n * @param {Object} opt.newProps - object with new key/value pairs\n * @param {Object} opt.ignoreProps={} - object, keys that should not be compared\n * @returns {null|String} - null when values of all keys are strictly equal.\n *   if unequal, returns a string explaining what changed.\n */\n/* eslint-disable max-statements, max-depth, complexity */\n/*\n * Note: for better performance, this function assumes that both oldProps and newProps\n   inherit the same prototype (defaultProps). That is, if neither object contains own\n   property <key>, assume `oldProps.<key>` and `newProps.<key>` are equal.\n */\nexport function compareProps({\n  newProps,\n  oldProps,\n  ignoreProps = {},\n  propTypes = {},\n  triggerName = 'props'\n} = {}) {\n  assert(oldProps !== undefined && newProps !== undefined, 'compareProps args');\n\n  // shallow equality => deep equality\n  if (oldProps === newProps) {\n    return null;\n  }\n\n  // TODO - do we need these checks? Should never happen...\n  if (typeof newProps !== 'object' || newProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  if (typeof oldProps !== 'object' || oldProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  // Compare explicitly defined new props against old/default values\n  for (const key of Object.keys(newProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in oldProps)) {\n        return `${triggerName}.${key} added`;\n      }\n      const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n      if (changed) {\n        return `${triggerName}.${key} ${changed}`;\n      }\n    }\n  }\n\n  // Test if any old props have been dropped\n  for (const key of Object.keys(oldProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in newProps)) {\n        return `${triggerName}.${key} dropped`;\n      }\n      if (!Object.hasOwnProperty.call(newProps, key)) {\n        // Compare dropped old prop against default value\n        const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n        if (changed) {\n          return `${triggerName}.${key} ${changed}`;\n        }\n      }\n    }\n  }\n\n  return null;\n}\n/* eslint-enable max-statements, max-depth, complexity */\n\n// HELPERS\nfunction comparePropValues(newProp, oldProp, propType) {\n  // If prop type has an equal function, invoke it\n  let equal = propType && propType.equal;\n  if (equal && !equal(newProp, oldProp, propType)) {\n    return 'changed deeply';\n  }\n\n  if (!equal) {\n    // If object has an equals function, invoke it\n    equal = newProp && oldProp && newProp.equals;\n    if (equal && !equal.call(newProp, oldProp)) {\n      return 'changed deeply';\n    }\n  }\n\n  if (!equal && oldProp !== newProp) {\n    return 'changed shallowly';\n  }\n\n  return null;\n}\n\n// The comparison of the data prop requires special handling\n// the dataComparator should be used if supplied\nfunction diffDataProps(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  let dataChanged = null;\n  // Support optional app defined comparison of data\n  const {dataComparator, _dataDiff} = props;\n  if (dataComparator) {\n    if (!dataComparator(props.data, oldProps.data)) {\n      dataChanged = 'Data comparator detected a change';\n    }\n    // Otherwise, do a shallow equal on props\n  } else if (props.data !== oldProps.data) {\n    dataChanged = 'A new data container was supplied';\n  }\n  if (dataChanged && _dataDiff) {\n    dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;\n  }\n\n  return dataChanged;\n}\n\n// Checks if any update triggers have changed\n// also calls callback to invalidate attributes accordingly.\nfunction diffUpdateTriggers(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  // If the 'all' updateTrigger fires, ignore testing others\n  if ('all' in props.updateTriggers) {\n    const diffReason = diffUpdateTrigger(props, oldProps, 'all');\n    if (diffReason) {\n      return {all: true};\n    }\n  }\n\n  const triggerChanged = {};\n  let reason = false;\n  // If the 'all' updateTrigger didn't fire, need to check all others\n  for (const triggerName in props.updateTriggers) {\n    if (triggerName !== 'all') {\n      const diffReason = diffUpdateTrigger(props, oldProps, triggerName);\n      if (diffReason) {\n        triggerChanged[triggerName] = true;\n        reason = triggerChanged;\n      }\n    }\n  }\n\n  return reason;\n}\n\n// Returns true if any extensions have changed\nfunction diffExtensions(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  const oldExtensions = oldProps.extensions;\n  const {extensions} = props;\n\n  if (extensions === oldExtensions) {\n    return false;\n  }\n  if (extensions.length !== oldExtensions.length) {\n    return true;\n  }\n  for (let i = 0; i < extensions.length; i++) {\n    if (!extensions[i].equals(oldExtensions[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction diffUpdateTrigger(props, oldProps, triggerName) {\n  let newTriggers = props.updateTriggers[triggerName];\n  newTriggers = newTriggers === undefined || newTriggers === null ? {} : newTriggers;\n  let oldTriggers = oldProps.updateTriggers[triggerName];\n  oldTriggers = oldTriggers === undefined || oldTriggers === null ? {} : oldTriggers;\n  const diffReason = compareProps({\n    oldProps: oldTriggers,\n    newProps: newTriggers,\n    triggerName\n  });\n  return diffReason;\n}\n\nfunction getPropTypes(props) {\n  const layer = props._component;\n  const LayerType = layer && layer.constructor;\n  return LayerType ? LayerType._propTypes : {};\n}\n"],"file":"props.js"}