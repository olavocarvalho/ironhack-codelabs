{"version":3,"sources":["../../../src/lib/attribute.js"],"names":["Buffer","assert","createIterable","fillArray","range","log","BaseAttribute","typedArrayManager","DEFAULT_STATE","isExternalBuffer","lastExternalBuffer","allocatedValue","needsUpdate","needsRedraw","updateRanges","FULL","Attribute","constructor","gl","opts","transition","noAlloc","update","accessor","bufferLayout","defaultValue","Array","isArray","shaderAttributes","hasShaderAttributes","shaderAttributeName","shaderAttribute","Object","assign","offset","stride","normalized","id","constant","isIndexed","elements","size","value","divisor","instanced","buffer","getBuffer","userData","_standardAccessor","seal","_validateAttributeUpdaters","layout","delete","release","clearChangedFlags","getUpdateTriggers","concat","getAccessor","getShaderAttributes","supportsTransition","getTransitionSetting","settings","find","a","Number","isFinite","duration","setNeedsUpdate","reason","dataRange","startRow","endRow","Infinity","add","clearNeedsUpdate","EMPTY","setNeedsRedraw","allocate","numInstances","state","allocCount","Math","max","ArrayType","glArrayFromType","type","oldValue","shouldCopy","padding","elementOffset","copy","byteLength","reallocate","subData","updateBuffer","data","props","context","updated","call","startOffset","_getVertexOffset","endOffset","length","subarray","BYTES_PER_ELEMENT","_checkAttributeArray","_updateShaderAttributes","setGenericValue","undefined","_normalizeValue","hasChanged","_areValuesEqual","setExternalBuffer","ArrayBuffer","isView","warn","name","row","index","geometrySize","out","start","value1","value2","i","attribute","accessorFunc","iterable","objectInfo","object","objectValue","target","numVertices","source","count","hasUpdater","Error","valid","glType","clamped","Float32Array","Uint16Array","Uint32Array","Uint8ClampedArray","Uint8Array","Int8Array","Int16Array","Int32Array"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {Buffer} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport {createIterable} from '../utils/iterable-utils';\nimport {fillArray} from '../utils/flatten';\nimport * as range from '../utils/range';\nimport log from '../utils/log';\nimport BaseAttribute from './base-attribute';\nimport typedArrayManager from '../utils/typed-array-manager';\n\nconst DEFAULT_STATE = {\n  isExternalBuffer: false,\n  lastExternalBuffer: null,\n  allocatedValue: null,\n  needsUpdate: true,\n  needsRedraw: false,\n  updateRanges: range.FULL\n};\n\nexport default class Attribute extends BaseAttribute {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null,\n      bufferLayout = null\n    } = opts;\n\n    let {defaultValue = [0, 0, 0, 0]} = opts;\n    defaultValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n\n    this.shaderAttributes = {};\n    this.hasShaderAttributes = false;\n\n    if (opts.shaderAttributes) {\n      const shaderAttributes = opts.shaderAttributes;\n      for (const shaderAttributeName in shaderAttributes) {\n        const shaderAttribute = shaderAttributes[shaderAttributeName];\n\n        // Initialize the attribute descriptor, with WebGL and metadata fields\n        this.shaderAttributes[shaderAttributeName] = new Attribute(\n          this.gl,\n          Object.assign(\n            {\n              offset: this.offset,\n              stride: this.stride,\n              normalized: this.normalized\n            },\n            shaderAttribute,\n            {\n              id: shaderAttributeName,\n              // Luma fields\n              constant: shaderAttribute.constant || false,\n              isIndexed: shaderAttribute.isIndexed || shaderAttribute.elements,\n              size: (shaderAttribute.elements && 1) || shaderAttribute.size || this.size,\n              value: shaderAttribute.value || null,\n              divisor: shaderAttribute.instanced || shaderAttribute.divisor || this.divisor,\n              buffer: this.getBuffer(),\n              noAlloc: true\n            }\n          )\n        );\n\n        this.hasShaderAttributes = true;\n      }\n    }\n\n    Object.assign(this.userData, DEFAULT_STATE, opts, {\n      transition,\n      noAlloc,\n      update: update || (accessor && this._standardAccessor),\n      accessor,\n      defaultValue,\n      bufferLayout\n    });\n\n    Object.seal(this.userData);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get bufferLayout() {\n    return this.userData.bufferLayout;\n  }\n\n  set bufferLayout(layout) {\n    this.userData.bufferLayout = layout;\n  }\n\n  delete() {\n    super.delete();\n    typedArrayManager.release(this.userData.allocatedValue);\n  }\n\n  needsUpdate() {\n    return this.userData.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.userData.needsRedraw;\n    this.userData.needsRedraw = this.userData.needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.userData;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat((typeof accessor !== 'function' && accessor) || []);\n  }\n\n  getAccessor() {\n    return this.userData.accessor;\n  }\n\n  getShaderAttributes() {\n    const shaderAttributes = {};\n    if (this.hasShaderAttributes) {\n      Object.assign(shaderAttributes, this.shaderAttributes);\n    } else {\n      shaderAttributes[this.id] = this;\n    }\n\n    return shaderAttributes;\n  }\n\n  supportsTransition() {\n    return this.userData.transition;\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts) {\n    const {transition, accessor} = this.userData;\n    if (!transition) {\n      return null;\n    }\n    let settings = Array.isArray(accessor) ? opts[accessor.find(a => opts[a])] : opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    if (Number.isFinite(settings)) {\n      settings = {duration: settings};\n    }\n\n    if (settings && settings.duration > 0) {\n      return Object.assign({}, transition, settings);\n    }\n\n    return null;\n  }\n\n  setNeedsUpdate(reason = this.id, dataRange) {\n    this.userData.needsUpdate = this.userData.needsUpdate || reason;\n    if (dataRange) {\n      const {startRow = 0, endRow = Infinity} = dataRange;\n      this.userData.updateRanges = range.add(this.userData.updateRanges, [startRow, endRow]);\n    } else {\n      this.userData.updateRanges = range.FULL;\n    }\n  }\n\n  clearNeedsUpdate() {\n    this.userData.needsUpdate = false;\n    this.userData.updateRanges = range.EMPTY;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.userData.needsRedraw = this.userData.needsRedraw || reason;\n  }\n\n  allocate(numInstances) {\n    const state = this.userData;\n\n    if (state.isExternalBuffer || state.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    if (state.update) {\n      assert(Number.isFinite(numInstances));\n      // Allocate at least one element to ensure a valid buffer\n      const allocCount = Math.max(numInstances, 1);\n      const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n      const oldValue = state.allocatedValue;\n      const shouldCopy = state.updateRanges !== range.FULL;\n\n      this.constant = false;\n      this.value = typedArrayManager.allocate(oldValue, allocCount, {\n        size: this.size,\n        type: ArrayType,\n        padding: this.elementOffset,\n        copy: shouldCopy\n      });\n\n      if (this.buffer && this.buffer.byteLength < this.value.byteLength) {\n        this.buffer.reallocate(this.value.byteLength);\n\n        if (shouldCopy && oldValue) {\n          // Upload the full existing attribute value to the GPU, so that updateBuffer\n          // can choose to only update a partial range.\n          // TODO - copy old buffer to new buffer on the GPU\n          this.buffer.subData(oldValue);\n        }\n      }\n\n      state.allocatedValue = this.value;\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, bufferLayout, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const state = this.userData;\n\n    const {update, updateRanges, noAlloc} = state;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      for (const [startRow, endRow] of updateRanges) {\n        update.call(context, this, {data, startRow, endRow, props, numInstances, bufferLayout});\n      }\n      if (this.constant || !this.buffer || this.buffer.byteLength < this.value.byteLength) {\n        // call base clas `update` method to upload value to GPU\n        this.update({\n          value: this.value,\n          constant: this.constant\n        });\n      } else {\n        for (const [startRow, endRow] of updateRanges) {\n          const startOffset = Number.isFinite(startRow)\n            ? this._getVertexOffset(startRow, this.bufferLayout)\n            : 0;\n          const endOffset = Number.isFinite(endRow)\n            ? this._getVertexOffset(endRow, this.bufferLayout)\n            : noAlloc || !Number.isFinite(numInstances)\n              ? this.value.length\n              : numInstances * this.size;\n\n          // Only update the changed part of the attribute\n          this.buffer.subData({\n            data: this.value.subarray(startOffset, endOffset),\n            offset: startOffset * this.value.BYTES_PER_ELEMENT\n          });\n        }\n      }\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this._updateShaderAttributes();\n\n    this.clearNeedsUpdate();\n    state.needsRedraw = true;\n\n    return updated;\n  }\n\n  update(props) {\n    super.update(props);\n    this._updateShaderAttributes();\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setGenericValue(value) {\n    const state = this.userData;\n\n    if (value === undefined || typeof value === 'function') {\n      // ignore if this attribute has no accessor\n      // ignore if accessor is function, will be used in updateBuffer\n      state.isExternalBuffer = false;\n      return false;\n    }\n\n    value = this._normalizeValue(value);\n    const hasChanged = !this.constant || !this._areValuesEqual(value, this.value);\n\n    if (hasChanged) {\n      this.update({constant: true, value});\n    }\n    state.needsRedraw = state.needsUpdate || hasChanged;\n    this.clearNeedsUpdate();\n    state.isExternalBuffer = true;\n    this._updateShaderAttributes();\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  setExternalBuffer(buffer) {\n    const state = this.userData;\n\n    if (!buffer) {\n      state.isExternalBuffer = false;\n      state.lastExternalBuffer = null;\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n\n    if (state.lastExternalBuffer === buffer) {\n      return true;\n    }\n    state.isExternalBuffer = true;\n    state.lastExternalBuffer = buffer;\n\n    let opts;\n    if (ArrayBuffer.isView(buffer)) {\n      opts = {constant: false, value: buffer};\n    } else if (buffer instanceof Buffer) {\n      opts = {constant: false, buffer};\n    } else {\n      opts = Object.assign({constant: false}, buffer);\n    }\n\n    if (opts.value) {\n      const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n      if (!(opts.value instanceof ArrayType)) {\n        log.warn(`Attribute prop ${this.id} is casted to ${ArrayType.name}`)();\n        // Cast to proper type\n        opts.value = new ArrayType(opts.value);\n      }\n    }\n\n    this.update(opts);\n    state.needsRedraw = true;\n\n    this._updateShaderAttributes();\n    return true;\n  }\n\n  // PRIVATE HELPER METHODS\n  _getVertexOffset(row, bufferLayout) {\n    let offset = this.elementOffset;\n    if (bufferLayout) {\n      let index = 0;\n      for (const geometrySize of bufferLayout) {\n        if (index >= row) {\n          break;\n        }\n        offset += geometrySize * this.size;\n        index++;\n      }\n      return offset;\n    }\n    return offset + row * this.size;\n  }\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, out = [], start = 0) {\n    const {defaultValue} = this.userData;\n\n    if (!Array.isArray(value) && !ArrayBuffer.isView(value)) {\n      out[start] = Number.isFinite(value) ? value : defaultValue[0];\n      return out;\n    }\n\n    /* eslint-disable no-fallthrough, default-case */\n    switch (this.size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2, size = this.size) {\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _standardAccessor(attribute, {data, startRow, endRow, props, numInstances, bufferLayout}) {\n    const state = attribute.userData;\n\n    const {accessor} = state;\n    const {value, size} = attribute;\n    const accessorFunc = typeof accessor === 'function' ? accessor : props[accessor];\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = attribute._getVertexOffset(startRow, bufferLayout);\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n\n      const objectValue = accessorFunc(object, objectInfo);\n\n      if (bufferLayout) {\n        attribute._normalizeValue(objectValue, objectInfo.target);\n        const numVertices = bufferLayout[objectInfo.index];\n        fillArray({\n          target: attribute.value,\n          source: objectInfo.target,\n          start: i,\n          count: numVertices\n        });\n        i += numVertices * size;\n      } else {\n        attribute._normalizeValue(objectValue, value, i);\n        i += size;\n      }\n    }\n    attribute.constant = false;\n    attribute.bufferLayout = bufferLayout;\n  }\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const state = this.userData;\n\n    // Check that 'update' is a valid function\n    const hasUpdater = state.noAlloc || typeof state.update === 'function';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  _checkAttributeArray() {\n    const {value} = this;\n    if (value && value.length >= 4) {\n      const valid =\n        Number.isFinite(value[0]) &&\n        Number.isFinite(value[1]) &&\n        Number.isFinite(value[2]) &&\n        Number.isFinite(value[3]);\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n\n  _updateShaderAttributes() {\n    const shaderAttributes = this.shaderAttributes;\n    for (const shaderAttributeName in shaderAttributes) {\n      const shaderAttribute = shaderAttributes[shaderAttributeName];\n      shaderAttribute.update({\n        buffer: this.getBuffer(),\n        value: this.value,\n        constant: this.constant\n      });\n    }\n  }\n}\n\n/* eslint-disable complexity */\nexport function glArrayFromType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce type from array');\n  }\n}\n/* eslint-enable complexity */\n"],"file":"attribute.js"}