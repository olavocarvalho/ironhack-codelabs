{"version":3,"sources":["../../../src/lib/layer.js"],"names":["COORDINATE_SYSTEM","AttributeManager","removeLayerInSeer","diffProps","validateProps","count","log","withParameters","assert","mergeShaders","projectPosition","getWorldPosition","Component","LayerState","worldToPixels","load","LOG_PRIORITY_UPDATE","EMPTY_ARRAY","Object","freeze","pickingColorCache","Uint8ClampedArray","defaultProps","data","type","value","async","dataComparator","_dataDiff","__diff","compare","optional","dataTransform","onDataLoad","fetch","url","layer","getLoadOptions","updateTriggers","numInstances","undefined","visible","pickable","opacity","min","max","onHover","onClick","onDragStart","onDrag","onDragEnd","coordinateSystem","LNGLAT","coordinateOrigin","modelMatrix","wrapLongitude","positionFormat","colorFormat","parameters","uniforms","extensions","framebuffer","animation","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","Layer","toString","className","constructor","layerName","name","props","id","setState","updateObject","setChangeFlags","stateChanged","assign","state","setNeedsRedraw","redraw","internalState","needsRedraw","setLayerNeedsUpdate","context","layerManager","setNeedsUpdate","String","getNeedsRedraw","opts","clearRedrawFlags","_getNeedsRedraw","needsUpdate","shouldUpdateState","_getUpdateParams","isPickable","getModels","models","model","getSingleModel","getAttributeManager","attributeManager","getCurrentLayer","loadOptions","getFirstObject","object","project","xyz","viewport","worldPosition","pixelProjectionMatrix","x","y","z","length","unproject","xy","Array","isArray","projectFlat","lngLat","deprecated","unprojectFlat","use64bitPositions","IDENTITY","screenToDevicePixels","screenPixels","devicePixelRatio","window","info","pickingEvent","nullPickingColor","encodePickingColor","i","target","decodePickingColor","color","Uint8Array","i1","i2","i3","index","initializeState","Error","getShaders","shaders","extension","call","oldProps","changeFlags","propsOrDataChanged","updateState","dataChanged","dataRange","invalidateAll","finalizeState","delete","finalize","draw","getPickingInfo","mode","invalidateAttribute","diffReason","invalidate","updateAttributes","changedAttributes","_setModelAttributes","_updateAttributes","getNumInstances","bufferLayout","getBufferLayout","update","transitions","buffers","ignoreUnknownAttributes","getChangedAttributes","clearChangedFlags","updateTransition","time","calculateInstancePickingColors","attribute","size","cacheSize","newPickingColorCache","set","pickingColor","subarray","shaderAttributes","excludeAttributes","userData","attributeName","getShaderAttributes","setAttributes","_clearInstancePickingColor","instancePickingColors","attributes","_clearPickingColor","pickingColors","clearPickingColor","copyPickingColors","colors","restorePickingColors","_initialize","_initState","propsChanged","viewportChanged","extensionsChanged","_updateState","program","_update","stateNeedsUpdate","updateParams","gl","error","isComposite","_renderLayers","_updateBaseUniforms","setInstanceCount","clearChangeFlags","resetOldProps","_finalize","drawLayer","moduleParameters","picking_uActive","setModuleParameters","animationProps","_setAnimationProps","offsets","polygonOffset","pickLayer","getChangeFlags","flags","updateTriggersChanged","keys","join","somethingChanged","printChangeFlags","newProps","key","_activeUpdateTrigger","updateModuleSettings","getOldProps","attributeManagerNeedsRedraw","_getAttributeManager","stats","addInstanced","onAsyncPropUpdated","_onAsyncPropUpdated","bind","setAsyncProps","_transferState","oldLayer","component","propName","Math","pow","setUniforms","uniformMap","use64bitProjection","removed"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable react/no-direct-mutation-state */\n/* global window */\nimport {COORDINATE_SYSTEM} from './constants';\nimport AttributeManager from './attribute-manager';\nimport {removeLayerInSeer} from './seer-integration';\nimport {diffProps, validateProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport GL from '@luma.gl/constants';\nimport {withParameters} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport {mergeShaders} from '../utils/shader';\nimport {projectPosition, getWorldPosition} from '../shaderlib/project/project-functions';\n\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\n\nimport {worldToPixels} from 'viewport-mercator-project';\n\nimport {load} from '@loaders.gl/core';\n\nconst LOG_PRIORITY_UPDATE = 1;\n\nconst EMPTY_ARRAY = Object.freeze([]);\n\nlet pickingColorCache = new Uint8ClampedArray(0);\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  data: {type: 'data', value: EMPTY_ARRAY, async: true},\n  dataComparator: null,\n  _dataDiff: {type: 'function', value: data => data && data.__diff, compare: false, optional: true},\n  dataTransform: {type: 'function', value: null, compare: false, optional: true},\n  onDataLoad: {type: 'function', value: null, compare: false, optional: true},\n  fetch: {\n    type: 'function',\n    value: (url, {layer}) => load(url, layer.getLoadOptions()),\n    compare: false\n  },\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n  numInstances: undefined,\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 0.8},\n\n  onHover: {type: 'function', value: null, compare: false, optional: true},\n  onClick: {type: 'function', value: null, compare: false, optional: true},\n  onDragStart: {type: 'function', value: null, compare: false, optional: true},\n  onDrag: {type: 'function', value: null, compare: false, optional: true},\n  onDragEnd: {type: 'function', value: null, compare: false, optional: true},\n\n  coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n  coordinateOrigin: {type: 'array', value: [0, 0, 0], compare: true},\n  modelMatrix: {type: 'array', value: null, compare: true, optional: true},\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n\n  parameters: {},\n  uniforms: {},\n  extensions: [],\n  framebuffer: null,\n\n  animation: null, // Passed prop animation functions to evaluate props\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: {\n    type: 'function',\n    value: ({layerIndex}) => [0, -layerIndex * 100],\n    compare: false\n  },\n\n  // Selection/Highlighting\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: {type: 'color', value: [0, 0, 128, 128]}\n};\n\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    this.setChangeFlags({stateChanged: true});\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  // TODO - Need to align with existing needsUpdate before uncommenting\n  // For now async props will call layerManager directly\n  setLayerNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n  }\n\n  // Checks state of attributes and model\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    return this._getNeedsRedraw(opts);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return this.shouldUpdateState(this._getUpdateParams());\n    // End lifecycle method\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  // TODO - Gradually phase out, does not support multi model layers\n  getSingleModel() {\n    return this.state && this.state.model;\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Returns the default parse options for async props\n  getLoadOptions() {\n    return this.props.loadOptions;\n  }\n\n  // Use iteration (the only required capability on data) to get first element\n  // deprecated since we are effectively only supporting Arrays\n  getFirstObject() {\n    const {data} = this.props;\n    for (const object of data) {\n      return object;\n    }\n    return null;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // From the current layer's coordinate system to screen\n  project(xyz) {\n    const {viewport} = this.context;\n    const worldPosition = getWorldPosition(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n    const [x, y, z] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);\n    return xyz.length === 2 ? [x, y] : [x, y, z];\n  }\n\n  // Note: this does not reverse `project`.\n  // Always unprojects to the viewport's coordinate system\n  unproject(xy) {\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unproject(xy);\n  }\n\n  projectPosition(xyz) {\n    assert(Array.isArray(xyz));\n\n    return projectPosition(xyz, {\n      viewport: this.context.viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n  }\n\n  // DEPRECATE: This does not handle offset modes\n  projectFlat(lngLat) {\n    log.deprecated('layer.projectFlat', 'layer.projectPosition')();\n    const {viewport} = this.context;\n    assert(Array.isArray(lngLat));\n    return viewport.projectFlat(lngLat);\n  }\n\n  // DEPRECATE: This is not meaningful in offset modes\n  unprojectFlat(xy) {\n    log.deprecated('layer.unprojectFlat')();\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unprojectFlat(xy);\n  }\n\n  use64bitPositions() {\n    return (\n      this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n      this.props.coordinateSystem === COORDINATE_SYSTEM.IDENTITY\n    );\n  }\n\n  // TODO - needs to refer to context for devicePixels setting\n  screenToDevicePixels(screenPixels) {\n    log.deprecated('screenToDevicePixels', 'DeckGL prop useDevicePixels for conversion')();\n    const devicePixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n    return screenPixels * devicePixelRatio;\n  }\n\n  // Event handling\n  onHover(info, pickingEvent) {\n    if (this.props.onHover) {\n      return this.props.onHover(info, pickingEvent);\n    }\n    return false;\n  }\n\n  onClick(info, pickingEvent) {\n    if (this.props.onClick) {\n      return this.props.onClick(info, pickingEvent);\n    }\n    return false;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i, target = []) {\n    assert(i < 16777215, 'index out of picking color range');\n    target[0] = (i + 1) & 255;\n    target[1] = ((i + 1) >> 8) & 255;\n    target[2] = (((i + 1) >> 8) >> 8) & 255;\n    return target;\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  getShaders(shaders) {\n    for (const extension of this.props.extensions) {\n      shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n    }\n    return shaders;\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      const {dataChanged} = changeFlags;\n      if (Array.isArray(dataChanged)) {\n        // is partial update\n        for (const dataRange of dataChanged) {\n          attributeManager.invalidateAll(dataRange);\n        }\n      } else {\n        attributeManager.invalidateAll();\n      }\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.finalize();\n    }\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      log.log(LOG_PRIORITY_UPDATE, `updateTriggers invalidating all attributes: ${diffReason}`)();\n      attributeManager.invalidateAll();\n    } else {\n      log.log(\n        LOG_PRIORITY_UPDATE,\n        `updateTriggers invalidating attribute ${name}: ${diffReason}`\n      )();\n      attributeManager.invalidate(name);\n    }\n  }\n\n  updateAttributes(changedAttributes) {\n    for (const model of this.getModels()) {\n      this._setModelAttributes(model, changedAttributes);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  _updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n    const bufferLayout = this.getBufferLayout(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      bufferLayout,\n      props,\n      transitions: props.transitions,\n      buffers: props,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n    this.updateAttributes(changedAttributes);\n  }\n\n  // Update attribute transition\n  updateTransition() {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.updateTransition(this.context.time);\n    }\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    const {value, size} = attribute;\n\n    if (value[0] === 1) {\n      // This can happen when data has changed, but the attribute value typed array\n      // has sufficient size and does not need to be re-allocated.\n      // This attribute is already populated, we do not have to recalculate it\n      return;\n    }\n\n    // calculateInstancePickingColors always generates the same sequence.\n    // pickingColorCache saves the largest generated sequence for reuse\n    const cacheSize = pickingColorCache.length / size;\n\n    if (cacheSize < numInstances) {\n      // If the attribute is larger than the cache, resize the cache and populate the missing chunk\n      const newPickingColorCache = new Uint8ClampedArray(numInstances * size);\n      newPickingColorCache.set(pickingColorCache);\n      const pickingColor = [];\n\n      for (let i = cacheSize; i < numInstances; i++) {\n        this.encodePickingColor(i, pickingColor);\n        newPickingColorCache[i * size + 0] = pickingColor[0];\n        newPickingColorCache[i * size + 1] = pickingColor[1];\n        newPickingColorCache[i * size + 2] = pickingColor[2];\n      }\n\n      pickingColorCache = newPickingColorCache;\n    }\n\n    // Copy the last calculated picking color sequence into the attribute\n    value.set(\n      numInstances < cacheSize\n        ? pickingColorCache.subarray(0, numInstances * size)\n        : pickingColorCache\n    );\n  }\n\n  _setModelAttributes(model, changedAttributes) {\n    const shaderAttributes = {};\n    const excludeAttributes = model.userData.excludeAttributes || {};\n    for (const attributeName in changedAttributes) {\n      if (!excludeAttributes[attributeName]) {\n        Object.assign(shaderAttributes, changedAttributes[attributeName].getShaderAttributes());\n      }\n    }\n\n    model.setAttributes(shaderAttributes);\n  }\n\n  // Sets the specified instanced picking color to null picking color. Used for multi picking.\n  _clearInstancePickingColor(color) {\n    const {instancePickingColors} = this.getAttributeManager().attributes;\n    const {value, size} = instancePickingColors;\n\n    const i = this.decodePickingColor(color);\n    value[i * size + 0] = 0;\n    value[i * size + 1] = 0;\n    value[i * size + 2] = 0;\n\n    // TODO: Optimize this to use sub-buffer update!\n    instancePickingColors.update({value});\n  }\n\n  // Sets all occurrences of the specified picking color to null picking color. Used for multi picking.\n  _clearPickingColor(color) {\n    const {pickingColors} = this.getAttributeManager().attributes;\n    const {value} = pickingColors;\n\n    for (let i = 0; i < value.length; i += 3) {\n      if (value[i + 0] === color[0] && value[i + 1] === color[1] && value[i + 2] === color[2]) {\n        value[i + 0] = 0;\n        value[i + 1] = 0;\n        value[i + 2] = 0;\n      }\n    }\n\n    // TODO: Optimize this to use sub-buffer update!\n    pickingColors.update({value});\n  }\n\n  // This method figures out if we use instance colors or not\n  // and calls _clearInstancePickingColor or _clearPickingColor\n  clearPickingColor(color) {\n    if (this.getAttributeManager().attributes.pickingColors) {\n      this._clearPickingColor(color);\n    } else {\n      this._clearInstancePickingColor(color);\n    }\n  }\n\n  copyPickingColors() {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    return new Uint8ClampedArray(colors.value);\n  }\n\n  restorePickingColors(value) {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    colors.update({value});\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    const {data} = this.props;\n    return count(data);\n  }\n\n  // Buffer layout describes how many attribute values are packed for each data object\n  // The default (null) is one value each object.\n  // Some data formats (e.g. paths, polygons) have various length. Their buffer layout\n  //  is in the form of [L0, L1, L2, ...]\n  getBufferLayout(props) {\n    props = props || this.props;\n\n    // First Check if bufferLayout is provided as an explicit value\n    if (props.bufferLayout !== undefined) {\n      return props.bufferLayout;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.bufferLayout !== undefined) {\n      return this.state.bufferLayout;\n    }\n\n    return null;\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // Initialize extensions\n    for (const extension of this.props.extensions) {\n      extension.initializeState.call(this, this.context, extension);\n    }\n    // End subclass lifecycle methods\n\n    // TODO deprecated, for backwards compatibility with older layers\n    // in case layer resets state\n    this.state.attributeManager = this.getAttributeManager();\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({\n      dataChanged: true,\n      propsChanged: true,\n      viewportChanged: true,\n      extensionsChanged: true\n    });\n\n    this._updateState();\n\n    const model = this.getSingleModel();\n    if (model) {\n      model.id = this.props.id;\n      model.program.id = `${this.props.id}-program`;\n    }\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n  /* eslint-enable max-statements */\n\n  // Common code for _initialize and _update\n  _updateState() {\n    const updateParams = this._getUpdateParams();\n\n    // Safely call subclass lifecycle methods\n    if (this.context.gl) {\n      this.updateState(updateParams);\n    } else {\n      try {\n        this.updateState(updateParams);\n      } catch (error) {\n        // ignore error if gl context is missing\n      }\n    }\n    // Execute extension updates\n    for (const extension of this.props.extensions) {\n      extension.updateState.call(this, updateParams, extension);\n    }\n    // End subclass lifecycle methods\n\n    if (this.isComposite) {\n      // Render or update previously rendered sublayers\n      this._renderLayers(updateParams);\n    } else {\n      this.setNeedsRedraw();\n      // Add any subclass attributes\n      this._updateAttributes(this.props);\n      this._updateBaseUniforms();\n\n      // Note: Automatic instance count update only works for single layers\n      if (this.state.model) {\n        this.state.model.setInstanceCount(this.getNumInstances());\n      }\n    }\n\n    this.clearChangeFlags();\n    this.internalState.resetOldProps();\n  }\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    assert(this.internalState && this.state);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // Finalize extensions\n    for (const extension of this.props.extensions) {\n      extension.finalizeState.call(this, extension);\n    }\n    // End lifecycle method\n    removeLayerInSeer(this.id);\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    if (!uniforms.picking_uActive) {\n      this.updateTransition();\n    }\n\n    // TODO/ib - hack move to luma Model.draw\n    if (moduleParameters) {\n      this.setModuleParameters(moduleParameters);\n    }\n\n    // Hack/ib - define a public luma function\n    const {animationProps} = this.context;\n    if (animationProps) {\n      for (const model of this.getModels()) {\n        model._setAnimationProps(animationProps);\n      }\n    }\n\n    // Apply polygon offset to avoid z-fighting\n    // TODO - move to draw-layers\n    const {getPolygonOffset} = this.props;\n    const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n    parameters.polygonOffset = offsets;\n\n    // Call subclass lifecycle method\n    withParameters(this.context.gl, parameters, () => {\n      this.draw({moduleParameters, uniforms, parameters, context: this.context});\n    });\n    // End lifecycle method\n  }\n\n  // {uniforms = {}, ...opts}\n  pickLayer(opts) {\n    // Call subclass lifecycle method\n    return this.getPickingInfo(opts);\n    // End lifecycle method\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    this.internalState.changeFlags = this.internalState.changeFlags || {};\n    const changeFlags = this.internalState.changeFlags;\n\n    // Update primary flags\n    if (flags.dataChanged && !changeFlags.dataChanged) {\n      changeFlags.dataChanged = flags.dataChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `dataChanged: ${flags.dataChanged} in ${this.id}`)();\n    }\n    if (flags.updateTriggersChanged && !changeFlags.updateTriggersChanged) {\n      changeFlags.updateTriggersChanged =\n        changeFlags.updateTriggersChanged && flags.updateTriggersChanged\n          ? Object.assign({}, flags.updateTriggersChanged, changeFlags.updateTriggersChanged)\n          : flags.updateTriggersChanged || changeFlags.updateTriggersChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 1,\n        () =>\n          'updateTriggersChanged: ' +\n          `${Object.keys(flags.updateTriggersChanged).join(', ')} in ${this.id}`\n      )();\n    }\n    if (flags.propsChanged && !changeFlags.propsChanged) {\n      changeFlags.propsChanged = flags.propsChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `propsChanged: ${flags.propsChanged} in ${this.id}`)();\n    }\n    if (flags.extensionsChanged && !changeFlags.extensionsChanged) {\n      changeFlags.extensionsChanged = flags.extensionsChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 1,\n        () => `extensionsChanged: ${flags.extensionsChanged} in ${this.id}`\n      )();\n    }\n    if (flags.viewportChanged && !changeFlags.viewportChanged) {\n      changeFlags.viewportChanged = flags.viewportChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 2,\n        () => `viewportChanged: ${flags.viewportChanged} in ${this.id}`\n      )();\n    }\n    if (flags.stateChanged && !changeFlags.stateChanged) {\n      changeFlags.stateChanged = flags.stateChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `stateChanged: ${flags.stateChanged} in ${this.id}`)();\n    }\n\n    // Update composite flags\n    const propsOrDataChanged =\n      flags.dataChanged ||\n      flags.updateTriggersChanged ||\n      flags.propsChanged ||\n      flags.extensionsChanged;\n    changeFlags.propsOrDataChanged = changeFlags.propsOrDataChanged || propsOrDataChanged;\n    changeFlags.somethingChanged =\n      changeFlags.somethingChanged ||\n      propsOrDataChanged ||\n      flags.viewportChanged ||\n      flags.stateChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n      stateChanged: false,\n      extensionsChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  printChangeFlags() {\n    const flags = this.internalState.changeFlags;\n    return `\\\n${flags.dataChanged ? 'data ' : ''}\\\n${flags.propsChanged ? 'props ' : ''}\\\n${flags.updateTriggersChanged ? 'triggers ' : ''}\\\n${flags.viewportChanged ? 'viewport' : ''}\\\n`;\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this._activeUpdateTrigger(key);\n        }\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // Called by layer manager to validate props (in development)\n  validateProps() {\n    validateProps(this.props);\n  }\n\n  setModuleParameters(moduleParameters) {\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(moduleParameters);\n    }\n  }\n\n  // PRIVATE METHODS\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(opts) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    return redraw;\n  }\n\n  // Create new attribute manager\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state);\n\n    const attributeManager = this._getAttributeManager();\n\n    if (attributeManager) {\n      // All instanced layers get instancePickingColors attribute by default\n      // Their shaders can use it to render a picking scene\n      // TODO - this slightly slows down non instanced layers\n      attributeManager.addInstanced({\n        instancePickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          update: this.calculateInstancePickingColors\n        }\n      });\n    }\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n\n    this.state = {};\n    // TODO deprecated, for backwards compatibility with older layers\n    this.state.attributeManager = attributeManager;\n\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    const {state, internalState} = oldLayer;\n    assert(state && internalState);\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move internalState\n    this.internalState = internalState;\n    this.internalState.component = this;\n\n    // Move state\n    this.state = state;\n    // Deprecated: layer references on `state`\n    state.layer = this;\n    // We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    // Update model layer reference\n    for (const model of this.getModels()) {\n      model.userData.layer = this;\n    }\n\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setLayerNeedsUpdate();\n  }\n\n  // Operate on each changed triggers, will be called when an updateTrigger changes\n  _activeUpdateTrigger(propName) {\n    this.invalidateAttribute(propName);\n  }\n\n  _updateBaseUniforms() {\n    const uniforms = {\n      // apply gamma to opacity to make it visually \"linear\"\n      opacity:\n        typeof this.props.opacity === 'function'\n          ? animationProps => Math.pow(this.props.opacity(animationProps), 1 / 2.2)\n          : Math.pow(this.props.opacity, 1 / 2.2)\n    };\n    for (const model of this.getModels()) {\n      model.setUniforms(uniforms);\n    }\n  }\n\n  // DEPRECATED METHODS\n\n  // Updates selected state members and marks the object for redraw\n  setUniforms(uniformMap) {\n    for (const model of this.getModels()) {\n      model.setUniforms(uniformMap);\n    }\n\n    // TODO - set needsRedraw on the model(s)?\n    this.setNeedsRedraw();\n    log.deprecated('layer.setUniforms', 'model.setUniforms')();\n  }\n\n  use64bitProjection() {\n    log.removed('use64bitProjection', 'Fp64Extension')();\n    return false;\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"],"file":"layer.js"}