{"version":3,"sources":["../../../src/viewports/viewport.js"],"names":["log","createMat4","extractCameraVectors","getFrustumPlanes","Matrix4","Vector3","equals","mat4","getDistanceScales","getMeterZoom","lngLatToWorld","worldToLngLat","worldToPixels","pixelsToWorld","assert","DEGREES_TO_RADIANS","Math","PI","IDENTITY","ZERO_VECTOR","DEFAULT_ZOOM","ERR_ARGUMENT","Viewport","constructor","opts","id","x","y","width","height","displayName","_frustumPlanes","_initViewMatrix","_initProjectionMatrix","_initPixelMatrices","bind","project","unproject","projectPosition","unprojectPosition","projectFlat","unprojectFlat","getMatrices","viewport","scale","projectionMatrix","viewMatrix","xyz","topLeft","worldPosition","coord","pixelProjectionMatrix","y2","length","targetZ","z","targetZWorld","distanceScales","pixelsPerMeter","pixelUnprojectionMatrix","X","Y","Z","Number","isFinite","metersPerPixel","isGeospatial","coordinateOrigin","longitude","latitude","highPrecision","modelMatrix","modelViewProjectionMatrix","viewProjectionMatrix","multiply","invert","matrices","Object","assign","containsPixel","near","projectionProps","far","fovyRadians","aspect","position","cameraPosition","direction","cameraDirection","up","cameraUp","right","cameraRight","getCameraPosition","getCameraDirection","getCameraUp","_addMetersToLngLat","lngLatZ","lng","lat","_metersToLngLatDelta","deltaLng","deltaLat","deltaZ","degreesPerPixel","_createProjectionMatrix","orthographic","focalDistance","fovy","perspective","zoom","log2","pow","meterOffset","transformVector","center","_getCenterInWorld","viewMatrixUncentered","multiplyRight","translate","negate","center2d","pixelPosition","add","fovyDegrees","orthographicFocalDistance","radians","vpm","viewMatrixInverse","eye","viewportMatrix","warn"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport {createMat4, extractCameraVectors, getFrustumPlanes} from '../utils/math-utils';\n\nimport {Matrix4, Vector3, equals} from 'math.gl';\nimport * as mat4 from 'gl-matrix/mat4';\n\nimport {\n  getDistanceScales,\n  getMeterZoom,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  pixelsToWorld\n} from 'viewport-mercator-project';\n\nimport assert from '../utils/assert';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst IDENTITY = createMat4();\n\nconst ZERO_VECTOR = [0, 0, 0];\n\nconst DEFAULT_ZOOM = 0;\n\nconst ERR_ARGUMENT = 'Illegal argument to Viewport';\n\nexport default class Viewport {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  constructor(opts = {}) {\n    const {\n      id = null,\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = 1,\n      height = 1\n    } = opts;\n\n    this.id = id || this.constructor.displayName || 'viewport';\n\n    this.x = x;\n    this.y = y;\n    // Silently allow apps to send in w,h = 0,0\n    this.width = width || 1;\n    this.height = height || 1;\n    this._frustumPlanes = {};\n\n    this._initViewMatrix(opts);\n    this._initProjectionMatrix(opts);\n    this._initPixelMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n    this.getMatrices = this.getMatrices.bind(this);\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      viewport.scale === this.scale &&\n      equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      equals(viewport.viewMatrix, this.viewMatrix)\n    );\n    // TODO - check distance scales?\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.pixelsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.pixelsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerPixel[2];\n    return [X, Y, Z];\n  }\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(xyz, scale = this.scale) {\n    if (this.isGeospatial) {\n      return lngLatToWorld(xyz, scale);\n    }\n    const {pixelsPerMeter} = this.distanceScales;\n    return [xyz[0] * pixelsPerMeter[0], xyz[1] * pixelsPerMeter[1]];\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xyz, scale = this.scale) {\n    if (this.isGeospatial) {\n      return worldToLngLat(xyz, scale);\n    }\n    const {metersPerPixel} = this.distanceScales;\n    return [xyz[0] * metersPerPixel[0], xyz[1] * metersPerPixel[1]];\n  }\n\n  getDistanceScales(coordinateOrigin = null) {\n    if (coordinateOrigin) {\n      return getDistanceScales({\n        longitude: coordinateOrigin[0],\n        latitude: coordinateOrigin[1],\n        scale: this.scale,\n        highPrecision: true\n      });\n    }\n    return this.distanceScales;\n  }\n\n  getMatrices({modelMatrix = null} = {}) {\n    let modelViewProjectionMatrix = this.viewProjectionMatrix;\n    let pixelProjectionMatrix = this.pixelProjectionMatrix;\n    let pixelUnprojectionMatrix = this.pixelUnprojectionMatrix;\n\n    if (modelMatrix) {\n      modelViewProjectionMatrix = mat4.multiply([], this.viewProjectionMatrix, modelMatrix);\n      pixelProjectionMatrix = mat4.multiply([], this.pixelProjectionMatrix, modelMatrix);\n      pixelUnprojectionMatrix = mat4.invert([], pixelProjectionMatrix);\n    }\n\n    const matrices = Object.assign({\n      modelViewProjectionMatrix,\n      viewProjectionMatrix: this.viewProjectionMatrix,\n      viewMatrix: this.viewMatrix,\n      projectionMatrix: this.projectionMatrix,\n\n      // project/unproject between pixels and world\n      pixelProjectionMatrix,\n      pixelUnprojectionMatrix,\n\n      width: this.width,\n      height: this.height,\n      scale: this.scale\n    });\n\n    return matrices;\n  }\n\n  containsPixel({x, y, width = 1, height = 1}) {\n    return (\n      x < this.x + this.width &&\n      this.x < x + width &&\n      y < this.y + this.height &&\n      this.y < y + height\n    );\n  }\n\n  // Extract frustum planes in common space\n  getFrustumPlanes() {\n    if (this._frustumPlanes.near) {\n      return this._frustumPlanes;\n    }\n\n    const {near, far, fovyRadians, aspect} = this.projectionProps;\n\n    Object.assign(\n      this._frustumPlanes,\n      getFrustumPlanes({\n        aspect,\n        near,\n        far,\n        fovyRadians,\n        position: this.cameraPosition,\n        direction: this.cameraDirection,\n        up: this.cameraUp,\n        right: this.cameraRight\n      })\n    );\n\n    return this._frustumPlanes;\n  }\n\n  // EXPERIMENTAL METHODS\n\n  getCameraPosition() {\n    return this.cameraPosition;\n  }\n\n  getCameraDirection() {\n    return this.cameraDirection;\n  }\n\n  getCameraUp() {\n    return this.cameraUp;\n  }\n\n  // INTERNAL METHODS\n\n  // TODO - these are duplicating WebMercator methods\n  _addMetersToLngLat(lngLatZ, xyz) {\n    const [lng, lat, Z = 0] = lngLatZ;\n    const [deltaLng, deltaLat, deltaZ = 0] = this._metersToLngLatDelta(xyz);\n    return lngLatZ.length === 2\n      ? [lng + deltaLng, lat + deltaLat]\n      : [lng + deltaLng, lat + deltaLat, Z + deltaZ];\n  }\n\n  _metersToLngLatDelta(xyz) {\n    const [x, y, z = 0] = xyz;\n    assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z), ERR_ARGUMENT);\n    const {pixelsPerMeter, degreesPerPixel} = this.distanceScales;\n    const deltaLng = x * pixelsPerMeter[0] * degreesPerPixel[0];\n    const deltaLat = y * pixelsPerMeter[1] * degreesPerPixel[1];\n    return xyz.length === 2 ? [deltaLng, deltaLat] : [deltaLng, deltaLat, z];\n  }\n\n  _createProjectionMatrix({orthographic, fovyRadians, aspect, focalDistance, near, far}) {\n    assert(Number.isFinite(fovyRadians));\n    return orthographic\n      ? new Matrix4().orthographic({fovy: fovyRadians, aspect, focalDistance, near, far})\n      : new Matrix4().perspective({fovy: fovyRadians, aspect, near, far});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  _initViewMatrix(opts) {\n    const {\n      // view matrix\n      viewMatrix = IDENTITY,\n\n      longitude = null, // Anchor: lng lat zoom makes viewport work w/ geospatial coordinate systems\n      latitude = null,\n      zoom = null,\n\n      position = null, // Anchor position offset (in meters for geospatial viewports)\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n      focalDistance = 1, // Only needed for orthographic views\n\n      distanceScales = null\n    } = opts;\n\n    // Check if we have a geospatial anchor\n    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n\n    this.zoom = zoom;\n    if (!Number.isFinite(this.zoom)) {\n      this.zoom = this.isGeospatial\n        ? getMeterZoom({latitude}) + Math.log2(focalDistance)\n        : DEFAULT_ZOOM;\n    }\n    const scale = Math.pow(2, this.zoom);\n    this.scale = scale;\n\n    // Calculate distance scales if lng/lat/zoom are provided\n    this.distanceScales = this.isGeospatial\n      ? getDistanceScales({latitude, longitude, scale: this.scale})\n      : distanceScales || {\n          pixelsPerMeter: [scale, scale, scale],\n          metersPerPixel: [1 / scale, 1 / scale, 1 / scale]\n        };\n\n    this.focalDistance = focalDistance;\n\n    this.distanceScales.metersPerPixel = new Vector3(this.distanceScales.metersPerPixel);\n    this.distanceScales.pixelsPerMeter = new Vector3(this.distanceScales.pixelsPerMeter);\n\n    this.position = ZERO_VECTOR;\n    this.meterOffset = ZERO_VECTOR;\n    if (position) {\n      // Apply model matrix if supplied\n      this.position = position;\n      this.modelMatrix = modelMatrix;\n      this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n    }\n\n    if (this.isGeospatial) {\n      // Determine camera center\n      this.longitude = longitude;\n      this.latitude = latitude;\n      this.center = this._getCenterInWorld({longitude, latitude});\n\n      // Flip Y to match the orientation of the Mercator plane\n      this.viewMatrixUncentered = mat4.scale([], viewMatrix, [1, -1, 1]);\n    } else {\n      this.center = position ? this.projectPosition(position) : [0, 0, 0];\n      this.viewMatrixUncentered = viewMatrix;\n    }\n    // Make a centered version of the matrix for projection modes without an offset\n    this.viewMatrix = new Matrix4()\n      // Apply the uncentered view matrix\n      .multiplyRight(this.viewMatrixUncentered)\n      // And center it\n      .translate(new Vector3(this.center || ZERO_VECTOR).negate());\n  }\n  /* eslint-enable complexity, max-statements */\n\n  _getCenterInWorld({longitude, latitude}) {\n    const {meterOffset, scale, distanceScales} = this;\n\n    // Make a centered version of the matrix for projection modes without an offset\n    const center2d = this.projectFlat([longitude, latitude], scale);\n    const center = new Vector3(center2d[0], center2d[1], 0);\n\n    if (meterOffset) {\n      const pixelPosition = new Vector3(meterOffset)\n        // Convert to pixels in current zoom\n        .scale(distanceScales.pixelsPerMeter);\n      center.add(pixelPosition);\n    }\n\n    return center;\n  }\n\n  _initProjectionMatrix(opts) {\n    const {\n      // Projection matrix\n      projectionMatrix = null,\n\n      // Projection matrix parameters, used if projectionMatrix not supplied\n      orthographic = false,\n      fovyRadians,\n      fovyDegrees,\n      fovy,\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      focalDistance = 1, // Only needed for orthographic views\n      orthographicFocalDistance\n    } = opts;\n\n    const radians = fovyRadians || (fovyDegrees || fovy || 75) * DEGREES_TO_RADIANS;\n\n    this.projectionProps = {\n      orthographic,\n      fovyRadians: radians,\n      aspect: this.width / this.height,\n      focalDistance: orthographicFocalDistance || focalDistance,\n      near,\n      far\n    };\n\n    this.projectionMatrix = projectionMatrix || this._createProjectionMatrix(this.projectionProps);\n  }\n\n  _initPixelMatrices() {\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, this.projectionMatrix);\n    mat4.multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);\n\n    // Calculate inverse view matrix\n    this.viewMatrixInverse = mat4.invert([], this.viewMatrix) || this.viewMatrix;\n\n    // Decompose camera directions\n    const {eye, direction, up, right} = extractCameraVectors({\n      viewMatrix: this.viewMatrix,\n      viewMatrixInverse: this.viewMatrixInverse\n    });\n    this.cameraPosition = eye;\n    this.cameraDirection = direction;\n    this.cameraUp = up;\n    this.cameraRight = right;\n\n    // console.log(this.cameraPosition, this.cameraDirection, this.cameraUp);\n\n    /*\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n\n    // matrix for conversion from world location to screen (pixel) coordinates\n    const viewportMatrix = createMat4(); // matrix from NDC to viewport.\n    const pixelProjectionMatrix = createMat4(); // matrix from world space to viewport.\n    mat4.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n    mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n    this.pixelProjectionMatrix = pixelProjectionMatrix;\n    this.viewportMatrix = viewportMatrix;\n\n    this.pixelUnprojectionMatrix = mat4.invert(createMat4(), this.pixelProjectionMatrix);\n    if (!this.pixelUnprojectionMatrix) {\n      log.warn('Pixel project matrix not invertible')();\n      // throw new Error('Pixel project matrix not invertible');\n    }\n  }\n}\n\nViewport.displayName = 'Viewport';\n"],"file":"viewport.js"}