{"version":3,"sources":["../../../src/lib/layer.js"],"names":["COORDINATE_SYSTEM","AttributeManager","removeLayerInSeer","diffProps","validateProps","count","log","withParameters","assert","mergeShaders","projectPosition","getWorldPosition","Component","LayerState","worldToPixels","load","LOG_PRIORITY_UPDATE","EMPTY_ARRAY","Object","freeze","pickingColorCache","Uint8ClampedArray","defaultProps","data","type","value","async","dataComparator","_dataDiff","__diff","compare","optional","dataTransform","onDataLoad","fetch","url","layer","getLoadOptions","updateTriggers","numInstances","undefined","visible","pickable","opacity","min","max","onHover","onClick","onDragStart","onDrag","onDragEnd","coordinateSystem","LNGLAT","coordinateOrigin","modelMatrix","wrapLongitude","positionFormat","colorFormat","parameters","uniforms","extensions","framebuffer","animation","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","Layer","className","constructor","layerName","name","props","id","updateObject","setChangeFlags","stateChanged","assign","state","setNeedsRedraw","redraw","internalState","needsRedraw","context","layerManager","setNeedsUpdate","String","opts","clearRedrawFlags","_getNeedsRedraw","shouldUpdateState","_getUpdateParams","models","model","attributeManager","loadOptions","object","xyz","viewport","worldPosition","pixelProjectionMatrix","x","y","z","length","xy","Array","isArray","unproject","lngLat","deprecated","projectFlat","unprojectFlat","IDENTITY","screenPixels","devicePixelRatio","window","info","pickingEvent","i","target","color","Uint8Array","i1","i2","i3","index","Error","shaders","extension","getShaders","call","oldProps","changeFlags","propsOrDataChanged","getAttributeManager","dataChanged","dataRange","invalidateAll","getModels","delete","finalize","draw","mode","diffReason","invalidate","changedAttributes","_setModelAttributes","getNumInstances","bufferLayout","getBufferLayout","update","transitions","buffers","ignoreUnknownAttributes","getChangedAttributes","clearChangedFlags","updateAttributes","updateTransition","time","attribute","size","cacheSize","newPickingColorCache","set","pickingColor","encodePickingColor","subarray","shaderAttributes","excludeAttributes","userData","attributeName","getShaderAttributes","setAttributes","instancePickingColors","attributes","decodePickingColor","pickingColors","_clearPickingColor","_clearInstancePickingColor","colors","_initState","initializeState","propsChanged","viewportChanged","extensionsChanged","_updateState","getSingleModel","program","stateNeedsUpdate","needsUpdate","updateParams","gl","updateState","error","isComposite","_renderLayers","_updateAttributes","_updateBaseUniforms","setInstanceCount","clearChangeFlags","resetOldProps","finalizeState","moduleParameters","picking_uActive","setModuleParameters","animationProps","_setAnimationProps","offsets","polygonOffset","getPickingInfo","flags","updateTriggersChanged","keys","join","somethingChanged","newProps","key","_activeUpdateTrigger","updateModuleSettings","getOldProps","attributeManagerNeedsRedraw","getNeedsRedraw","stats","_getAttributeManager","addInstanced","calculateInstancePickingColors","onAsyncPropUpdated","_onAsyncPropUpdated","bind","setAsyncProps","oldLayer","component","setLayerNeedsUpdate","propName","invalidateAttribute","Math","pow","setUniforms","uniformMap","removed"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable react/no-direct-mutation-state */\n/* global window */\nimport {COORDINATE_SYSTEM} from './constants';\nimport AttributeManager from './attribute-manager';\nimport {removeLayerInSeer} from './seer-integration';\nimport {diffProps, validateProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport GL from '@luma.gl/constants';\nimport {withParameters} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport {mergeShaders} from '../utils/shader';\nimport {projectPosition, getWorldPosition} from '../shaderlib/project/project-functions';\n\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\n\nimport {worldToPixels} from 'viewport-mercator-project';\n\nimport {load} from '@loaders.gl/core';\n\nconst LOG_PRIORITY_UPDATE = 1;\n\nconst EMPTY_ARRAY = Object.freeze([]);\n\nlet pickingColorCache = new Uint8ClampedArray(0);\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  data: {type: 'data', value: EMPTY_ARRAY, async: true},\n  dataComparator: null,\n  _dataDiff: {type: 'function', value: data => data && data.__diff, compare: false, optional: true},\n  dataTransform: {type: 'function', value: null, compare: false, optional: true},\n  onDataLoad: {type: 'function', value: null, compare: false, optional: true},\n  fetch: {\n    type: 'function',\n    value: (url, {layer}) => load(url, layer.getLoadOptions()),\n    compare: false\n  },\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n  numInstances: undefined,\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 0.8},\n\n  onHover: {type: 'function', value: null, compare: false, optional: true},\n  onClick: {type: 'function', value: null, compare: false, optional: true},\n  onDragStart: {type: 'function', value: null, compare: false, optional: true},\n  onDrag: {type: 'function', value: null, compare: false, optional: true},\n  onDragEnd: {type: 'function', value: null, compare: false, optional: true},\n\n  coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n  coordinateOrigin: {type: 'array', value: [0, 0, 0], compare: true},\n  modelMatrix: {type: 'array', value: null, compare: true, optional: true},\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n\n  parameters: {},\n  uniforms: {},\n  extensions: [],\n  framebuffer: null,\n\n  animation: null, // Passed prop animation functions to evaluate props\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: {\n    type: 'function',\n    value: ({layerIndex}) => [0, -layerIndex * 100],\n    compare: false\n  },\n\n  // Selection/Highlighting\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: {type: 'color', value: [0, 0, 128, 128]}\n};\n\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    this.setChangeFlags({stateChanged: true});\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  // TODO - Need to align with existing needsUpdate before uncommenting\n  // For now async props will call layerManager directly\n  setLayerNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n  }\n\n  // Checks state of attributes and model\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    return this._getNeedsRedraw(opts);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return this.shouldUpdateState(this._getUpdateParams());\n    // End lifecycle method\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  // TODO - Gradually phase out, does not support multi model layers\n  getSingleModel() {\n    return this.state && this.state.model;\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Returns the default parse options for async props\n  getLoadOptions() {\n    return this.props.loadOptions;\n  }\n\n  // Use iteration (the only required capability on data) to get first element\n  // deprecated since we are effectively only supporting Arrays\n  getFirstObject() {\n    const {data} = this.props;\n    for (const object of data) {\n      return object;\n    }\n    return null;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // From the current layer's coordinate system to screen\n  project(xyz) {\n    const {viewport} = this.context;\n    const worldPosition = getWorldPosition(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n    const [x, y, z] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);\n    return xyz.length === 2 ? [x, y] : [x, y, z];\n  }\n\n  // Note: this does not reverse `project`.\n  // Always unprojects to the viewport's coordinate system\n  unproject(xy) {\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unproject(xy);\n  }\n\n  projectPosition(xyz) {\n    assert(Array.isArray(xyz));\n\n    return projectPosition(xyz, {\n      viewport: this.context.viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n  }\n\n  // DEPRECATE: This does not handle offset modes\n  projectFlat(lngLat) {\n    log.deprecated('layer.projectFlat', 'layer.projectPosition')();\n    const {viewport} = this.context;\n    assert(Array.isArray(lngLat));\n    return viewport.projectFlat(lngLat);\n  }\n\n  // DEPRECATE: This is not meaningful in offset modes\n  unprojectFlat(xy) {\n    log.deprecated('layer.unprojectFlat')();\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unprojectFlat(xy);\n  }\n\n  use64bitPositions() {\n    return (\n      this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n      this.props.coordinateSystem === COORDINATE_SYSTEM.IDENTITY\n    );\n  }\n\n  // TODO - needs to refer to context for devicePixels setting\n  screenToDevicePixels(screenPixels) {\n    log.deprecated('screenToDevicePixels', 'DeckGL prop useDevicePixels for conversion')();\n    const devicePixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n    return screenPixels * devicePixelRatio;\n  }\n\n  // Event handling\n  onHover(info, pickingEvent) {\n    if (this.props.onHover) {\n      return this.props.onHover(info, pickingEvent);\n    }\n    return false;\n  }\n\n  onClick(info, pickingEvent) {\n    if (this.props.onClick) {\n      return this.props.onClick(info, pickingEvent);\n    }\n    return false;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i, target = []) {\n    assert(i < 16777215, 'index out of picking color range');\n    target[0] = (i + 1) & 255;\n    target[1] = ((i + 1) >> 8) & 255;\n    target[2] = (((i + 1) >> 8) >> 8) & 255;\n    return target;\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  getShaders(shaders) {\n    for (const extension of this.props.extensions) {\n      shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n    }\n    return shaders;\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      const {dataChanged} = changeFlags;\n      if (Array.isArray(dataChanged)) {\n        // is partial update\n        for (const dataRange of dataChanged) {\n          attributeManager.invalidateAll(dataRange);\n        }\n      } else {\n        attributeManager.invalidateAll();\n      }\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.finalize();\n    }\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      log.log(LOG_PRIORITY_UPDATE, `updateTriggers invalidating all attributes: ${diffReason}`)();\n      attributeManager.invalidateAll();\n    } else {\n      log.log(\n        LOG_PRIORITY_UPDATE,\n        `updateTriggers invalidating attribute ${name}: ${diffReason}`\n      )();\n      attributeManager.invalidate(name);\n    }\n  }\n\n  updateAttributes(changedAttributes) {\n    for (const model of this.getModels()) {\n      this._setModelAttributes(model, changedAttributes);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  _updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n    const bufferLayout = this.getBufferLayout(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      bufferLayout,\n      props,\n      transitions: props.transitions,\n      buffers: props,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n    this.updateAttributes(changedAttributes);\n  }\n\n  // Update attribute transition\n  updateTransition() {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.updateTransition(this.context.time);\n    }\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    const {value, size} = attribute;\n\n    if (value[0] === 1) {\n      // This can happen when data has changed, but the attribute value typed array\n      // has sufficient size and does not need to be re-allocated.\n      // This attribute is already populated, we do not have to recalculate it\n      return;\n    }\n\n    // calculateInstancePickingColors always generates the same sequence.\n    // pickingColorCache saves the largest generated sequence for reuse\n    const cacheSize = pickingColorCache.length / size;\n\n    if (cacheSize < numInstances) {\n      // If the attribute is larger than the cache, resize the cache and populate the missing chunk\n      const newPickingColorCache = new Uint8ClampedArray(numInstances * size);\n      newPickingColorCache.set(pickingColorCache);\n      const pickingColor = [];\n\n      for (let i = cacheSize; i < numInstances; i++) {\n        this.encodePickingColor(i, pickingColor);\n        newPickingColorCache[i * size + 0] = pickingColor[0];\n        newPickingColorCache[i * size + 1] = pickingColor[1];\n        newPickingColorCache[i * size + 2] = pickingColor[2];\n      }\n\n      pickingColorCache = newPickingColorCache;\n    }\n\n    // Copy the last calculated picking color sequence into the attribute\n    value.set(\n      numInstances < cacheSize\n        ? pickingColorCache.subarray(0, numInstances * size)\n        : pickingColorCache\n    );\n  }\n\n  _setModelAttributes(model, changedAttributes) {\n    const shaderAttributes = {};\n    const excludeAttributes = model.userData.excludeAttributes || {};\n    for (const attributeName in changedAttributes) {\n      if (!excludeAttributes[attributeName]) {\n        Object.assign(shaderAttributes, changedAttributes[attributeName].getShaderAttributes());\n      }\n    }\n\n    model.setAttributes(shaderAttributes);\n  }\n\n  // Sets the specified instanced picking color to null picking color. Used for multi picking.\n  _clearInstancePickingColor(color) {\n    const {instancePickingColors} = this.getAttributeManager().attributes;\n    const {value, size} = instancePickingColors;\n\n    const i = this.decodePickingColor(color);\n    value[i * size + 0] = 0;\n    value[i * size + 1] = 0;\n    value[i * size + 2] = 0;\n\n    // TODO: Optimize this to use sub-buffer update!\n    instancePickingColors.update({value});\n  }\n\n  // Sets all occurrences of the specified picking color to null picking color. Used for multi picking.\n  _clearPickingColor(color) {\n    const {pickingColors} = this.getAttributeManager().attributes;\n    const {value} = pickingColors;\n\n    for (let i = 0; i < value.length; i += 3) {\n      if (value[i + 0] === color[0] && value[i + 1] === color[1] && value[i + 2] === color[2]) {\n        value[i + 0] = 0;\n        value[i + 1] = 0;\n        value[i + 2] = 0;\n      }\n    }\n\n    // TODO: Optimize this to use sub-buffer update!\n    pickingColors.update({value});\n  }\n\n  // This method figures out if we use instance colors or not\n  // and calls _clearInstancePickingColor or _clearPickingColor\n  clearPickingColor(color) {\n    if (this.getAttributeManager().attributes.pickingColors) {\n      this._clearPickingColor(color);\n    } else {\n      this._clearInstancePickingColor(color);\n    }\n  }\n\n  copyPickingColors() {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    return new Uint8ClampedArray(colors.value);\n  }\n\n  restorePickingColors(value) {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    colors.update({value});\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    const {data} = this.props;\n    return count(data);\n  }\n\n  // Buffer layout describes how many attribute values are packed for each data object\n  // The default (null) is one value each object.\n  // Some data formats (e.g. paths, polygons) have various length. Their buffer layout\n  //  is in the form of [L0, L1, L2, ...]\n  getBufferLayout(props) {\n    props = props || this.props;\n\n    // First Check if bufferLayout is provided as an explicit value\n    if (props.bufferLayout !== undefined) {\n      return props.bufferLayout;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.bufferLayout !== undefined) {\n      return this.state.bufferLayout;\n    }\n\n    return null;\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // Initialize extensions\n    for (const extension of this.props.extensions) {\n      extension.initializeState.call(this, this.context, extension);\n    }\n    // End subclass lifecycle methods\n\n    // TODO deprecated, for backwards compatibility with older layers\n    // in case layer resets state\n    this.state.attributeManager = this.getAttributeManager();\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({\n      dataChanged: true,\n      propsChanged: true,\n      viewportChanged: true,\n      extensionsChanged: true\n    });\n\n    this._updateState();\n\n    const model = this.getSingleModel();\n    if (model) {\n      model.id = this.props.id;\n      model.program.id = `${this.props.id}-program`;\n    }\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n  /* eslint-enable max-statements */\n\n  // Common code for _initialize and _update\n  _updateState() {\n    const updateParams = this._getUpdateParams();\n\n    // Safely call subclass lifecycle methods\n    if (this.context.gl) {\n      this.updateState(updateParams);\n    } else {\n      try {\n        this.updateState(updateParams);\n      } catch (error) {\n        // ignore error if gl context is missing\n      }\n    }\n    // Execute extension updates\n    for (const extension of this.props.extensions) {\n      extension.updateState.call(this, updateParams, extension);\n    }\n    // End subclass lifecycle methods\n\n    if (this.isComposite) {\n      // Render or update previously rendered sublayers\n      this._renderLayers(updateParams);\n    } else {\n      this.setNeedsRedraw();\n      // Add any subclass attributes\n      this._updateAttributes(this.props);\n      this._updateBaseUniforms();\n\n      // Note: Automatic instance count update only works for single layers\n      if (this.state.model) {\n        this.state.model.setInstanceCount(this.getNumInstances());\n      }\n    }\n\n    this.clearChangeFlags();\n    this.internalState.resetOldProps();\n  }\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    assert(this.internalState && this.state);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // Finalize extensions\n    for (const extension of this.props.extensions) {\n      extension.finalizeState.call(this, extension);\n    }\n    // End lifecycle method\n    removeLayerInSeer(this.id);\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    if (!uniforms.picking_uActive) {\n      this.updateTransition();\n    }\n\n    // TODO/ib - hack move to luma Model.draw\n    if (moduleParameters) {\n      this.setModuleParameters(moduleParameters);\n    }\n\n    // Hack/ib - define a public luma function\n    const {animationProps} = this.context;\n    if (animationProps) {\n      for (const model of this.getModels()) {\n        model._setAnimationProps(animationProps);\n      }\n    }\n\n    // Apply polygon offset to avoid z-fighting\n    // TODO - move to draw-layers\n    const {getPolygonOffset} = this.props;\n    const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n    parameters.polygonOffset = offsets;\n\n    // Call subclass lifecycle method\n    withParameters(this.context.gl, parameters, () => {\n      this.draw({moduleParameters, uniforms, parameters, context: this.context});\n    });\n    // End lifecycle method\n  }\n\n  // {uniforms = {}, ...opts}\n  pickLayer(opts) {\n    // Call subclass lifecycle method\n    return this.getPickingInfo(opts);\n    // End lifecycle method\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    this.internalState.changeFlags = this.internalState.changeFlags || {};\n    const changeFlags = this.internalState.changeFlags;\n\n    // Update primary flags\n    if (flags.dataChanged && !changeFlags.dataChanged) {\n      changeFlags.dataChanged = flags.dataChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `dataChanged: ${flags.dataChanged} in ${this.id}`)();\n    }\n    if (flags.updateTriggersChanged && !changeFlags.updateTriggersChanged) {\n      changeFlags.updateTriggersChanged =\n        changeFlags.updateTriggersChanged && flags.updateTriggersChanged\n          ? Object.assign({}, flags.updateTriggersChanged, changeFlags.updateTriggersChanged)\n          : flags.updateTriggersChanged || changeFlags.updateTriggersChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 1,\n        () =>\n          'updateTriggersChanged: ' +\n          `${Object.keys(flags.updateTriggersChanged).join(', ')} in ${this.id}`\n      )();\n    }\n    if (flags.propsChanged && !changeFlags.propsChanged) {\n      changeFlags.propsChanged = flags.propsChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `propsChanged: ${flags.propsChanged} in ${this.id}`)();\n    }\n    if (flags.extensionsChanged && !changeFlags.extensionsChanged) {\n      changeFlags.extensionsChanged = flags.extensionsChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 1,\n        () => `extensionsChanged: ${flags.extensionsChanged} in ${this.id}`\n      )();\n    }\n    if (flags.viewportChanged && !changeFlags.viewportChanged) {\n      changeFlags.viewportChanged = flags.viewportChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 2,\n        () => `viewportChanged: ${flags.viewportChanged} in ${this.id}`\n      )();\n    }\n    if (flags.stateChanged && !changeFlags.stateChanged) {\n      changeFlags.stateChanged = flags.stateChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `stateChanged: ${flags.stateChanged} in ${this.id}`)();\n    }\n\n    // Update composite flags\n    const propsOrDataChanged =\n      flags.dataChanged ||\n      flags.updateTriggersChanged ||\n      flags.propsChanged ||\n      flags.extensionsChanged;\n    changeFlags.propsOrDataChanged = changeFlags.propsOrDataChanged || propsOrDataChanged;\n    changeFlags.somethingChanged =\n      changeFlags.somethingChanged ||\n      propsOrDataChanged ||\n      flags.viewportChanged ||\n      flags.stateChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n      stateChanged: false,\n      extensionsChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  printChangeFlags() {\n    const flags = this.internalState.changeFlags;\n    return `\\\n${flags.dataChanged ? 'data ' : ''}\\\n${flags.propsChanged ? 'props ' : ''}\\\n${flags.updateTriggersChanged ? 'triggers ' : ''}\\\n${flags.viewportChanged ? 'viewport' : ''}\\\n`;\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this._activeUpdateTrigger(key);\n        }\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // Called by layer manager to validate props (in development)\n  validateProps() {\n    validateProps(this.props);\n  }\n\n  setModuleParameters(moduleParameters) {\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(moduleParameters);\n    }\n  }\n\n  // PRIVATE METHODS\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(opts) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    return redraw;\n  }\n\n  // Create new attribute manager\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state);\n\n    const attributeManager = this._getAttributeManager();\n\n    if (attributeManager) {\n      // All instanced layers get instancePickingColors attribute by default\n      // Their shaders can use it to render a picking scene\n      // TODO - this slightly slows down non instanced layers\n      attributeManager.addInstanced({\n        instancePickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          update: this.calculateInstancePickingColors\n        }\n      });\n    }\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n\n    this.state = {};\n    // TODO deprecated, for backwards compatibility with older layers\n    this.state.attributeManager = attributeManager;\n\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    const {state, internalState} = oldLayer;\n    assert(state && internalState);\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move internalState\n    this.internalState = internalState;\n    this.internalState.component = this;\n\n    // Move state\n    this.state = state;\n    // Deprecated: layer references on `state`\n    state.layer = this;\n    // We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    // Update model layer reference\n    for (const model of this.getModels()) {\n      model.userData.layer = this;\n    }\n\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setLayerNeedsUpdate();\n  }\n\n  // Operate on each changed triggers, will be called when an updateTrigger changes\n  _activeUpdateTrigger(propName) {\n    this.invalidateAttribute(propName);\n  }\n\n  _updateBaseUniforms() {\n    const uniforms = {\n      // apply gamma to opacity to make it visually \"linear\"\n      opacity:\n        typeof this.props.opacity === 'function'\n          ? animationProps => Math.pow(this.props.opacity(animationProps), 1 / 2.2)\n          : Math.pow(this.props.opacity, 1 / 2.2)\n    };\n    for (const model of this.getModels()) {\n      model.setUniforms(uniforms);\n    }\n  }\n\n  // DEPRECATED METHODS\n\n  // Updates selected state members and marks the object for redraw\n  setUniforms(uniformMap) {\n    for (const model of this.getModels()) {\n      model.setUniforms(uniformMap);\n    }\n\n    // TODO - set needsRedraw on the model(s)?\n    this.setNeedsRedraw();\n    log.deprecated('layer.setUniforms', 'model.setUniforms')();\n  }\n\n  use64bitProjection() {\n    log.removed('use64bitProjection', 'Fp64Extension')();\n    return false;\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"],"file":"layer.js"}