{"version":3,"sources":["../../../src/icon-layer/icon-layer.js"],"names":["DEFAULT_COLOR","defaultProps","iconAtlas","type","value","async","iconMapping","sizeScale","min","billboard","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","getPosition","x","position","getIcon","icon","getColor","getSize","getAngle","IconLayer","vs","fs","modules","state","iconManager","IconManager","context","gl","onUpdate","_onUpdate","attributeManager","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","instancePositions64xyLow","update","calculateInstancePositions64xyLow","instanceSizes","defaultValue","instanceOffsets","calculateInstanceOffsets","instanceIconFrames","calculateInstanceIconFrames","instanceColorModes","calculateInstanceColorMode","instanceColors","props","colorFormat","length","normalized","instanceAngles","oldProps","changeFlags","data","iconMappingChanged","prePacked","_asyncPropOriginalValues","setProps","autoPacking","dataChanged","updateTriggersChanged","all","invalidate","extensionsChanged","model","delete","setState","_getModel","invalidateAll","finalize","uniforms","viewport","iconsTexture","getTexture","loaded","setUniforms","Object","assign","iconsTextureDim","width","height","distanceScales","metersPerPixel","draw","positions","Model","getShaders","id","geometry","Geometry","drawMode","attributes","Float32Array","isInstanced","shaderCache","setNeedsRedraw","attribute","isFP64","use64bitPositions","constant","i","iterable","objectInfo","object","index","startRow","endRow","rect","getIconMapping","anchorX","anchorY","mapping","colorMode","mask","y","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer, createIterable, fp64LowPart} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n/*\n * @param {object} props\n * @param {Texture2D | string} props.iconAtlas - atlas image url or texture\n * @param {object} props.iconMapping - icon names mapped to icon definitions\n * @param {object} props.iconMapping[icon_name].x - x position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].y - y position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].width - width of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].height - height of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].anchorX - x anchor of icon on the atlas image,\n *   default to width / 2\n * @param {object} props.iconMapping[icon_name].anchorY - y anchor of icon on the atlas image,\n *   default to height / 2\n * @param {object} props.iconMapping[icon_name].mask - whether icon is treated as a transparency\n *   mask. If true, user defined color is applied. If false, original color from the image is\n *   applied. Default to false.\n * @param {number} props.size - icon size in pixels\n * @param {func} props.getPosition - returns anchor position of the icon, in [lng, lat, z]\n * @param {func} props.getIcon - returns icon name as a string\n * @param {func} props.getSize - returns icon size multiplier as a number\n * @param {func} props.getColor - returns color of the icon in [r, g, b, a]. Only works on icons\n *   with mask: true.\n * @param {func} props.getAngle - returns rotating angle (in degree) of the icon.\n */\nconst defaultProps = {\n  iconAtlas: {type: 'object', value: null, async: true},\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0}\n};\n\nexport default class IconLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: ['project32', 'picking']});\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {onUpdate: () => this._onUpdate()})\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {size: 2, accessor: 'getIcon', update: this.calculateInstanceOffsets},\n      instanceIconFrames: {size: 4, accessor: 'getIcon', update: this.calculateInstanceIconFrames},\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        update: this.calculateInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n    const {iconManager} = this.state;\n    const {iconAtlas, iconMapping, data, getIcon} = props;\n\n    let iconMappingChanged = false;\n    const prePacked = iconAtlas || this.props._asyncPropOriginalValues.iconAtlas;\n\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconAtlas !== props.iconAtlas) {\n        iconManager.setProps({iconAtlas, autoPacking: false});\n      }\n\n      if (oldProps.iconMapping !== props.iconMapping) {\n        iconManager.setProps({iconMapping});\n        iconMappingChanged = true;\n      }\n    } else {\n      // otherwise, use autoPacking\n      iconManager.setProps({autoPacking: true});\n    }\n\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      iconManager.setProps({data, getIcon});\n      iconMappingChanged = true;\n    }\n\n    if (iconMappingChanged) {\n      attributeManager.invalidate('instanceOffsets');\n      attributeManager.invalidate('instanceIconFrames');\n      attributeManager.invalidate('instanceColorModes');\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      attributeManager.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  finalizeState() {\n    super.finalizeState();\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n\n  draw({uniforms}) {\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard} = this.props;\n    const {iconManager} = this.state;\n    const {viewport} = this.context;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture && iconsTexture.loaded) {\n      this.state.model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            iconsTexture,\n            iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n            sizeScale:\n              sizeScale * (sizeUnits === 'pixels' ? viewport.distanceScales.metersPerPixel[2] : 1),\n            sizeMinPixels,\n            sizeMaxPixels,\n            billboard\n          })\n        )\n        .draw();\n    }\n  }\n\n  _getModel(gl) {\n    const positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  _onUpdate() {\n    this.setNeedsRedraw();\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    const {iterable, objectInfo} = createIterable(data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const position = getPosition(object, objectInfo);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  calculateInstanceOffsets(attribute, {startRow, endRow}) {\n    const {data} = this.props;\n    const {iconManager} = this.state;\n    const {value, size} = attribute;\n    let i = startRow * size;\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const rect = iconManager.getIconMapping(object, objectInfo);\n      value[i++] = rect.width / 2 - rect.anchorX || 0;\n      value[i++] = rect.height / 2 - rect.anchorY || 0;\n    }\n  }\n\n  calculateInstanceColorMode(attribute, {startRow, endRow}) {\n    const {data} = this.props;\n    const {iconManager} = this.state;\n    const {value, size} = attribute;\n    let i = startRow * size;\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const mapping = iconManager.getIconMapping(object, objectInfo);\n      const colorMode = mapping.mask;\n      value[i++] = colorMode ? 1 : 0;\n    }\n  }\n\n  calculateInstanceIconFrames(attribute, {startRow, endRow}) {\n    const {data} = this.props;\n    const {iconManager} = this.state;\n    const {value, size} = attribute;\n    let i = startRow * size;\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const rect = iconManager.getIconMapping(object, objectInfo);\n      value[i++] = rect.x || 0;\n      value[i++] = rect.y || 0;\n      value[i++] = rect.width || 0;\n      value[i++] = rect.height || 0;\n    }\n  }\n}\n\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;\n"],"file":"icon-layer.js"}