{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["DEFAULT_COLOR","defaultMaterial","PhongMaterial","defaultProps","filled","extruded","wireframe","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","vs","fs","defines","modules","gl","context","setState","numInstances","polygonTesselator","PolygonTesselator","IndexType","FEATURES","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","shaderAttributes","offset","divisor","instancePositions","nextPositions","positions64xyLow","calculatePositionsLow","instancePositions64xyLow","nextPositions64xyLow","vertexValid","calculateVertexValid","elevations","instanceElevations","fillColors","alias","props","colorFormat","normalized","defaultValue","instanceFillColors","lineColors","instanceLineColors","pickingColors","object","index","target","encodePickingColor","instancePickingColors","uniforms","state","topModel","sideModel","renderUniforms","Object","assign","Boolean","setInstanceCount","instanceCount","setUniforms","setDrawMode","isWireframe","draw","setVertexCount","get","updateParams","updateGeometry","oldProps","changeFlags","regenerateModels","extensionsChanged","models","forEach","model","delete","_getModels","invalidateAll","geometryConfigChanged","dataChanged","updateTriggersChanged","all","data","getGeometry","positionFormat","fp64","use64bitPositions","bufferLayout","id","shaders","getShaders","vsTop","NON_INSTANCED_MODEL","Model","drawMode","attributes","vertexPositions","Float32Array","isSideVertex","vertexCount","shaderCache","vsSide","geometry","Geometry","isInstanced","userData","excludeAttributes","filter","attribute","indexLayout","isFP64","constant","color","pickedPolygonIndex","decodePickingColor","numVertices","startInstanceIndex","polygonIndex","endInstanceIndex","fill","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeature, FEATURES, PhongMaterial} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n\n  // elevation multiplier\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // Accessor for polygon geometry\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Accessor for extrusion height\n  getElevation: {type: 'accessor', value: 1000},\n  // Accessor for colors\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // Optional settings for 'lighting' shader module\n  material: defaultMaterial\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders(vs) {\n    return super.getShaders({\n      vs,\n      fs,\n      defines: {},\n      modules: ['project32', 'gouraud-lighting', 'picking']\n    });\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        IndexType: !gl || hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            offset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            offset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            offset: 12,\n            divisor: 1\n          }\n        }\n      },\n      positions64xyLow: {\n        size: 2,\n        update: this.calculatePositionsLow,\n        noAlloc,\n        shaderAttributes: {\n          positions64xyLow: {\n            offset: 0,\n            divisor: 0\n          },\n          instancePositions64xyLow: {\n            offset: 0,\n            divisor: 1\n          },\n          nextPositions64xyLow: {\n            offset: 8,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) => this.encodePickingColor(index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: Boolean(extruded),\n      elevationScale\n    });\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.get('indices').length);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        bufferLayout: polygonTesselator.bufferLayout\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders(vsTop);\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n\n      topModel = new Model(\n        gl,\n        Object.assign({}, shaders, {\n          id: `${id}-top`,\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            vertexPositions: new Float32Array([0, 1])\n          },\n          uniforms: {\n            isWireframe: false,\n            isSideVertex: false\n          },\n          vertexCount: 0,\n          isIndexed: true,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (extruded) {\n      sideModel = new Model(\n        gl,\n        Object.assign({}, this.getShaders(vsSide), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.LINES,\n            vertexCount: 4,\n            attributes: {\n              // top right - top left - bootom left - bottom right\n              vertexPositions: {\n                size: 2,\n                value: new Float32Array([1, 1, 0, 1, 0, 0, 1, 0])\n              }\n            }\n          }),\n          instanceCount: 0,\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.indexLayout;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.get('positions');\n  }\n  calculatePositionsLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.get('positions64xyLow');\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n\n  clearPickingColor(color) {\n    const pickedPolygonIndex = this.decodePickingColor(color);\n    const {bufferLayout} = this.state.polygonTesselator;\n    const numVertices = bufferLayout[pickedPolygonIndex];\n\n    let startInstanceIndex = 0;\n    for (let polygonIndex = 0; polygonIndex < pickedPolygonIndex; polygonIndex++) {\n      startInstanceIndex += bufferLayout[polygonIndex];\n    }\n\n    const {pickingColors} = this.getAttributeManager().attributes;\n\n    const {value} = pickingColors;\n    const endInstanceIndex = startInstanceIndex + numVertices;\n    value.fill(0, startInstanceIndex * 3, endInstanceIndex * 3);\n    pickingColors.update({value});\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"],"file":"solid-polygon-layer.js"}