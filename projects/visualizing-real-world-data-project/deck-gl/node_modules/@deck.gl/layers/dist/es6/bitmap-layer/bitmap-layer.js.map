{"version":3,"sources":["../../../src/bitmap-layer/bitmap-layer.js"],"names":["Layer","fp64LowPart","Model","Geometry","Texture2D","vs","fs","DEFAULT_TEXTURE_PARAMETERS","defaultProps","image","type","value","async","bounds","compare","desaturate","min","max","transparentColor","tintColor","BitmapLayer","getShaders","modules","initializeState","attributeManager","getAttributeManager","add","positions","size","update","calculatePositions","Float32Array","noAlloc","positions64xyLow","calculatePositions64xyLow","setState","numInstances","updateState","props","oldProps","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","loadTexture","_getPositionsFromBounds","invalidate","finalizeState","bitmapTexture","Array","Number","isFinite","i","length","Object","assign","id","shaderCache","geometry","drawMode","vertexCount","attributes","texCoords","isInstanced","draw","opts","uniforms","HTMLVideoElement","readyState","HAVE_METADATA","sizeChanged","width","videoWidth","height","videoHeight","resize","mipmaps","setSubImageData","data","paramters","generateMipmap","setUniforms","map","x","slice","parameters","set","attribute","isFP64","use64bitPositions","constant","layerName"],"mappings":"AAsBA,SAAQA,KAAR,EAAeC,WAAf,QAAiC,eAAjC;AACA,SAAQC,KAAR,EAAeC,QAAf,EAAyBC,SAAzB,QAAyC,eAAzC;AAEA,OAAOC,EAAP,MAAe,uBAAf;AACA,OAAOC,EAAP,MAAe,yBAAf;AAEA,MAAMC,0BAA0B,GAAG;AACjC,eADiC;AAEjC,eAFiC;AAGjC,gBAHiC;AAIjC;AAJiC,CAAnC;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AAACC,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAE,IAAxB;AAA8BC,IAAAA,KAAK,EAAE;AAArC,GADY;AAEnBC,EAAAA,MAAM,EAAE;AAACH,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAvB;AAAqCG,IAAAA,OAAO,EAAE;AAA9C,GAFW;AAInBC,EAAAA,UAAU,EAAE;AAACL,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,CAA9B;AAAiCN,IAAAA,KAAK,EAAE;AAAxC,GAJO;AAQnBO,EAAAA,gBAAgB,EAAE;AAACR,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAAvB,GARC;AASnBQ,EAAAA,SAAS,EAAE;AAACT,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX;AAAvB;AATQ,CAArB;AAkBA,eAAe,MAAMS,WAAN,SAA0BpB,KAA1B,CAAgC;AAC7CqB,EAAAA,UAAU,GAAG;AACX,WAAO,MAAMA,UAAN,CAAiB;AAAChB,MAAAA,EAAD;AAAKC,MAAAA,EAAL;AAASgB,MAAAA,OAAO,EAAE,CAAC,WAAD,EAAc,SAAd;AAAlB,KAAjB,CAAP;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,UAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AAEAD,IAAAA,gBAAgB,CAACE,GAAjB,CAAqB;AACnBC,MAAAA,SAAS,EAAE;AACTC,QAAAA,IAAI,EAAE,CADG;AAETC,QAAAA,MAAM,EAAE,KAAKC,kBAFJ;AAGTnB,QAAAA,KAAK,EAAE,IAAIoB,YAAJ,CAAiB,EAAjB,CAHE;AAITC,QAAAA,OAAO,EAAE;AAJA,OADQ;AAOnBC,MAAAA,gBAAgB,EAAE;AAChBL,QAAAA,IAAI,EAAE,CADU;AAEhBC,QAAAA,MAAM,EAAE,KAAKK,yBAFG;AAGhBvB,QAAAA,KAAK,EAAE,IAAIoB,YAAJ,CAAiB,EAAjB,CAHS;AAIhBC,QAAAA,OAAO,EAAE;AAJO;AAPC,KAArB;AAeA,SAAKG,QAAL,CAAc;AAACC,MAAAA,YAAY,EAAE;AAAf,KAAd;AACD;;AAEDC,EAAAA,WAAW,OAAiC;AAAA,QAA/BC,KAA+B,QAA/BA,KAA+B;AAAA,QAAxBC,QAAwB,QAAxBA,QAAwB;AAAA,QAAdC,WAAc,QAAdA,WAAc;;AAE1C,QAAIA,WAAW,CAACC,iBAAhB,EAAmC;AAAA,YAC1BC,EAD0B,GACpB,KAAKC,OADe,CAC1BD,EAD0B;;AAEjC,UAAI,KAAKE,KAAL,CAAWC,KAAf,EAAsB;AACpB,aAAKD,KAAL,CAAWC,KAAX,CAAiBC,MAAjB;AACD;;AACD,WAAKX,QAAL,CAAc;AAACU,QAAAA,KAAK,EAAE,KAAKE,SAAL,CAAeL,EAAf;AAAR,OAAd;AACA,WAAKjB,mBAAL,GAA2BuB,aAA3B;AACD;;AAED,QAAIV,KAAK,CAAC7B,KAAN,KAAgB8B,QAAQ,CAAC9B,KAA7B,EAAoC;AAClC,WAAKwC,WAAL,CAAiBX,KAAK,CAAC7B,KAAvB;AACD;;AAED,UAAMe,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;;AAEA,QAAIa,KAAK,CAACzB,MAAN,KAAiB0B,QAAQ,CAAC1B,MAA9B,EAAsC;AACpC,WAAKsB,QAAL,CAAc;AACZR,QAAAA,SAAS,EAAE,KAAKuB,uBAAL,CAA6BZ,KAAK,CAACzB,MAAnC;AADC,OAAd;AAGAW,MAAAA,gBAAgB,CAAC2B,UAAjB,CAA4B,WAA5B;AACA3B,MAAAA,gBAAgB,CAAC2B,UAAjB,CAA4B,kBAA5B;AACD;AACF;;AAEDC,EAAAA,aAAa,GAAG;AACd,UAAMA,aAAN;;AAEA,QAAI,KAAKR,KAAL,CAAWS,aAAf,EAA8B;AAC5B,WAAKT,KAAL,CAAWS,aAAX,CAAyBP,MAAzB;AACD;AACF;;AAEDI,EAAAA,uBAAuB,CAACrC,MAAD,EAAS;AAC9B,UAAMc,SAAS,GAAG,IAAI2B,KAAJ,CAAU,EAAV,CAAlB;;AAEA,QAAIC,MAAM,CAACC,QAAP,CAAgB3C,MAAM,CAAC,CAAD,CAAtB,CAAJ,EAAgC;AAQ9Bc,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAed,MAAM,CAAC,CAAD,CAArB;AACAc,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAed,MAAM,CAAC,CAAD,CAArB;AACAc,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,CAAf;AAEAA,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAed,MAAM,CAAC,CAAD,CAArB;AACAc,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAed,MAAM,CAAC,CAAD,CAArB;AACAc,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,CAAf;AAEAA,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAed,MAAM,CAAC,CAAD,CAArB;AACAc,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAed,MAAM,CAAC,CAAD,CAArB;AACAc,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,CAAf;AAEAA,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAed,MAAM,CAAC,CAAD,CAArB;AACAc,MAAAA,SAAS,CAAC,EAAD,CAAT,GAAgBd,MAAM,CAAC,CAAD,CAAtB;AACAc,MAAAA,SAAS,CAAC,EAAD,CAAT,GAAgB,CAAhB;AACD,KAvBD,MAuBO;AAEL,WAAK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5C,MAAM,CAAC6C,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC9B,QAAAA,SAAS,CAAC8B,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuB5C,MAAM,CAAC4C,CAAD,CAAN,CAAU,CAAV,CAAvB;AACA9B,QAAAA,SAAS,CAAC8B,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuB5C,MAAM,CAAC4C,CAAD,CAAN,CAAU,CAAV,CAAvB;AACA9B,QAAAA,SAAS,CAAC8B,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuB5C,MAAM,CAAC4C,CAAD,CAAN,CAAU,CAAV,KAAgB,CAAvC;AACD;AACF;;AAED,WAAO9B,SAAP;AACD;;AAEDoB,EAAAA,SAAS,CAACL,EAAD,EAAK;AACZ,QAAI,CAACA,EAAL,EAAS;AACP,aAAO,IAAP;AACD;;AAOD,WAAO,IAAIxC,KAAJ,CACLwC,EADK,EAELiB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKvC,UAAL,EAAlB,EAAqC;AACnCwC,MAAAA,EAAE,EAAE,KAAKvB,KAAL,CAAWuB,EADoB;AAEnCC,MAAAA,WAAW,EAAE,KAAKnB,OAAL,CAAamB,WAFS;AAGnCC,MAAAA,QAAQ,EAAE,IAAI5D,QAAJ,CAAa;AACrB6D,QAAAA,QAAQ,GADa;AAErBC,QAAAA,WAAW,EAAE,CAFQ;AAGrBC,QAAAA,UAAU,EAAE;AACVC,UAAAA,SAAS,EAAE,IAAIpC,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAjB;AADD;AAHS,OAAb,CAHyB;AAUnCqC,MAAAA,WAAW,EAAE;AAVsB,KAArC,CAFK,CAAP;AAeD;;AAEDC,EAAAA,IAAI,CAACC,IAAD,EAAO;AAAA,UACFC,QADE,GACUD,IADV,CACFC,QADE;AAAA,wBAEsB,KAAK3B,KAF3B;AAAA,UAEFS,aAFE,eAEFA,aAFE;AAAA,UAEaR,KAFb,eAEaA,KAFb;AAAA,wBAGgD,KAAKP,KAHrD;AAAA,UAGF7B,KAHE,eAGFA,KAHE;AAAA,UAGKM,UAHL,eAGKA,UAHL;AAAA,UAGiBG,gBAHjB,eAGiBA,gBAHjB;AAAA,UAGmCC,SAHnC,eAGmCA,SAHnC;;AAMT,QACEkC,aAAa,IACb5C,KAAK,YAAY+D,gBADjB,IAEA/D,KAAK,CAACgE,UAAN,GAAmBD,gBAAgB,CAACE,aAHtC,EAIE;AACA,YAAMC,WAAW,GACftB,aAAa,CAACuB,KAAd,KAAwBnE,KAAK,CAACoE,UAA9B,IAA4CxB,aAAa,CAACyB,MAAd,KAAyBrE,KAAK,CAACsE,WAD7E;;AAEA,UAAIJ,WAAJ,EAAiB;AAEftB,QAAAA,aAAa,CAAC2B,MAAd,CAAqB;AAACJ,UAAAA,KAAK,EAAEnE,KAAK,CAACoE,UAAd;AAA0BC,UAAAA,MAAM,EAAErE,KAAK,CAACsE,WAAxC;AAAqDE,UAAAA,OAAO,EAAE;AAA9D,SAArB;AACA5B,QAAAA,aAAa,CAAC6B,eAAd,CAA8B;AAC5BC,UAAAA,IAAI,EAAE1E,KADsB;AAE5B2E,UAAAA,SAAS,EAAE7E;AAFiB,SAA9B;AAID,OAPD,MAOO;AACL8C,QAAAA,aAAa,CAAC6B,eAAd,CAA8B;AAC5BC,UAAAA,IAAI,EAAE1E;AADsB,SAA9B;AAGD;;AAED4C,MAAAA,aAAa,CAACgC,cAAd;AACD;;AAID,QAAIhC,aAAa,IAAIR,KAArB,EAA4B;AAC1BA,MAAAA,KAAK,CACFyC,WADH,CAEI3B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBW,QAAlB,EAA4B;AAC1BlB,QAAAA,aAD0B;AAE1BtC,QAAAA,UAF0B;AAG1BG,QAAAA,gBAAgB,EAAEA,gBAAgB,CAACqE,GAAjB,CAAqBC,CAAC,IAAIA,CAAC,GAAG,GAA9B,CAHQ;AAI1BrE,QAAAA,SAAS,EAAEA,SAAS,CAACsE,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,EAAsBF,GAAtB,CAA0BC,CAAC,IAAIA,CAAC,GAAG,GAAnC;AAJe,OAA5B,CAFJ,EASGnB,IATH;AAUD;AACF;;AAEDpB,EAAAA,WAAW,CAACxC,KAAD,EAAQ;AAAA,UACViC,EADU,GACJ,KAAKC,OADD,CACVD,EADU;;AAGjB,QAAI,KAAKE,KAAL,CAAWS,aAAf,EAA8B;AAC5B,WAAKT,KAAL,CAAWS,aAAX,CAAyBP,MAAzB;AACD;;AAED,QAAIrC,KAAK,YAAYL,SAArB,EAAgC;AAC9B,WAAK+B,QAAL,CAAc;AAACkB,QAAAA,aAAa,EAAE5C;AAAhB,OAAd;AACD,KAFD,MAEO,IAAIA,KAAK,YAAY+D,gBAArB,EAAuC;AAE5C,WAAKrC,QAAL,CAAc;AACZkB,QAAAA,aAAa,EAAE,IAAIjD,SAAJ,CAAcsC,EAAd,EAAkB;AAC/BkC,UAAAA,KAAK,EAAE,CADwB;AAE/BE,UAAAA,MAAM,EAAE,CAFuB;AAG/BY,UAAAA,UAAU,EAAEnF,0BAHmB;AAI/B0E,UAAAA,OAAO,EAAE;AAJsB,SAAlB;AADH,OAAd;AAQD,KAVM,MAUA,IAAIxE,KAAJ,EAAW;AAEhB,WAAK0B,QAAL,CAAc;AACZkB,QAAAA,aAAa,EAAE,IAAIjD,SAAJ,CAAcsC,EAAd,EAAkB;AAC/ByC,UAAAA,IAAI,EAAE1E,KADyB;AAE/BiF,UAAAA,UAAU,EAAEnF;AAFmB,SAAlB;AADH,OAAd;AAMD;AACF;;AAEDuB,EAAAA,kBAAkB,QAAU;AAAA,QAARnB,KAAQ,SAARA,KAAQ;AAAA,UACnBgB,SADmB,GACN,KAAKiB,KADC,CACnBjB,SADmB;AAE1BhB,IAAAA,KAAK,CAACgF,GAAN,CAAUhE,SAAV;AACD;;AAEDO,EAAAA,yBAAyB,CAAC0D,SAAD,EAAY;AACnC,UAAMC,MAAM,GAAG,KAAKC,iBAAL,EAAf;AACAF,IAAAA,SAAS,CAACG,QAAV,GAAqB,CAACF,MAAtB;;AAEA,QAAI,CAACA,MAAL,EAAa;AACXD,MAAAA,SAAS,CAACjF,KAAV,GAAkB,IAAIoB,YAAJ,CAAiB,CAAjB,CAAlB;AACA;AACD;;AAPkC,UAS5BpB,KAT4B,GASnBiF,SATmB,CAS5BjF,KAT4B;AAUnCA,IAAAA,KAAK,CAACgF,GAAN,CAAU,KAAK/C,KAAL,CAAWjB,SAAX,CAAqB4D,GAArB,CAAyBtF,WAAzB,CAAV;AACD;;AAxN4C;AA2N/CmB,WAAW,CAAC4E,SAAZ,GAAwB,aAAxB;AACA5E,WAAW,CAACZ,YAAZ,GAA2BA,YAA3B","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global HTMLVideoElement */\nimport GL from '@luma.gl/constants';\nimport {Layer, fp64LowPart} from '@deck.gl/core';\nimport {Model, Geometry, Texture2D} from '@luma.gl/core';\n\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nconst defaultProps = {\n  image: {type: 'object', value: null, async: true},\n  bounds: {type: 'array', value: [1, 0, 0, 1], compare: true},\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]}\n};\n\n/*\n * @class\n * @param {object} props\n * @param {number} props.transparentColor - color to interpret transparency to\n * @param {number} props.tintColor - color bias\n */\nexport default class BitmapLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: ['project32', 'picking']});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.add({\n      positions: {\n        size: 3,\n        update: this.calculatePositions,\n        value: new Float32Array(12),\n        noAlloc: true\n      },\n      positions64xyLow: {\n        size: 3,\n        update: this.calculatePositions64xyLow,\n        value: new Float32Array(12),\n        noAlloc: true\n      }\n    });\n\n    this.setState({numInstances: 1});\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    // setup model first\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.image !== oldProps.image) {\n      this.loadTexture(props.image);\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      this.setState({\n        positions: this._getPositionsFromBounds(props.bounds)\n      });\n      attributeManager.invalidate('positions');\n      attributeManager.invalidate('positions64xyLow');\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    if (this.state.bitmapTexture) {\n      this.state.bitmapTexture.delete();\n    }\n  }\n\n  _getPositionsFromBounds(bounds) {\n    const positions = new Array(12);\n    // bounds as [minX, minY, maxX, maxY]\n    if (Number.isFinite(bounds[0])) {\n      /*\n        (minX0, maxY3) ---- (maxX2, maxY3)\n               |                  |\n               |                  |\n               |                  |\n        (minX0, minY1) ---- (maxX2, minY1)\n     */\n      positions[0] = bounds[0];\n      positions[1] = bounds[1];\n      positions[2] = 0;\n\n      positions[3] = bounds[0];\n      positions[4] = bounds[3];\n      positions[5] = 0;\n\n      positions[6] = bounds[2];\n      positions[7] = bounds[3];\n      positions[8] = 0;\n\n      positions[9] = bounds[2];\n      positions[10] = bounds[1];\n      positions[11] = 0;\n    } else {\n      // [[minX, minY], [minX, maxY], [maxX, maxY], [maxX, minY]]\n      for (let i = 0; i < bounds.length; i++) {\n        positions[i * 3 + 0] = bounds[i][0];\n        positions[i * 3 + 1] = bounds[i][1];\n        positions[i * 3 + 2] = bounds[i][2] || 0;\n      }\n    }\n\n    return positions;\n  }\n\n  _getModel(gl) {\n    if (!gl) {\n      return null;\n    }\n\n    /*\n      0,1 --- 1,1\n       |       |\n      0,0 --- 1,0\n    */\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        shaderCache: this.context.shaderCache,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertexCount: 4,\n          attributes: {\n            texCoords: new Float32Array([0, 0, 0, 1, 1, 1, 1, 0])\n          }\n        }),\n        isInstanced: false\n      })\n    );\n  }\n\n  draw(opts) {\n    const {uniforms} = opts;\n    const {bitmapTexture, model} = this.state;\n    const {image, desaturate, transparentColor, tintColor} = this.props;\n\n    // Update video frame\n    if (\n      bitmapTexture &&\n      image instanceof HTMLVideoElement &&\n      image.readyState > HTMLVideoElement.HAVE_METADATA\n    ) {\n      const sizeChanged =\n        bitmapTexture.width !== image.videoWidth || bitmapTexture.height !== image.videoHeight;\n      if (sizeChanged) {\n        // note clears image and mipmaps when resizing\n        bitmapTexture.resize({width: image.videoWidth, height: image.videoHeight, mipmaps: true});\n        bitmapTexture.setSubImageData({\n          data: image,\n          paramters: DEFAULT_TEXTURE_PARAMETERS\n        });\n      } else {\n        bitmapTexture.setSubImageData({\n          data: image\n        });\n      }\n\n      bitmapTexture.generateMipmap();\n    }\n\n    // // TODO fix zFighting\n    // Render the image\n    if (bitmapTexture && model) {\n      model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            bitmapTexture,\n            desaturate,\n            transparentColor: transparentColor.map(x => x / 255),\n            tintColor: tintColor.slice(0, 3).map(x => x / 255)\n          })\n        )\n        .draw();\n    }\n  }\n\n  loadTexture(image) {\n    const {gl} = this.context;\n\n    if (this.state.bitmapTexture) {\n      this.state.bitmapTexture.delete();\n    }\n\n    if (image instanceof Texture2D) {\n      this.setState({bitmapTexture: image});\n    } else if (image instanceof HTMLVideoElement) {\n      // Initialize an empty texture while we wait for the video to load\n      this.setState({\n        bitmapTexture: new Texture2D(gl, {\n          width: 1,\n          height: 1,\n          parameters: DEFAULT_TEXTURE_PARAMETERS,\n          mipmaps: false\n        })\n      });\n    } else if (image) {\n      // Browser object: Image, ImageData, HTMLCanvasElement, ImageBitmap\n      this.setState({\n        bitmapTexture: new Texture2D(gl, {\n          data: image,\n          parameters: DEFAULT_TEXTURE_PARAMETERS\n        })\n      });\n    }\n  }\n\n  calculatePositions({value}) {\n    const {positions} = this.state;\n    value.set(positions);\n  }\n\n  calculatePositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(4);\n      return;\n    }\n\n    const {value} = attribute;\n    value.set(this.state.positions.map(fp64LowPart));\n  }\n}\n\nBitmapLayer.layerName = 'BitmapLayer';\nBitmapLayer.defaultProps = defaultProps;\n"],"file":"bitmap-layer.js"}