{"version":3,"sources":["../../../../src/text-layer/multi-icon-layer/multi-icon-layer.js"],"names":["createIterable","IconLayer","vs","fs","DEFAULT_GAMMA","DEFAULT_BUFFER","defaultProps","getRowSize","type","value","x","rowSize","getOffsets","offsets","getParagraphSize","size","getAnchorX","anchorX","getAnchorY","anchorY","getPixelOffset","getPickingIndex","objectIndex","MultiIconLayer","Object","assign","attributeManager","getAttributeManager","addInstanced","instancePixelOffset","transition","accessor","updateParams","changeFlags","updateTriggersChanged","invalidate","uniforms","sdf","props","buffer","gamma","Boolean","attribute","startRow","endRow","data","iconMapping","getIcon","i","iterable","object","icon","rect","width","height","rowWidth","offsetX","offsetY","rowOffset","pickingColor","point","index","encodePickingColor","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createIterable} from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\n\nimport vs from './multi-icon-layer-vertex.glsl';\nimport fs from './multi-icon-layer-fragment.glsl';\n\n// TODO expose as layer properties\nconst DEFAULT_GAMMA = 0.2;\nconst DEFAULT_BUFFER = 192.0 / 256;\n\nconst defaultProps = {\n  // each paragraph can have one or multiple row(s)\n  // each row can have one or multiple character(s)\n  getRowSize: {type: 'accessor', value: x => x.rowSize || [0, 0]},\n  // offset from the left, top position of the paragraph\n  getOffsets: {type: 'accessor', value: x => x.offsets || [0, 0]},\n  // [width, height] of the paragraph\n  getParagraphSize: {type: 'accessor', value: x => x.size || [1, 1]},\n  // 1: left, 0: middle, -1: right\n  getAnchorX: {type: 'accessor', value: x => x.anchorX || 0},\n  // 1: top, 0: center, -1: bottom\n  getAnchorY: {type: 'accessor', value: x => x.anchorY || 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  // object with the same pickingIndex will be picked when any one of them is being picked\n  getPickingIndex: {type: 'accessor', value: x => x.objectIndex}\n};\n\nexport default class MultiIconLayer extends IconLayer {\n  getShaders() {\n    return Object.assign({}, super.getShaders(), {\n      vs,\n      fs\n    });\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n    const {changeFlags} = updateParams;\n\n    if (\n      changeFlags.updateTriggersChanged &&\n      (changeFlags.updateTriggersChanged.getAnchorX || changeFlags.updateTriggersChanged.getAnchorY)\n    ) {\n      this.getAttributeManager().invalidate('instanceOffsets');\n    }\n  }\n\n  draw({uniforms}) {\n    const {sdf} = this.props;\n    super.draw({\n      uniforms: Object.assign({}, uniforms, {\n        // Refer the following doc about gamma and buffer\n        // https://blog.mapbox.com/drawing-text-with-signed-distance-fields-in-mapbox-gl-b0933af6f817\n        buffer: DEFAULT_BUFFER,\n        gamma: DEFAULT_GAMMA,\n        sdf: Boolean(sdf)\n      })\n    });\n  }\n\n  calculateInstanceOffsets(attribute, {startRow, endRow}) {\n    const {\n      data,\n      iconMapping,\n      getIcon,\n      getAnchorX,\n      getAnchorY,\n      getParagraphSize,\n      getRowSize,\n      getOffsets\n    } = this.props;\n    const {value, size} = attribute;\n    let i = startRow * size;\n    const {iterable} = createIterable(data, startRow, endRow);\n\n    for (const object of iterable) {\n      const icon = getIcon(object);\n      const rect = iconMapping[icon] || {};\n      const [width, height] = getParagraphSize(object);\n      const [rowWidth] = getRowSize(object);\n      const [offsetX, offsetY] = getOffsets(object);\n      const anchorX = getAnchorX(object);\n      const anchorY = getAnchorY(object);\n\n      // For a multi-line object, offset in x-direction needs consider\n      // the row offset in the paragraph and the object offset in the row\n      const rowOffset = ((1 - anchorX) * (width - rowWidth)) / 2;\n      value[i++] = ((anchorX - 1) * width) / 2 + rowOffset + rect.width / 2 + offsetX || 0;\n      value[i++] = ((anchorY - 1) * height) / 2 + rect.height / 2 + offsetY || 0;\n    }\n  }\n\n  calculateInstancePickingColors(attribute, {startRow, endRow}) {\n    const {data, getPickingIndex} = this.props;\n    const {value, size} = attribute;\n    let i = startRow * size;\n    const pickingColor = [];\n    const {iterable} = createIterable(data, startRow, endRow);\n\n    for (const point of iterable) {\n      const index = getPickingIndex(point);\n      this.encodePickingColor(index, pickingColor);\n\n      value[i++] = pickingColor[0];\n      value[i++] = pickingColor[1];\n      value[i++] = pickingColor[2];\n    }\n  }\n}\n\nMultiIconLayer.layerName = 'MultiIconLayer';\nMultiIconLayer.defaultProps = defaultProps;\n"],"file":"multi-icon-layer.js"}