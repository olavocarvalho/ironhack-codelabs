{"version":3,"sources":["../../../src/lib/load.js"],"names":["loadInBatches","url","loaders","options","response","load","Array","isArray","autoUrl","name","loader","loadAndParse","data"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;SAEsBA,a;;;;;mFAAf,iBAA6BC,GAA7B,EAAkCC,OAAlC,EAA2CC,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkB,0BAAUF,GAAV,EAAeE,OAAf,CADlB;;AAAA;AACCC,YAAAA,QADD;AAAA,6CAEE,2BAAeA,QAAf,EAAyBF,OAAzB,EAAkCC,OAAlC,EAA2CF,GAA3C,CAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAQeI,I;;;;;0EAAf,kBAAoBJ,GAApB,EAAyBC,OAAzB,EAAkCC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAGL,gBAAI,CAACG,KAAK,CAACC,OAAN,CAAcL,OAAd,CAAD,IAA2B,CAAC,qCAAeA,OAAf,CAAhC,EAAyD;AACvDC,cAAAA,OAAO,GAAGD,OAAV;AACAA,cAAAA,OAAO,GAAG,IAAV;AACD;;AAGKM,YAAAA,OATD,GASW,4BAAeP,GAAf,IAAsBA,GAAG,CAACQ,IAA1B,GAAiCR,GAT5C;AAWLC,YAAAA,OAAO,GAAGA,OAAO,IAAI,4CAArB;AACMQ,YAAAA,MAZD,GAYUJ,KAAK,CAACC,OAAN,CAAcL,OAAd,IAAyB,wCAAiB,IAAjB,EAAuBA,OAAvB,EAAgC;AAACD,cAAAA,GAAG,EAAEO;AAAN,aAAhC,CAAzB,GAA2EN,OAZrF;AAcLC,YAAAA,OAAO,GAAG,iDAA0BA,OAA1B,EAAmCO,MAAnC,CAAV;;AAdK,kBAiBDA,MAAM,IAAIA,MAAM,CAACC,YAjBhB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAkBUD,MAAM,CAACC,YAAP,CAAoBV,GAApB,EAAyBE,OAAzB,CAlBV;;AAAA;AAAA;;AAAA;AAsBDS,YAAAA,IAtBC,GAsBMX,GAtBN;;AAAA,kBAuBD,4BAAeW,IAAf,KAAwB,OAAOA,IAAP,KAAgB,QAvBvC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAwBU,0BAAUX,GAAV,EAAeE,OAAf,CAxBV;;AAAA;AAwBHS,YAAAA,IAxBG;;AAAA;AAAA,8CA0BE,kBAAMA,IAAN,EAAYV,OAAZ,EAAqBC,OAArB,EAA8BK,OAA9B,CA1BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {isFileReadable} from '../javascript-utils/is-type';\nimport {fetchFile} from './fetch/fetch-file';\nimport {isLoaderObject} from './loader-utils/normalize-loader';\nimport {mergeLoaderAndUserOptions} from './loader-utils/normalize-options';\nimport {autoDetectLoader} from './loader-utils/auto-detect-loader';\n\nimport {parse, parseInBatches} from './parse';\nimport {getRegisteredLoaders} from './register-loaders';\n\nexport async function loadInBatches(url, loaders, options) {\n  const response = await fetchFile(url, options);\n  return parseInBatches(response, loaders, options, url);\n}\n\n// Note: Load does duplicate a lot of parse.\n// Works like parse but can call `loadAndParse` for parsers that need to do their own loading\n// it can also call fetchFile on string urls, which `parse` won't do.\nexport async function load(url, loaders, options) {\n  // Signature: load(url, options)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    options = loaders;\n    loaders = null;\n  }\n\n  // Extract a url for auto detection\n  const autoUrl = isFileReadable(url) ? url.name : url;\n\n  loaders = loaders || getRegisteredLoaders();\n  const loader = Array.isArray(loaders) ? autoDetectLoader(null, loaders, {url: autoUrl}) : loaders;\n\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  // Some loaders can not separate reading and parsing of data (e.g ImageLoader)\n  if (loader && loader.loadAndParse) {\n    return await loader.loadAndParse(url, options);\n  }\n\n  // at this point, data can be binary or text\n  let data = url;\n  if (isFileReadable(data) || typeof data === 'string') {\n    data = await fetchFile(url, options);\n  }\n  return parse(data, loaders, options, autoUrl);\n}\n"],"file":"load.js"}