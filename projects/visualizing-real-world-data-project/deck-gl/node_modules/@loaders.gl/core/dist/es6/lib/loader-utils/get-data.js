import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { isFetchResponse, isReadableStream, isAsyncIterable, isIterable, isIterator, isFileReadable } from '../../javascript-utils/is-type';
import { getStreamIterator } from '../../javascript-utils/stream-utils';
import fetchFileReadable from '../fetch/fetch-file.browser';
import { checkFetchResponseStatus, checkFetchResponseStatusSync } from './check-errors';
var ERR_DATA = 'Cannot convert supplied data type';
export function getUrlFromData(data, url) {
  if (isFetchResponse(data)) {
    url = url || data.url;
  } else if (isFileReadable(url)) {
    url = url.name;
  }

  return typeof url === 'string' ? url.replace(/\?.*/, '') : url;
}
export function getArrayBufferOrStringFromDataSync(data, loader) {
  if (loader.text && typeof data === 'string') {
    return data;
  }

  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
    var arrayBuffer = data.buffer || data;

    if (loader.text && !loader.binary) {
      var textDecoder = new TextDecoder('utf8');
      return textDecoder.decode(arrayBuffer);
    }

    return arrayBuffer;
  }

  throw new Error(ERR_DATA);
}
export function getArrayBufferOrStringFromData(_x, _x2) {
  return _getArrayBufferOrStringFromData.apply(this, arguments);
}

function _getArrayBufferOrStringFromData() {
  _getArrayBufferOrStringFromData = _asyncToGenerator(function* (data, loader) {
    data = yield data;
    var isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);

    if (typeof data === 'string' || isArrayBuffer) {
      return getArrayBufferOrStringFromDataSync(data, loader);
    }

    if (isFileReadable(data)) {
      data = yield fetchFileReadable(data);
    }

    if (isFetchResponse(data)) {
      yield checkFetchResponseStatus(data);
      return loader.binary ? yield data.arrayBuffer() : yield data.text();
    }

    throw new Error(ERR_DATA);
  });
  return _getArrayBufferOrStringFromData.apply(this, arguments);
}

export function getAsyncIteratorFromData(data) {
  if (isIterator(data)) {
    return data;
  }

  if (isFetchResponse(data) && data.body) {
    checkFetchResponseStatusSync(data);
    return getStreamIterator(data.body);
  }

  if (isReadableStream(data)) {
    return getStreamIterator(data);
  }

  if (isAsyncIterable(data)) {
    return data[Symbol.asyncIterator]();
  }

  return getIteratorFromData(data);
}
export function getIteratorFromData(data) {
  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
    return function* oneChunk() {
      yield data.buffer || data;
    }();
  }

  if (isIterator(data)) {
    return data;
  }

  if (isIterable(data)) {
    return data[Symbol.iterator]();
  }

  throw new Error(ERR_DATA);
}
//# sourceMappingURL=get-data.js.map