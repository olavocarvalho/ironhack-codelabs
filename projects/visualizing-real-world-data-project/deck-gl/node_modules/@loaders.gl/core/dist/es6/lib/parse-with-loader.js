import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import assert from '../utils/assert';
import parseWithWorker from './parse-with-worker';
import { getArrayBufferOrStringFromDataSync, getArrayBufferOrStringFromData, getAsyncIteratorFromData, getIteratorFromData } from './loader-utils/get-data';
export function parseWithLoader(_x, _x2, _x3, _x4) {
  return _parseWithLoader.apply(this, arguments);
}

function _parseWithLoader() {
  _parseWithLoader = _asyncToGenerator(function* (data, loader, options, url) {
    data = yield getArrayBufferOrStringFromData(data, loader);

    if (loader.parseTextSync && typeof data === 'string') {
      options.dataType = 'text';
      return loader.parseTextSync(data, options, url, loader);
    }

    if (loader.parse) {
      return yield loader.parse(data, options, url, loader);
    }

    if (loader.parseSync) {
      return loader.parseSync(data, options, url, loader);
    }

    if (loader.worker) {
      return parseWithWorker(loader.worker, loader.name, data, options);
    }

    return assert(false);
  });
  return _parseWithLoader.apply(this, arguments);
}

export function parseWithLoaderSync(data, loader, options, url) {
  data = getArrayBufferOrStringFromDataSync(data, loader);

  if (loader.parseTextSync && typeof data === 'string') {
    return loader.parseTextSync(data, options, url, loader);
  }

  if (loader.parseSync) {
    return loader.parseSync(data, options, url, loader);
  }

  return assert(false);
}
export function parseWithLoaderInBatches(data, loader, options, url) {
  if (loader.parseInBatches) {
    var inputIterator = getAsyncIteratorFromData(data);
    var outputIterator = loader.parseInBatches(inputIterator, options, url, loader);
    return outputIterator;
  }

  return null;
}
export function parseWithLoaderInBatchesSync(data, loader, options, url) {
  if (loader.parseInBatchesSync) {
    var inputIterator = getIteratorFromData(data);
    var outputIterator = loader.parseInBatchesSync(inputIterator, options, url, loader, url);
    return outputIterator;
  }

  return assert(false);
}
//# sourceMappingURL=parse-with-loader.js.map