import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { autoDetectLoader } from './loader-utils/auto-detect-loader';
import { normalizeLoader, isLoaderObject } from './loader-utils/normalize-loader';
import { mergeLoaderAndUserOptions } from './loader-utils/normalize-options';
import { getUrlFromData } from './loader-utils/get-data';
import { getRegisteredLoaders } from './register-loaders';
import { parseWithLoader, parseWithLoaderInBatches, parseWithLoaderSync } from './parse-with-loader';
export function parse(_x, _x2, _x3, _x4) {
  return _parse.apply(this, arguments);
}

function _parse() {
  _parse = _asyncToGenerator(function* (data, loaders, options, url) {
    if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {
      url = options;
      options = loaders;
      loaders = null;
    }

    var autoUrl = getUrlFromData(data, url);
    loaders = loaders || getRegisteredLoaders();
    var loader = Array.isArray(loaders) ? autoDetectLoader(data, loaders, {
      url: autoUrl
    }) : loaders;

    if (!loader) {
      return null;
    }

    normalizeLoader(loader);
    options = mergeLoaderAndUserOptions(options, loader);
    return yield parseWithLoader(data, loader, options, autoUrl);
  });
  return _parse.apply(this, arguments);
}

export function parseSync(data, loaders, options, url) {
  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {
    url = options;
    options = loaders;
    loaders = null;
  }

  loaders = loaders || getRegisteredLoaders();
  var loader = Array.isArray(loaders) ? autoDetectLoader(data, loaders, {
    url
  }) : loaders;
  normalizeLoader(loader);
  options = mergeLoaderAndUserOptions(options, loader);
  return parseWithLoaderSync(data, loader, options, url);
}
export function parseInBatches(_x5, _x6, _x7, _x8) {
  return _parseInBatches.apply(this, arguments);
}

function _parseInBatches() {
  _parseInBatches = _asyncToGenerator(function* (data, loaders, options, url) {
    if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {
      url = options;
      options = loaders;
      loaders = null;
    }

    loaders = loaders || getRegisteredLoaders();
    var loader = Array.isArray(loaders) ? autoDetectLoader(null, loaders, {
      url
    }) : loaders;
    normalizeLoader(loader);
    options = mergeLoaderAndUserOptions(options, loader);
    return parseWithLoaderInBatches(data, loader, options, url);
  });
  return _parseInBatches.apply(this, arguments);
}

export function parseInBatchesSync(_x9, _x10, _x11, _x12) {
  return _parseInBatchesSync.apply(this, arguments);
}

function _parseInBatchesSync() {
  _parseInBatchesSync = _asyncToGenerator(function* (data, loaders, options, url) {
    if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {
      url = options;
      options = loaders;
      loaders = null;
    }

    loaders = loaders || getRegisteredLoaders();
    var loader = Array.isArray(loaders) ? autoDetectLoader(null, loaders, {
      url
    }) : loaders;
    normalizeLoader(loader);
    options = mergeLoaderAndUserOptions(options, loader);
    return parseWithLoaderInBatches(data, loader, options, url);
  });
  return _parseInBatchesSync.apply(this, arguments);
}
//# sourceMappingURL=parse.js.map