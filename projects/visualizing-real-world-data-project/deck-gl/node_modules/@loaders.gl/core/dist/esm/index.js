import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { parse, parseSync } from './lib/parse';
import { fetchFile } from './lib/fetch/fetch-file';
import { load } from './lib/load';
import { resolvePath } from './lib/fetch/file-aliases';
import { global } from './utils/globals';
import * as path from './lib/path/path';
export { path };
export { setPathPrefix, getPathPrefix, resolvePath } from './lib/fetch/file-aliases.js';
export { fetchFile } from './lib/fetch/fetch-file';
export { readFileSync } from './lib/fetch/read-file';
export { writeFile, writeFileSync } from './lib/fetch/write-file';
export { getErrorMessageFromResponseSync as _getErrorMessageFromResponseSync, getErrorMessageFromResponse as _getErrorMessageFromResponse } from './lib/fetch/fetch-error-message';
export { registerLoaders } from './lib/register-loaders';
export { parse, parseSync, parseInBatches, parseInBatchesSync } from './lib/parse';
export { load, loadInBatches } from './lib/load';
export { encode, encodeSync, encodeInBatches } from './lib/encode';
export { save, saveSync } from './lib/save';
export { isPromise, isIterable, isAsyncIterable, isIterator, isFetchResponse, isReadableStream, isWritableStream } from './javascript-utils/is-type';
export { toArrayBuffer } from './javascript-utils/binary-utils';
export { getStreamIterator } from './javascript-utils/stream-utils';
export { forEach, concatenateAsyncIterator, lineAsyncIterator, textDecoderAsyncIterator, numberedLineAsyncIterator } from './javascript-utils/async-iterator-utils';
export { isBrowser, self, window, global, document } from './utils/globals';
export { default as assert } from './utils/assert';
export var TextEncoder = global.TextEncoder;
export var TextDecoder = global.TextDecoder;
export function createReadStream(_x, _x2) {
  return _createReadStream.apply(this, arguments);
}

function _createReadStream() {
  _createReadStream = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url, options) {
    var response;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            console.warn('createReadStream() deprecated, use fetch().then(resp => resp.body)');
            url = resolvePath(url);
            _context.next = 4;
            return fetchFile(url, options);

          case 4:
            response = _context.sent;
            return _context.abrupt("return", response.body);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _createReadStream.apply(this, arguments);
}

export function parseFile() {
  console.warn('parse() deprecated, use parse()');
  return parse.apply(void 0, arguments);
}
export function parseFileSync() {
  console.warn('parseSync() deprecated, use parseSync()');
  return parseSync.apply(void 0, arguments);
}
export function loadFile() {
  console.warn('loadFile() deprecated, use load()');
  return load.apply(void 0, arguments);
}
//# sourceMappingURL=index.js.map