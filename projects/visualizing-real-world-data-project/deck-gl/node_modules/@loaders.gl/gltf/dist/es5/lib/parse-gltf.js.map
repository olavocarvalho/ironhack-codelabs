{"version":3,"sources":["../../../src/lib/parse-gltf.js"],"names":["DEFAULT_SYNC_OPTIONS","fetchLinkedResources","decompress","DracoLoader","postProcess","createImages","log","console","DEFAULT_ASYNC_OPTIONS","fetch","fetchFile","isGLTF","arrayBuffer","options","dataView","DataView","byteOffset","parseGLTFSync","gltf","arrayBufferOrString","Object","assign","data","ArrayBuffer","textDecoder","TextDecoder","decode","buffers","json","JSON","parse","hasBinChunk","push","binChunkByteOffset","byteLength","binChunkLength","uri","baseUri","buffer","Error","decodeExtensions","parseGLTF","window","response","extensionName","EXTENSIONS","disableExtension","extension"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements, no-restricted-globals */\n/* global TextDecoder */\nimport {fetchFile} from '@loaders.gl/core';\nimport assert from './utils/assert';\nimport {getFullUri} from './gltf-utils/gltf-utils';\nimport parseGLBSync, {isGLB} from './parse-glb';\nimport * as EXTENSIONS from './extensions';\n\n// import {getGLTFAccessors, getGLTFAccessor} from './gltf-attribute-utils';\n// import {\n//   ATTRIBUTE_TYPE_TO_COMPONENTS,\n//   ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE,\n//   ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY\n// } from '../gltf/gltf-utils';\n\nconst DEFAULT_SYNC_OPTIONS = {\n  fetchLinkedResources: false, // Fetch any linked .BIN buffers, decode base64\n  decompress: false, // Decompress Draco compressed meshes (if DracoLoader available)\n  DracoLoader: null,\n  postProcess: true,\n  createImages: false, // Create image objects\n  log: console // eslint-disable-line\n};\n\nconst DEFAULT_ASYNC_OPTIONS = {\n  fetchLinkedResources: true, // Fetch any linked .BIN buffers, decode base64\n  fetch: fetchFile,\n  decompress: false, // Decompress Draco compressed meshes (if DracoLoader available)\n  DracoLoader: null,\n  postProcess: true,\n  createImages: false, // Create image objects\n  log: console // eslint-disable-line\n};\n\nexport function isGLTF(arrayBuffer, options = {}) {\n  const dataView = new DataView(arrayBuffer);\n  const byteOffset = 0;\n  return isGLB(dataView, byteOffset);\n}\n\n// NOTE: The sync parser cannot handle linked assets or base64 encoded resources\n// gtlf - input can be arrayBuffer (GLB or UTF8 encoded JSON), string (JSON), or parsed JSON.\nexport function parseGLTFSync(gltf, arrayBufferOrString, byteOffset = 0, options = {}) {\n  options = Object.assign({}, DEFAULT_SYNC_OPTIONS, options);\n\n  let data = arrayBufferOrString;\n\n  // If binary is not starting with magic bytes, assume JSON and convert to string\n  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {\n    const textDecoder = new TextDecoder();\n    data = textDecoder.decode(data);\n  }\n\n  gltf.buffers = [];\n\n  // If string, try to parse as JSON\n  if (typeof data === 'string') {\n    gltf.json = JSON.parse(data);\n  } else if (data instanceof ArrayBuffer) {\n    // Populates JSON and some bin chunk info\n    byteOffset = parseGLBSync(gltf, data, byteOffset, options);\n\n    if (gltf.hasBinChunk) {\n      gltf.buffers.push({\n        arrayBuffer: data,\n        byteOffset: gltf.binChunkByteOffset,\n        byteLength: gltf.binChunkLength\n      });\n    }\n  } else {\n    // Assume parsed JSON\n    gltf.json = data;\n  }\n\n  if (options.uri) {\n    gltf.baseUri = options.uri;\n  }\n\n  // TODO: we could synchronously decode base64 encoded URIs in the non-async path\n  if (options.fetchLinkedResources) {\n    for (const buffer of gltf.json.buffers || []) {\n      if (buffer.uri) {\n        throw new Error('parseGLTFSync: Cannot decode uri buffers');\n      }\n    }\n  }\n\n  decodeExtensions(gltf, options);\n\n  return byteOffset;\n}\n\nexport async function parseGLTF(gltf, arrayBufferOrString, byteOffset = 0, options = {}) {\n  options = Object.assign({}, DEFAULT_ASYNC_OPTIONS, options);\n\n  // Postpone decompressing/postprocessing to make sure we load any linked files first\n  // TODO - is this really needed?\n  parseGLTFSync(gltf, arrayBufferOrString, byteOffset, {\n    ...options,\n    fetchLinkedResources: false, // We'll handle it if needed\n    postProcess: false, // We'll handle it if needed\n    decompress: false // We'll handle it if needed\n  });\n\n  // Load linked buffers asynchronously and decodes base64 buffers in parallel\n  if (options.fetchLinkedResources) {\n    await fetchLinkedResources(gltf, options);\n  }\n\n  return gltf;\n}\n\nasync function fetchLinkedResources(gltf, options) {\n  for (const buffer of gltf.json.buffers) {\n    if (buffer.uri) {\n      const fetch = options.fetch || window.fetch;\n      assert(fetch);\n      const uri = getFullUri(buffer.uri, options.uri);\n      const response = await fetch(uri);\n      const arrayBuffer = await response.arrayBuffer();\n      buffer.data = arrayBuffer;\n      delete buffer.uri;\n    }\n  }\n}\n\n// TODO - async decoding for Draco\nfunction decodeExtensions(gltf, options) {\n  for (const extensionName in EXTENSIONS) {\n    const disableExtension = extensionName in options && !options[extensionName];\n    if (!disableExtension) {\n      const extension = EXTENSIONS[extensionName];\n      extension.decode(gltf, options);\n    }\n  }\n}\n"],"file":"parse-gltf.js"}