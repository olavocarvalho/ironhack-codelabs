{"version":3,"sources":["../../../src/lib/post-process-gltf.js"],"names":["COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","BYTES","GL_SAMPLER","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","REPEAT","LINEAR","NEAREST_MIPMAP_LINEAR","SAMPLER_PARAMETER_GLTF_TO_GL","magFilter","minFilter","wrapS","wrapT","DEFAULT_SAMPLER","TEXTURE_WRAP_","getBytesFromComponentType","componentType","getSizeFromAccessorType","type","GLTFPostProcessor","gltf","options","json","buffers","_resolveTree","bufferViews","map","bufView","i","_resolveBufferView","images","image","_resolveImage","samplers","sampler","_resolveSampler","textures","texture","_resolveTexture","accessors","accessor","_resolveAccessor","materials","material","_resolveMaterial","meshes","mesh","_resolveMesh","nodes","node","_resolveNode","skins","skin","_resolveSkin","scenes","scene","_resolveScene","undefined","index","_get","array","object","console","warn","id","getNode","children","child","getMesh","camera","getCamera","getSkin","inverseBindMatrices","getAccessor","primitives","primitive","attributes","attribute","indices","getMaterial","normalTexture","getTexture","occlusionTexture","occlustionTexture","emissiveTexture","emmisiveTexture","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","bufferView","getBufferView","bytesPerComponent","components","bytesPerElement","getSampler","source","getImage","parameters","key","glEnum","_enumSamplerParameter","baseUri","uri","fullUri","getImageAsync","Promise","resolve","img","Image","crossOrigin","onload","src","bufferIndex","buffer","getBuffer","arrayBuffer","byteOffset","data","Uint8Array","byteLength","perspective","orthographic","postProcessGLTF","postProcess"],"mappings":"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","sourcesContent":["import {getFullUri} from './gltf-utils/gltf-utils';\n\n// This is a post processor for loaded glTF files\n// The goal is to make the loaded data easier to use in WebGL applications\n//\n// Functions:\n// * Resolve indexed arrays structure of glTF into a linked tree.\n// * Translate stringified enum keys and values into WebGL constants.\n// * Load images (optional)\n\n// ENUM LOOKUP\n\nconst COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst BYTES = {\n  5120: 1, // BYTE\n  5121: 1, // UNSIGNED_BYTE\n  5122: 2, // SHORT\n  5123: 2, // UNSIGNED_SHORT\n  5125: 4, // UNSIGNED_INT\n  5126: 4 // FLOAT\n};\n\nconst GL_SAMPLER = {\n  // Sampler parameters\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n\n  // Sampler default values\n  REPEAT: 0x2901,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_LINEAR: 0x2702\n};\n\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\n// When undefined, a sampler with repeat wrapping and auto filtering should be used.\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\nconst DEFAULT_SAMPLER = {\n  [GL_SAMPLER.TEXTURE_MAG_FILTER]: GL_SAMPLER.LINEAR,\n  [GL_SAMPLER.TEXTURE_MIN_FILTER]: GL_SAMPLER.NEAREST_MIPMAP_LINEAR,\n  [GL_SAMPLER.TEXTURE_WRAP_S]: GL_SAMPLER.REPEAT,\n  [GL_SAMPLER.TEXTURE_WRAP_]: GL_SAMPLER.REPEAT\n};\n\nfunction getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\n\nfunction getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\n\nclass GLTFPostProcessor {\n  postProcess(gltf, options = {}) {\n    this.gltf = gltf;\n    this.json = gltf.json;\n    this.buffers = gltf.buffers;\n    return this._resolveTree(gltf.json, options);\n  }\n\n  // Convert indexed glTF structure into tree structure\n  // cross-link index resolution, enum lookup, convenience calculations\n  // eslint-disable-next-line complexity\n  _resolveTree(json, options = {}) {\n    if (json.bufferViews) {\n      json.bufferViews = json.bufferViews.map((bufView, i) => this._resolveBufferView(bufView, i));\n    }\n    if (json.images) {\n      json.images = json.images.map((image, i) => this._resolveImage(image, i, options));\n    }\n    if (json.samplers) {\n      json.samplers = json.samplers.map((sampler, i) => this._resolveSampler(sampler, i));\n    }\n    if (json.textures) {\n      json.textures = json.textures.map((texture, i) => this._resolveTexture(texture, i));\n    }\n    if (json.accessors) {\n      json.accessors = json.accessors.map((accessor, i) => this._resolveAccessor(accessor, i));\n    }\n    if (json.materials) {\n      json.materials = json.materials.map((material, i) => this._resolveMaterial(material, i));\n    }\n    if (json.meshes) {\n      json.meshes = json.meshes.map((mesh, i) => this._resolveMesh(mesh, i));\n    }\n    if (json.nodes) {\n      json.nodes = json.nodes.map((node, i) => this._resolveNode(node, i));\n    }\n    if (json.skins) {\n      json.skins = json.skins.map((skin, i) => this._resolveSkin(skin, i));\n    }\n    if (json.scenes) {\n      json.scenes = json.scenes.map((scene, i) => this._resolveScene(scene, i));\n    }\n    if (json.scene !== undefined) {\n      json.scene = json.scenes[this.json.scene];\n    }\n\n    // TODO arrays added by extensions, e.g. lights\n\n    return json;\n  }\n  /* eslint-enable complexity */\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  _get(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PARSING HELPERS\n\n  _resolveScene(scene, index) {\n    scene = {...scene};\n    scene.id = scene.id || `scene-${index}`;\n    scene.nodes = (scene.nodes || []).map(node => this.getNode(node));\n    return scene;\n  }\n\n  _resolveNode(node, index) {\n    node = {...node};\n    node.id = node.id || `node-${index}`;\n    if (node.children) {\n      node.children = node.children.map(child => this.getNode(child));\n    }\n    if (node.mesh !== undefined) {\n      node.mesh = this.getMesh(node.mesh);\n    }\n    if (node.camera !== undefined) {\n      node.camera = this.getCamera(node.camera);\n    }\n    if (node.skin !== undefined) {\n      node.skin = this.getSkin(node.skin);\n    }\n    return node;\n  }\n\n  _resolveSkin(skin, index) {\n    skin = {...skin};\n    skin.id = skin.id || `skin-${index}`;\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n    return skin;\n  }\n\n  _resolveMesh(mesh, index) {\n    mesh = {...mesh};\n    mesh.id = mesh.id || `mesh-${index}`;\n    if (mesh.primitives) {\n      mesh.primitives = mesh.primitives.map(primitive => {\n        primitive = {...primitive};\n        const attributes = primitive.attributes;\n        primitive.attributes = {};\n        for (const attribute in attributes) {\n          primitive.attributes[attribute] = this.getAccessor(attributes[attribute]);\n        }\n        if (primitive.indices !== undefined) {\n          primitive.indices = this.getAccessor(primitive.indices);\n        }\n        if (primitive.material !== undefined) {\n          primitive.material = this.getMaterial(primitive.material);\n        }\n        return primitive;\n      });\n    }\n    return mesh;\n  }\n\n  _resolveMaterial(material, index) {\n    material = {...material};\n    material.id = material.id || `material-${index}`;\n    if (material.normalTexture) {\n      material.normalTexture = {...material.normalTexture};\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlustionTexture = {...material.occlustionTexture};\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emmisiveTexture = {...material.emmisiveTexture};\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n\n    if (material.pbrMetallicRoughness) {\n      material.pbrMetallicRoughness = {...material.pbrMetallicRoughness};\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture = {...mr.baseColorTexture};\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture = {...mr.metallicRoughnessTexture};\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n    return material;\n  }\n\n  _resolveAccessor(accessor, index) {\n    accessor = {...accessor};\n    accessor.id = accessor.id || `accessor-${index}`;\n    if (accessor.bufferView !== undefined) {\n      // Draco encoded meshes don't have bufferView\n      accessor.bufferView = this.getBufferView(accessor.bufferView);\n    }\n\n    // Look up enums\n    accessor.bytesPerComponent = getBytesFromComponentType(accessor.componentType);\n    accessor.components = getSizeFromAccessorType(accessor.type);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n    return accessor;\n  }\n\n  _resolveTexture(texture, index) {\n    texture = {...texture};\n    texture.id = texture.id || `texture-${index}`;\n    texture.sampler = 'sampler' in texture ? this.getSampler(texture.sampler) : DEFAULT_SAMPLER;\n    texture.source = this.getImage(texture.source);\n    return texture;\n  }\n\n  _resolveSampler(sampler, index) {\n    sampler = {...sampler};\n    sampler.id = sampler.id || `sampler-${index}`;\n    // Map textual parameters to GL parameter values\n    sampler.parameters = {};\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n    return sampler;\n  }\n\n  _enumSamplerParameter(key) {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  // TODO - Handle non-binary-chunk images, data URIs, URLs etc\n  // TODO - Image creation could be done on getImage instead of during load\n  _resolveImage(image, index, options) {\n    image = {...image};\n    image.id = image.id || `image-${index}`;\n    if (image.bufferView !== undefined) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n\n    if ('uri' in image) {\n      const baseUri = options.uri || this.gltf.baseUri;\n      if (baseUri) {\n        image.baseUri = baseUri;\n        image.fullUri = getFullUri(image.uri, baseUri);\n      }\n    }\n\n    function getImageAsync() {\n      if (image.uri) {\n        // TODO: Maybe just return the URL?\n        // TODO: Maybe use loaders.gl/core loadImage?\n        return new Promise(resolve => {\n          /* global Image */\n          const img = new Image();\n          img.crossOrigin = 'anonymous';\n          img.onload = () => resolve(img);\n          img.src = image.fullUri || image.uri;\n        });\n      }\n      // cannot get image\n      return null;\n    }\n\n    image.getImageAsync = getImageAsync;\n    return image;\n  }\n\n  _resolveBufferView(bufferView, index) {\n    bufferView = {...bufferView};\n    bufferView.id = bufferView.id || `bufferView-${index}`;\n    const bufferIndex = bufferView.buffer;\n    bufferView.buffer = this.getBuffer(bufferIndex);\n\n    const arrayBuffer = this.buffers[bufferIndex].arrayBuffer;\n    let byteOffset = this.buffers[bufferIndex].byteOffset || 0;\n\n    if ('byteOffset' in bufferView) {\n      byteOffset += bufferView.byteOffset;\n    }\n\n    bufferView.data = new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n    return bufferView;\n  }\n\n  _resolveCamera(camera, index) {\n    camera.id = camera.id || `camera-${index}`;\n    // TODO - create 4x4 matrices\n    if (camera.perspective) {\n      // camera.matrix = createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      // camera.matrix = createOrthographicMatrix(camera.orthographic);\n    }\n    return camera;\n  }\n}\n\nexport default function postProcessGLTF(gltf, options) {\n  return new GLTFPostProcessor().postProcess(gltf, options);\n}\n"],"file":"post-process-gltf.js"}