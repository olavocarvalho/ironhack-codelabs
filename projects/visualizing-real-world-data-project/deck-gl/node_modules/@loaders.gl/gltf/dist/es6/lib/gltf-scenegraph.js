import { getImageMIMEType } from '@loaders.gl/images';
import { padTo4Bytes, copyToArray } from '@loaders.gl/loader-utils';
import assert from './utils/assert';
import { getAccessorArrayTypeAndLength, getAccessorTypeFromSize, getComponentTypeFromArray } from './gltf-utils/gltf-utils';
export default class GLTFScenegraph {
  constructor(gltf) {
    if (gltf instanceof GLTFScenegraph) {
      return gltf;
    }

    if (!gltf) {
      gltf = {
        json: {
          version: 2,
          buffers: []
        },
        binary: null
      };
    }

    this.gltf = gltf;
  }

  get json() {
    return this.gltf.json;
  }

  getApplicationData(key) {
    var data = this.json[key];
    return data;
  }

  getExtraData(key) {
    var extras = this.json.extras || {};
    return extras[key];
  }

  getExtension(extensionName) {
    var isExtension = this.getUsedExtensions().find(name => name === extensionName);
    var extensions = this.json.extensions || {};
    return isExtension ? extensions[extensionName] || true : null;
  }

  getRequiredExtension(extensionName) {
    var isRequired = this.getRequiredExtensions().find(name => name === extensionName);
    return isRequired ? this.getExtension(extensionName) : null;
  }

  getRequiredExtensions() {
    return this.json.extensionsRequired || [];
  }

  getUsedExtensions() {
    return this.json.extensionsUsed || [];
  }

  getObjectExtension(object, extensionName) {
    var extensions = object.extensions || {};
    return extensions[extensionName];
  }

  getScene(index) {
    return this.getObject('scenes', index);
  }

  getNode(index) {
    return this.getObject('nodes', index);
  }

  getSkin(index) {
    return this.getObject('skins', index);
  }

  getMesh(index) {
    return this.getObject('meshes', index);
  }

  getMaterial(index) {
    return this.getObject('materials', index);
  }

  getAccessor(index) {
    return this.getObject('accessors', index);
  }

  getCamera(index) {
    return null;
  }

  getTexture(index) {
    return this.getObject('textures', index);
  }

  getSampler(index) {
    return this.getObject('samplers', index);
  }

  getImage(index) {
    return this.getObject('images', index);
  }

  getBufferView(index) {
    return this.getObject('bufferViews', index);
  }

  getBuffer(index) {
    return this.getObject('buffers', index);
  }

  getObject(array, index) {
    if (typeof index === 'object') {
      return index;
    }

    var object = this.gltf[array] && this.gltf[array][index];

    if (!object) {
      console.warn("glTF file error: Could not find ".concat(array, "[").concat(index, "]"));
    }

    return object;
  }

  getTypedArrayForBufferView(bufferView) {
    bufferView = this.getBufferView(bufferView);
    var buffer = this.getBuffer(bufferView.buffer);
    var arrayBuffer = buffer.data;
    var byteOffset = bufferView.byteOffset || 0;
    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);
  }

  getTypedArrayForAccessor(accessor) {
    accessor = this.getAccessor(accessor);
    var bufferView = this.getBuffer(accessor.bufferView);
    var buffer = this.getBuffer(bufferView.buffer);
    var arrayBuffer = buffer.data;
    var {
      ArrayType,
      length
    } = getAccessorArrayTypeAndLength(accessor, bufferView);
    var byteOffset = bufferView.byteOffset + accessor.byteOffset;
    return new ArrayType(arrayBuffer, byteOffset, length);
  }

  getTypedArrayForImageData(image) {
    image = this.getAccessor(image);
    var bufferView = this.getBuffer(image.bufferView);
    var buffer = this.getBuffer(bufferView.buffer);
    var arrayBuffer = buffer.data;
    var byteOffset = bufferView.byteOffset || 0;
    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);
  }

  addApplicationData(key, data) {
    this.json[key] = data;
    return this;
  }

  addExtraData(key, data) {
    this.json.extras = this.json.extras || {};
    this.json.extras[key] = data;
    return this;
  }

  addExtension(extensionName, data) {
    assert(data);
    this.json.extensions = this.json.extensions || {};
    this.json.extensions[extensionName] = data;
    this.registerUsedExtension(extensionName);
    return this;
  }

  addRequiredExtension(extensionName, data) {
    assert(data);
    this.addExtension(extensionName, data);
    this.registerRequiredExtension(extensionName);
    return this;
  }

  registerUsedExtension(extensionName) {
    this.json.extensionsUsed = this.json.extensionsUsed || [];

    if (!this.json.extensionsUsed.find(ext => ext === extensionName)) {
      this.json.extensionsUsed.push(extensionName);
    }
  }

  registerRequiredExtension(extensionName) {
    this.registerUsedExtension(extensionName);
    this.json.extensionsRequired = this.json.extensionsRequired || [];

    if (!this.json.extensionsRequired.find(ext => ext === extensionName)) {
      this.json.extensionsRequired.push(extensionName);
    }
  }

  removeExtension(extensionName) {
    if (this.json.extensionsRequired) {
      this._removeStringFromArray(this.json.extensionsRequired, extensionName);
    }

    if (this.json.extensionsUsed) {
      this._removeStringFromArray(this.json.extensionsUsed, extensionName);
    }

    if (this.json.extensions) {
      delete this.json.extensions[extensionName];
    }
  }

  setObjectExtension(object, extensionName, data) {
    var extensions = object.extensions || {};
    extensions[extensionName] = data;
  }

  addMesh(attributes, indices) {
    var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;

    var accessors = this._addAttributes(attributes);

    var glTFMesh = {
      primitives: [{
        attributes: accessors,
        indices,
        mode
      }]
    };
    this.json.meshes = this.json.meshes || [];
    this.json.meshes.push(glTFMesh);
    return this.json.meshes.length - 1;
  }

  addPointCloud(attributes) {
    var accessorIndices = this._addAttributes(attributes);

    var glTFMesh = {
      primitives: [{
        attributes: accessorIndices,
        mode: 0
      }]
    };
    this.json.meshes = this.json.meshes || [];
    this.json.meshes.push(glTFMesh);
    return this.json.meshes.length - 1;
  }

  addImage(imageData, mimeType) {
    mimeType = mimeType || getImageMIMEType(imageData);
    var bufferViewIndex = this.addBufferView(imageData);
    var glTFImage = {
      bufferView: bufferViewIndex,
      mimeType
    };
    this.json.images = this.json.images || [];
    this.json.images.push(glTFImage);
    return this.json.images.length - 1;
  }

  addBufferView(buffer) {
    var byteLength = buffer.byteLength;
    assert(Number.isFinite(byteLength));
    this.sourceBuffers = this.sourceBuffers || [];
    this.sourceBuffers.push(buffer);
    var glTFBufferView = {
      buffer: 0,
      byteOffset: this.byteLength,
      byteLength
    };
    this.byteLength += padTo4Bytes(byteLength);
    this.json.bufferViews = this.json.bufferViews || [];
    this.json.bufferViews.push(glTFBufferView);
    return this.json.bufferViews.length - 1;
  }

  addAccessor(bufferViewIndex, accessor) {
    var glTFAccessor = {
      bufferView: bufferViewIndex,
      type: getAccessorTypeFromSize(accessor.size),
      componentType: accessor.componentType,
      count: accessor.count
    };
    this.json.accessors = this.json.accessors || [];
    this.json.accessors.push(glTFAccessor);
    return this.json.accessors.length - 1;
  }

  addBinaryBuffer(sourceBuffer) {
    var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      size: 3
    };
    var bufferViewIndex = this.addBufferView(sourceBuffer);
    var accessorDefaults = {
      size: accessor.size,
      componentType: getComponentTypeFromArray(sourceBuffer),
      count: Math.round(sourceBuffer.length / accessor.size)
    };
    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));
  }

  createBinaryChunk() {
    if (this.arrayBuffer) {
      return;
    }

    var totalByteLength = this.byteLength;
    var arrayBuffer = new ArrayBuffer(totalByteLength);
    var targetArray = new Uint8Array(arrayBuffer);
    var dstByteOffset = 0;

    for (var i = 0; i < this.sourceBuffers.length; i++) {
      var sourceBuffer = this.sourceBuffers[i];
      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);
    }

    this.json.buffers[0].byteLength = totalByteLength;
    this.arrayBuffer = arrayBuffer;
    this.sourceBuffers = [];
  }

  _removeStringFromArray(array, string) {
    var found = true;

    while (found) {
      var index = array.indexOf(string);

      if (index > -1) {
        array.splice(index, 1);
      } else {
        found = false;
      }
    }
  }

}
//# sourceMappingURL=gltf-scenegraph.js.map