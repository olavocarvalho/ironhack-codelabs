{"version":3,"sources":["../../../src/lib/gltf-scenegraph.js"],"names":["getImageMIMEType","padTo4Bytes","copyToArray","assert","getAccessorArrayTypeAndLength","getAccessorTypeFromSize","getComponentTypeFromArray","GLTFScenegraph","constructor","gltf","json","version","buffers","binary","getApplicationData","key","data","getExtraData","extras","getExtension","extensionName","isExtension","getUsedExtensions","find","name","extensions","getRequiredExtension","isRequired","getRequiredExtensions","extensionsRequired","extensionsUsed","getObjectExtension","object","getScene","index","getObject","getNode","getSkin","getMesh","getMaterial","getAccessor","getCamera","getTexture","getSampler","getImage","getBufferView","getBuffer","array","console","warn","getTypedArrayForBufferView","bufferView","buffer","arrayBuffer","byteOffset","Uint8Array","byteLength","getTypedArrayForAccessor","accessor","ArrayType","length","getTypedArrayForImageData","image","addApplicationData","addExtraData","addExtension","registerUsedExtension","addRequiredExtension","registerRequiredExtension","ext","push","removeExtension","_removeStringFromArray","setObjectExtension","addMesh","attributes","indices","mode","accessors","_addAttributes","glTFMesh","primitives","meshes","addPointCloud","accessorIndices","addImage","imageData","mimeType","bufferViewIndex","addBufferView","glTFImage","images","Number","isFinite","sourceBuffers","glTFBufferView","bufferViews","addAccessor","glTFAccessor","type","size","componentType","count","addBinaryBuffer","sourceBuffer","accessorDefaults","Math","round","Object","assign","createBinaryChunk","totalByteLength","ArrayBuffer","targetArray","dstByteOffset","i","string","found","indexOf","splice"],"mappings":"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","sourcesContent":["import {getImageMIMEType} from '@loaders.gl/images';\nimport {padTo4Bytes, copyToArray} from '@loaders.gl/loader-utils';\nimport assert from './utils/assert';\nimport {\n  getAccessorArrayTypeAndLength,\n  getAccessorTypeFromSize,\n  getComponentTypeFromArray\n} from './gltf-utils/gltf-utils';\n\n// Class for structured access to GLTF data\nexport default class GLTFScenegraph {\n  constructor(gltf) {\n    // Signature: new GLTFScenegraph(data : GLTFScenegraph)\n    // Allow utilities to create a GLTFScenegraph object from gltf data without checking\n    if (gltf instanceof GLTFScenegraph) {\n      return gltf;\n    }\n\n    if (!gltf) {\n      gltf = {\n        json: {\n          version: 2,\n          buffers: []\n        },\n        binary: null\n      };\n    }\n\n    this.gltf = gltf;\n  }\n\n  // Accessors\n\n  get json() {\n    return this.gltf.json;\n  }\n\n  getApplicationData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension(extensionName) {\n    const isExtension = this.getUsedExtensions().find(name => name === extensionName);\n    const extensions = this.json.extensions || {};\n    return isExtension ? extensions[extensionName] || true : null;\n  }\n\n  getRequiredExtension(extensionName) {\n    const isRequired = this.getRequiredExtensions().find(name => name === extensionName);\n    return isRequired ? this.getExtension(extensionName) : null;\n  }\n\n  getRequiredExtensions() {\n    return this.json.extensionsRequired || [];\n  }\n\n  getUsedExtensions() {\n    return this.json.extensionsUsed || [];\n  }\n\n  getObjectExtension(object, extensionName) {\n    const extensions = object.extensions || {};\n    return extensions[extensionName];\n  }\n\n  getScene(index) {\n    return this.getObject('scenes', index);\n  }\n\n  getNode(index) {\n    return this.getObject('nodes', index);\n  }\n\n  getSkin(index) {\n    return this.getObject('skins', index);\n  }\n\n  getMesh(index) {\n    return this.getObject('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this.getObject('materials', index);\n  }\n\n  getAccessor(index) {\n    return this.getObject('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this.getObject('textures', index);\n  }\n\n  getSampler(index) {\n    return this.getObject('samplers', index);\n  }\n\n  getImage(index) {\n    return this.getObject('images', index);\n  }\n\n  getBufferView(index) {\n    return this.getObject('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this.getObject('buffers', index);\n  }\n\n  getObject(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.gltf[array] && this.gltf[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // accepts buffer view index or buffer view object\n  // returns a `Uint8Array`\n  getTypedArrayForBufferView(bufferView) {\n    bufferView = this.getBufferView(bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    const arrayBuffer = buffer.data;\n\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // accepts accessor index or accessor object\n  // returns a typed array with type that matches the types\n  getTypedArrayForAccessor(accessor) {\n    accessor = this.getAccessor(accessor);\n    const bufferView = this.getBuffer(accessor.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    const arrayBuffer = buffer.data;\n\n    // Create a new typed array as a view into the combined buffer\n    const {ArrayType, length} = getAccessorArrayTypeAndLength(accessor, bufferView);\n    const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n    return new ArrayType(arrayBuffer, byteOffset, length);\n  }\n\n  // accepts accessor index or accessor object\n  // returns a `Uint8Array`\n  getTypedArrayForImageData(image) {\n    image = this.getAccessor(image);\n    const bufferView = this.getBuffer(image.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    const arrayBuffer = buffer.data;\n\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // MODIFERS\n\n  // Add an extra application-defined key to the top-level data structure\n  addApplicationData(key, data) {\n    this.json[key] = data;\n    return this;\n  }\n\n  // `extras` - Standard GLTF field for storing application specific data\n  addExtraData(key, data) {\n    this.json.extras = this.json.extras || {};\n    this.json.extras[key] = data;\n    return this;\n  }\n\n  // Add to standard GLTF top level extension object, mark as used\n  addExtension(extensionName, data) {\n    assert(data);\n    this.json.extensions = this.json.extensions || {};\n    this.json.extensions[extensionName] = data;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  // Standard GLTF top level extension object, mark as used and required\n  addRequiredExtension(extensionName, data) {\n    assert(data);\n    this.addExtension(extensionName, data);\n    this.registerRequiredExtension(extensionName);\n    return this;\n  }\n\n  // Add extensionName to list of used extensions\n  registerUsedExtension(extensionName) {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find(ext => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  // Add extensionName to list of required extensions\n  registerRequiredExtension(extensionName) {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find(ext => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  // Removes an extension from the top-level list\n  removeExtension(extensionName) {\n    if (this.json.extensionsRequired) {\n      this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n    }\n    if (this.json.extensionsUsed) {\n      this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n    }\n    if (this.json.extensions) {\n      delete this.json.extensions[extensionName];\n    }\n  }\n\n  setObjectExtension(object, extensionName, data) {\n    const extensions = object.extensions || {};\n    extensions[extensionName] = data;\n    // TODO - add to usedExtensions...\n  }\n\n  addMesh(attributes, indices, mode = 4) {\n    const accessors = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessors,\n          indices,\n          mode\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addPointCloud(attributes) {\n    const accessorIndices = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessorIndices,\n          mode: 0 // GL.POINTS\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  // Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes as glTF image\n  addImage(imageData, mimeType) {\n    // If image is referencing a bufferView instead of URI, mimeType must be defined:\n    //   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n    //   \"a reference to a bufferView; in that case mimeType must be defined.\"\n    mimeType = mimeType || getImageMIMEType(imageData);\n\n    const bufferViewIndex = this.addBufferView(imageData);\n\n    const glTFImage = {\n      bufferView: bufferViewIndex,\n      mimeType\n    };\n\n    this.json.images = this.json.images || [];\n    this.json.images.push(glTFImage);\n    return this.json.images.length - 1;\n  }\n\n  // Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n  addBufferView(buffer) {\n    const byteLength = buffer.byteLength;\n    assert(Number.isFinite(byteLength));\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers = this.sourceBuffers || [];\n    this.sourceBuffers.push(buffer);\n\n    const glTFBufferView = {\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    };\n\n    // We've now added the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte align ed\n    this.byteLength += padTo4Bytes(byteLength);\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews = this.json.bufferViews || [];\n    this.json.bufferViews.push(glTFBufferView);\n    return this.json.bufferViews.length - 1;\n  }\n\n  // Adds an accessor to a bufferView\n  addAccessor(bufferViewIndex, accessor) {\n    const glTFAccessor = {\n      bufferView: bufferViewIndex,\n      type: getAccessorTypeFromSize(accessor.size),\n      componentType: accessor.componentType,\n      count: accessor.count\n    };\n\n    this.json.accessors = this.json.accessors || [];\n    this.json.accessors.push(glTFAccessor);\n    return this.json.accessors.length - 1;\n  }\n\n  // Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes buffers as glTF accessors, but this could be optimized\n  addBinaryBuffer(sourceBuffer, accessor = {size: 3}) {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n\n    const accessorDefaults = {\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      count: Math.round(sourceBuffer.length / accessor.size)\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  // Pack the binary chunk\n  createBinaryChunk() {\n    // Already packed\n    if (this.arrayBuffer) {\n      return;\n    }\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (let i = 0; i < this.sourceBuffers.length; i++) {\n      const sourceBuffer = this.sourceBuffers[i];\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    this.json.buffers[0].byteLength = totalByteLength;\n\n    // Save generated arrayBuffer\n    this.arrayBuffer = arrayBuffer;\n\n    // Clear out sourceBuffers\n    this.sourceBuffers = [];\n  }\n\n  // PRIVATE\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n}\n"],"file":"gltf-scenegraph.js"}